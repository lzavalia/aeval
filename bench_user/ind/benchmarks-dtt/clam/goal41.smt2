(declare-datatypes () ((Lst (cons (head Int) (tail Lst)) (nil))))
(declare-datatypes () ((Tree (node (data Int) (left Tree) (right Tree)) (leaf))))
(declare-datatypes () ((Pair (mkpair (first Int) (second Int)))
                       (ZLst (zcons (zhead Pair) (ztail ZLst)) (znil))))
(declare-fun less (Int Int) Bool)
(declare-fun plus (Int Int) Int)
(declare-fun mult (Int Int) Int)
(declare-fun qmult (Int Int Int) Int)
(declare-fun exp (Int Int) Int)
(declare-fun qexp (Int Int Int) Int)
(declare-fun fac (Int) Int)
(declare-fun qfac (Int Int) Int)
(declare-fun double (Int) Int)
(declare-fun half (Int) Int)
(declare-fun even (Int) Bool)
(declare-fun append (Lst Lst) Lst)
(declare-fun len (Lst) Int)
(declare-fun drop (Int Lst) Lst)
(declare-fun take (Int Lst) Lst)
(declare-fun count (Int Lst) Int)
(declare-fun mem (Int Lst) Bool)
(declare-fun rev (Lst) Lst)
(declare-fun qreva (Lst Lst) Lst)
(declare-fun insort (Int Lst) Lst)
(declare-fun sorted (Lst) Bool)
(declare-fun sort (Lst) Lst)
(declare-fun rotate (Int Lst) Lst)
(declare-fun revflat (Tree) Lst)
(declare-fun qrevaflat (Tree Lst) Lst)
(declare-fun lst-mem (Int (Set Int)) Bool)
(declare-fun lst-subset ((Set Int) (Set Int)) Bool)
(declare-fun lst-eq ((Set Int) (Set Int)) Bool)
(declare-fun lst-intersection ((Set Int) (Set Int)) (Set Int))
(declare-fun lst-union ((Set Int) (Set Int)) (Set Int))
(define-fun leq ((x Int) (y Int)) Bool (or (= x y) (less x y)))
(assert (forall ((x Int) (y Int) (z (Set Int))) (= (lst-mem x (union (singleton y) z)) (or (= x y) (lst-mem x z)))))
(assert (forall ((x Int) (y (Set Int))) (= (lst-mem x y) (member x y))))
(assert (forall ((n Int) (x (Set Int)) (y (Set Int))) (= (lst-subset (union (singleton n) x) y) (and (lst-subset x y) (lst-mem n y)))))
(assert (forall ((x (Set Int)) (y (Set Int))) (= (lst-subset x y) (subset x y))))
(assert (forall ((x (Set Int)) (y (Set Int))) (= (lst-eq x y) (and (lst-subset x y) (lst-subset y x)))))
(assert (forall ((x (Set Int)) (y (Set Int))) (= (lst-eq x y) (= x y))))
(assert (forall ((x (Set Int))) (= (lst-intersection (as emptyset (Set Int)) x) (as emptyset (Set Int)))))
(assert (forall ((n Int) (x (Set Int)) (y (Set Int))) (= (lst-intersection (union (singleton n) x) y) (ite (lst-mem n y) (union (singleton n) (lst-intersection x y)) (lst-intersection x y)))))
(assert (forall ((x (Set Int)) (y (Set Int))) (= (lst-intersection x y) (intersection x y))))
(assert (not 
(forall ((x (Set Int)) (y (Set Int))) (=> (lst-subset x y) (lst-eq (lst-intersection x y) x))) ; G41 
))
(check-sat)
