
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
	(forall ((Nat) (Nat)) ((plus _qv_1 _qv_2)=(plus _qv_2 _qv_1)))
	(forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_3 _qv_4) _qv_5)=(plus _qv_3 (plus _qv_4 _qv_5))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_6) (succ _qv_7))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_7) (succ _qv_6))))

Simplified goal: (forall ((Nat) (Nat)) ((even (plus x y))=(even (plus y x))))


Base case:       ((even (plus zero _v_8))=(even (plus _v_8 zero)))
{
  {
    ====================
    | Assumptions [0]: (even zero)
    | Assumptions [1]: (forall ((Nat)) ((plus zero _qv_1)=_qv_1))
    | Assumptions [2]: (forall ((Nat) (Nat)) ((plus (succ _qv_2) _qv_3)=(succ (plus _qv_2 _qv_3))))
    | Assumptions [3]: (forall ((Nat)) ((even (succ _qv_4))=(!(even _qv_4))))
    | Assumptions [4]: (forall ((Nat) (Nat)) ((even (plus _qv_5 _qv_6))=(even (plus _qv_5 (succ (succ _qv_6))))))
    | Assumptions [5]: ((even (succ zero))=(!(even zero)))
    ====================
  }
  rewritten [1]: ((even _v_8)=(even (plus _v_8 zero)))
  rewritten [4]: ((even _v_8)=(even (plus _v_8 (succ (succ zero)))))
  rewritten [4]: ((even _v_8)=(even (plus _v_8 (succ (succ (succ (succ zero)))))))
  rewritten [4]: ((even _v_8)=(even (plus _v_8 (succ (succ (succ (succ (succ (succ zero)))))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((even _v_8)=(even (plus _v_8 (succ (succ (succ (succ zero)))))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((even _v_8)=(even (plus _v_8 (succ (succ (succ (succ zero)))))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1 _qv_2)=(plus _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((even _v_8)=(even (plus _v_8 (succ (succ (succ (succ zero)))))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_3 _qv_4) _qv_5)=(plus _qv_3 (plus _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((even _v_8)=(even (plus _v_8 (succ (succ (succ (succ zero)))))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_6) (succ _qv_7))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((even _v_8)=(even (plus _v_8 (succ (succ (succ (succ zero)))))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_7) (succ _qv_6))))
USE ASSUMPTION FAILED

  backtrack to: ((even _v_8)=(even (plus _v_8 (succ (succ (succ (succ zero)))))))
  rewritten [4]: ((even _v_8)=(even (plus _v_8 (succ (succ (succ (succ (succ (succ zero)))))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((even _v_8)=(even (plus _v_8 (succ (succ (succ (succ zero)))))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((even _v_8)=(even (plus _v_8 (succ (succ (succ (succ zero)))))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1 _qv_2)=(plus _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((even _v_8)=(even (plus _v_8 (succ (succ (succ (succ zero)))))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_3 _qv_4) _qv_5)=(plus _qv_3 (plus _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((even _v_8)=(even (plus _v_8 (succ (succ (succ (succ zero)))))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_6) (succ _qv_7))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((even _v_8)=(even (plus _v_8 (succ (succ (succ (succ zero)))))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_7) (succ _qv_6))))
USE ASSUMPTION FAILED

  backtrack to: ((even _v_8)=(even (plus _v_8 (succ (succ (succ (succ zero)))))))
CURRENT SUBGOAL ((even _v_8)=(even (plus _v_8 (succ (succ zero)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((even _v_8)=(even (plus _v_8 (succ (succ zero)))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1 _qv_2)=(plus _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((even _v_8)=(even (plus _v_8 (succ (succ zero)))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_3 _qv_4) _qv_5)=(plus _qv_3 (plus _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((even _v_8)=(even (plus _v_8 (succ (succ zero)))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_6) (succ _qv_7))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((even _v_8)=(even (plus _v_8 (succ (succ zero)))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_7) (succ _qv_6))))
USE ASSUMPTION FAILED

  backtrack to: ((even _v_8)=(even (plus _v_8 (succ (succ zero)))))
  rewritten [4]: ((even _v_8)=(even (plus _v_8 (succ (succ (succ (succ zero)))))))
  rewritten [4]: ((even _v_8)=(even (plus _v_8 (succ (succ (succ (succ (succ (succ zero)))))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((even _v_8)=(even (plus _v_8 (succ (succ (succ (succ zero)))))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((even _v_8)=(even (plus _v_8 (succ (succ (succ (succ zero)))))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1 _qv_2)=(plus _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((even _v_8)=(even (plus _v_8 (succ (succ (succ (succ zero)))))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_3 _qv_4) _qv_5)=(plus _qv_3 (plus _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((even _v_8)=(even (plus _v_8 (succ (succ (succ (succ zero)))))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_6) (succ _qv_7))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((even _v_8)=(even (plus _v_8 (succ (succ (succ (succ zero)))))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_7) (succ _qv_6))))
USE ASSUMPTION FAILED

  backtrack to: ((even _v_8)=(even (plus _v_8 (succ (succ (succ (succ zero)))))))
  rewritten [4]: ((even _v_8)=(even (plus _v_8 (succ (succ (succ (succ (succ (succ zero)))))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((even _v_8)=(even (plus _v_8 (succ (succ (succ (succ zero)))))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((even _v_8)=(even (plus _v_8 (succ (succ (succ (succ zero)))))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1 _qv_2)=(plus _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((even _v_8)=(even (plus _v_8 (succ (succ (succ (succ zero)))))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_3 _qv_4) _qv_5)=(plus _qv_3 (plus _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((even _v_8)=(even (plus _v_8 (succ (succ (succ (succ zero)))))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_6) (succ _qv_7))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((even _v_8)=(even (plus _v_8 (succ (succ (succ (succ zero)))))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_7) (succ _qv_6))))
USE ASSUMPTION FAILED

  backtrack to: ((even _v_8)=(even (plus _v_8 (succ (succ (succ (succ zero)))))))
CURRENT SUBGOAL ((even _v_8)=(even (plus _v_8 (succ (succ zero)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((even _v_8)=(even (plus _v_8 (succ (succ zero)))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1 _qv_2)=(plus _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((even _v_8)=(even (plus _v_8 (succ (succ zero)))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_3 _qv_4) _qv_5)=(plus _qv_3 (plus _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((even _v_8)=(even (plus _v_8 (succ (succ zero)))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_6) (succ _qv_7))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((even _v_8)=(even (plus _v_8 (succ (succ zero)))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_7) (succ _qv_6))))
USE ASSUMPTION FAILED

  backtrack to: ((even _v_8)=(even (plus _v_8 (succ (succ zero)))))

The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_9))=_qv_9))
	(forall ((Nat) (Nat)) ((plus _qv_10 _qv_11)=(plus _qv_11 _qv_10)))
	(forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_12 _qv_13) _qv_14)=(plus _qv_12 (plus _qv_13 _qv_14))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_15 _qv_16))=(plus (succ _qv_15) (succ _qv_16))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_15 _qv_16))=(plus (succ _qv_16) (succ _qv_15))))

  proven by induction: ((even _v_8)=(even (plus _v_8 (succ (succ zero)))))
  rewriting done
}
Inductive step:  ((even (plus (succ _t_9) _v_8))=(even (plus _v_8 (succ _t_9))))
{
  {
    ====================
    | Assumptions [0]: (even zero)
    | Assumptions [1]: (forall ((Nat)) ((plus zero _qv_1)=_qv_1))
    | Assumptions [2]: (forall ((Nat) (Nat)) ((plus (succ _qv_2) _qv_3)=(succ (plus _qv_2 _qv_3))))
    | Assumptions [3]: (forall ((Nat)) ((even (succ _qv_4))=(!(even _qv_4))))
    | Assumptions [4]: (forall ((Nat) (Nat)) ((even (plus _qv_5 _qv_6))=(even (plus _qv_5 (succ (succ _qv_6))))))
    | Assumptions [5]: (forall ((Nat)) ((even (plus _t_9 y))=(even (plus y _t_9))))
    | Assumptions [6]: (forall ((Nat)) ((even (plus y _t_9))=(even (plus _t_9 y))))
    | Assumptions [7]: ((even (succ zero))=(!(even zero)))
    ====================
  }
  rewritten [2]: ((even (succ (plus _t_9 _v_8)))=(even (plus _v_8 (succ _t_9))))
  rewritten [3]: ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ _t_9))))
  rewritten [4]: ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ _t_9))))))
  rewritten [4]: ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
  rewritten [4]: ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ (succ (succ _t_9))))))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1 _qv_2)=(plus _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_3 _qv_4) _qv_5)=(plus _qv_3 (plus _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_6) (succ _qv_7))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_7) (succ _qv_6))))
USE ASSUMPTION FAILED

  backtrack to: ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
  rewritten [4]: ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1 _qv_2)=(plus _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_3 _qv_4) _qv_5)=(plus _qv_3 (plus _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_6) (succ _qv_7))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_7) (succ _qv_6))))
USE ASSUMPTION FAILED

  backtrack to: ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
  rewritten [5]: ((!(even (plus _v_8 _t_9)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1 _qv_2)=(plus _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_3 _qv_4) _qv_5)=(plus _qv_3 (plus _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_6) (succ _qv_7))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_7) (succ _qv_6))))
USE ASSUMPTION FAILED

  backtrack to: ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
  rewritten [4]: ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ (succ (succ _t_9))))))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1 _qv_2)=(plus _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_3 _qv_4) _qv_5)=(plus _qv_3 (plus _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_6) (succ _qv_7))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_7) (succ _qv_6))))
USE ASSUMPTION FAILED

  backtrack to: ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
  rewritten [4]: ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1 _qv_2)=(plus _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_3 _qv_4) _qv_5)=(plus _qv_3 (plus _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_6) (succ _qv_7))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_7) (succ _qv_6))))
USE ASSUMPTION FAILED

  backtrack to: ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
  rewritten [5]: ((!(even (plus _v_8 _t_9)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1 _qv_2)=(plus _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_3 _qv_4) _qv_5)=(plus _qv_3 (plus _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_6) (succ _qv_7))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_7) (succ _qv_6))))
USE ASSUMPTION FAILED

  backtrack to: ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1 _qv_2)=(plus _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_3 _qv_4) _qv_5)=(plus _qv_3 (plus _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_6) (succ _qv_7))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_7) (succ _qv_6))))
USE ASSUMPTION FAILED

  backtrack to: ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ _t_9))))))
  rewritten [4]: ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
  rewritten [4]: ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1 _qv_2)=(plus _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_3 _qv_4) _qv_5)=(plus _qv_3 (plus _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_6) (succ _qv_7))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_7) (succ _qv_6))))
USE ASSUMPTION FAILED

  backtrack to: ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
  rewritten [4]: ((!(even (plus _t_9 (succ (succ (succ (succ _v_8)))))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1 _qv_2)=(plus _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_3 _qv_4) _qv_5)=(plus _qv_3 (plus _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_6) (succ _qv_7))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_7) (succ _qv_6))))
USE ASSUMPTION FAILED

  backtrack to: ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
  rewritten [5]: ((!(even (plus (succ (succ _v_8)) _t_9)))=(even (plus _v_8 (succ (succ (succ _t_9))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1 _qv_2)=(plus _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_3 _qv_4) _qv_5)=(plus _qv_3 (plus _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_6) (succ _qv_7))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_7) (succ _qv_6))))
USE ASSUMPTION FAILED

  backtrack to: ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
  rewritten [4]: ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ (succ (succ _t_9))))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1 _qv_2)=(plus _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_3 _qv_4) _qv_5)=(plus _qv_3 (plus _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_6) (succ _qv_7))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_7) (succ _qv_6))))
USE ASSUMPTION FAILED

  backtrack to: ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
  rewritten [4]: ((!(even (plus _t_9 (succ (succ (succ (succ _v_8)))))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1 _qv_2)=(plus _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_3 _qv_4) _qv_5)=(plus _qv_3 (plus _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_6) (succ _qv_7))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_7) (succ _qv_6))))
USE ASSUMPTION FAILED

  backtrack to: ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
  rewritten [5]: ((!(even (plus (succ (succ _v_8)) _t_9)))=(even (plus _v_8 (succ (succ (succ _t_9))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1 _qv_2)=(plus _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_3 _qv_4) _qv_5)=(plus _qv_3 (plus _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_6) (succ _qv_7))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_7) (succ _qv_6))))
USE ASSUMPTION FAILED

  backtrack to: ((!(even (plus _t_9 (succ (succ _v_8)))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1 _qv_2)=(plus _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_3 _qv_4) _qv_5)=(plus _qv_3 (plus _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_6) (succ _qv_7))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ _t_9))))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_6 _qv_7))=(plus (succ _qv_7) (succ _qv_6))))
USE ASSUMPTION FAILED

  backtrack to: ((!(even (plus _t_9 _v_8)))=(even (plus _v_8 (succ (succ (succ _t_9))))))
  rewritten [5]: ((!(even (plus _v_8 _t_9)))=(even (plus _v_8 (succ (succ (succ _t_9))))))
  rewritten [4]: ((!(even (plus _v_8 (succ (succ _t_9)))))=(even (plus _v_8 (succ (succ (succ _t_9))))))
  sequence of rewrites only grows

The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_11))=_qv_11))
	(forall ((Nat) (Nat)) ((plus _qv_12 _qv_13)=(plus _qv_13 _qv_12)))
	(forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_14 _qv_15) _qv_16)=(plus _qv_14 (plus _qv_15 _qv_16))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_17 _qv_18))=(plus (succ _qv_17) (succ _qv_18))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_17 _qv_18))=(plus (succ _qv_18) (succ _qv_17))))

  proven by induction: ((!(even (plus _v_8 (succ _w_10))))=(even (plus _v_8 (succ (succ _w_10)))))
  rewriting done
  rewriting done
  rewriting done
  rewriting done
}

Proved
unsat
