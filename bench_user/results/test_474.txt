
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat) (Nat)) ((less _qv_0 _qv_1)=(less _qv_1 _qv_0)))
	(forall ((Lst)) ((sort (sort _qv_2))=_qv_2))
	(forall ((Nat) (Lst) (Lst)) ((insort _qv_3 (cons _qv_4 _qv_5))=(cons (insort _qv_3 _qv_4) (insort _qv_3 _qv_5))))
	(forall ((Nat) (Lst) (Lst)) ((cons _qv_6 (insort _qv_7 _qv_8))=(insort (cons _qv_6 _qv_7) (cons _qv_6 _qv_8))))

Simplified goal: (forall ((Nat) (Lst)) ((count x l)=(count x (sort l))))


Base case:       ((count zero _v_9)=(count zero (sort _v_9)))
{
  {
    ====================
    | Assumptions [0]: ((sort nil)=nil)
    | Assumptions [1]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
    | Assumptions [2]: (forall ((Nat)) ((count _qv_5 nil)=zero))
    | Assumptions [3]: (forall ((Nat) (Nat) (Lst)) ((count _qv_6 (cons _qv_7 _qv_8))=ite(_qv_6=_qv_7, (succ (count _qv_6 _qv_8)), (count _qv_6 _qv_8))))
    | Assumptions [4]: (forall ((Nat)) ((insort _qv_9 nil)=(cons _qv_9 nil)))
    | Assumptions [5]: (forall ((Nat) (Nat) (Lst)) ((insort _qv_10 (cons _qv_11 _qv_12))=ite((less _qv_10 _qv_11), (cons _qv_10 (cons _qv_11 _qv_12)), (cons _qv_11 (insort _qv_10 _qv_12)))))
    | Assumptions [6]: (forall ((Nat) (Lst)) ((sort (cons _qv_13 _qv_14))=(insort _qv_13 (sort _qv_14))))
    | Assumptions [7]: (forall ((Nat)) (!(less _qv_1 zero)))
    | Assumptions [8]: (forall ((Nat)) (less zero (succ _qv_2)))
    ====================
  }
}

Base case:       ((count _v_10 nil)=(count _v_10 (sort nil)))
{
  proven trivially
}
Inductive step:  ((count _v_10 (cons _t_11 _t_12))=(count _v_10 (sort (cons _t_11 _t_12))))
{
  {
    ====================
    | Assumptions [0]: ((sort nil)=nil)
    | Assumptions [1]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
    | Assumptions [2]: (forall ((Nat)) ((count _qv_5 nil)=zero))
    | Assumptions [3]: (forall ((Nat) (Nat) (Lst)) ((count _qv_6 (cons _qv_7 _qv_8))=ite(_qv_6=_qv_7, (succ (count _qv_6 _qv_8)), (count _qv_6 _qv_8))))
    | Assumptions [4]: (forall ((Nat)) ((insort _qv_9 nil)=(cons _qv_9 nil)))
    | Assumptions [5]: (forall ((Nat) (Nat) (Lst)) ((insort _qv_10 (cons _qv_11 _qv_12))=ite((less _qv_10 _qv_11), (cons _qv_10 (cons _qv_11 _qv_12)), (cons _qv_11 (insort _qv_10 _qv_12)))))
    | Assumptions [6]: (forall ((Nat) (Lst)) ((sort (cons _qv_13 _qv_14))=(insort _qv_13 (sort _qv_14))))
    | Assumptions [7]: (forall ((Nat)) (!(less _qv_1 zero)))
    | Assumptions [8]: (forall ((Nat)) (less zero (succ _qv_2)))
    | Assumptions [9]: (forall ((Nat)) ((count x _t_12)=(count x (sort _t_12))))
    | Assumptions [10]: (forall ((Nat)) ((count x (sort _t_12))=(count x _t_12)))
    ====================
  }
  rewritten [3]: (ite(_v_10=_t_11, (succ (count _v_10 _t_12)), (count _v_10 _t_12))=(count _v_10 (sort (cons _t_11 _t_12))))
  proceed with (part 1/2): ((_v_10=_t_11)->((succ (count _v_10 _t_12))=(count _v_10 (sort (cons _t_11 _t_12)))))
  {
    {
      ====================
      | Assumptions [0]: ((sort nil)=nil)
      | Assumptions [1]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
      | Assumptions [2]: (forall ((Nat)) ((count _qv_5 nil)=zero))
      | Assumptions [3]: (forall ((Nat) (Nat) (Lst)) ((count _qv_6 (cons _qv_7 _qv_8))=ite(_qv_6=_qv_7, (succ (count _qv_6 _qv_8)), (count _qv_6 _qv_8))))
      | Assumptions [4]: (forall ((Nat)) ((insort _qv_9 nil)=(cons _qv_9 nil)))
      | Assumptions [5]: (forall ((Nat) (Nat) (Lst)) ((insort _qv_10 (cons _qv_11 _qv_12))=ite((less _qv_10 _qv_11), (cons _qv_10 (cons _qv_11 _qv_12)), (cons _qv_11 (insort _qv_10 _qv_12)))))
      | Assumptions [6]: (forall ((Nat) (Lst)) ((sort (cons _qv_13 _qv_14))=(insort _qv_13 (sort _qv_14))))
      | Assumptions [7]: (forall ((Nat)) (!(less _qv_1 zero)))
      | Assumptions [8]: (forall ((Nat)) (less zero (succ _qv_2)))
      | Assumptions [9]: (forall ((Nat)) ((count x _t_12)=(count x (sort _t_12))))
      | Assumptions [10]: (forall ((Nat)) ((count x (sort _t_12))=(count x _t_12)))
      ====================
    }
    current subgoal: ((succ (count _t_11 _t_12))=(count _t_11 (sort (cons _t_11 _t_12))))
    rewritten [6]: ((succ (count _t_11 _t_12))=(count _t_11 (insort _t_11 (sort _t_12))))
    rewritten [9]: ((succ (count _t_11 (sort _t_12)))=(count _t_11 (insort _t_11 (sort _t_12))))

The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat) (Nat)) ((less _qv_14 _qv_15)=(less _qv_15 _qv_14)))
	(forall ((Lst)) ((sort (sort _qv_16))=_qv_16))
	(forall ((Nat) (Lst) (Lst)) ((insort _qv_17 (cons _qv_18 _qv_19))=(cons (insort _qv_17 _qv_18) (insort _qv_17 _qv_19))))
	(forall ((Nat) (Lst) (Lst)) ((cons _qv_20 (insort _qv_21 _qv_22))=(insort (cons _qv_20 _qv_21) (cons _qv_20 _qv_22))))

    proven by induction: ((succ (count _t_11 _w_13))=(count _t_11 (insort _t_11 _w_13)))
    rewriting done
  }
  adding ((_v_10=_t_11)->((succ (count _v_10 _t_12))=(count _v_10 (sort (cons _t_11 _t_12))))) to assumptions
  proceed with (part 2/2): ((_v_10!=_t_11)->((count _v_10 _t_12)=(count _v_10 (sort (cons _t_11 _t_12)))))
  {
    {
      ====================
      | Assumptions [0]: ((sort nil)=nil)
      | Assumptions [1]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
      | Assumptions [2]: (forall ((Nat)) ((count _qv_5 nil)=zero))
      | Assumptions [3]: (forall ((Nat) (Nat) (Lst)) ((count _qv_6 (cons _qv_7 _qv_8))=ite(_qv_6=_qv_7, (succ (count _qv_6 _qv_8)), (count _qv_6 _qv_8))))
      | Assumptions [4]: (forall ((Nat)) ((insort _qv_9 nil)=(cons _qv_9 nil)))
      | Assumptions [5]: (forall ((Nat) (Nat) (Lst)) ((insort _qv_10 (cons _qv_11 _qv_12))=ite((less _qv_10 _qv_11), (cons _qv_10 (cons _qv_11 _qv_12)), (cons _qv_11 (insort _qv_10 _qv_12)))))
      | Assumptions [6]: (forall ((Nat) (Lst)) ((sort (cons _qv_13 _qv_14))=(insort _qv_13 (sort _qv_14))))
      | Assumptions [7]: (forall ((Nat)) (!(less _qv_1 zero)))
      | Assumptions [8]: (forall ((Nat)) (less zero (succ _qv_2)))
      | Assumptions [9]: (forall ((Nat)) ((count x _t_12)=(count x (sort _t_12))))
      | Assumptions [10]: (forall ((Nat)) ((count x (sort _t_12))=(count x _t_12)))
      | Assumptions [11]: ((_v_10=_t_11)->((succ (count _v_10 _t_12))=(count _v_10 (sort (cons _t_11 _t_12)))))
      | Assumptions [12]: (_v_10!=_t_11)
      | Assumptions [13]: ((_v_10=_t_11)->((succ (count _v_10 _t_12))=(count _v_10 (insort _t_11 (sort _t_12)))))
      | Assumptions [14]: ((_v_10=_t_11)->((succ (count _v_10 (sort _t_12)))=(count _v_10 (sort (cons _t_11 _t_12)))))
      | Assumptions [15]: ((_v_10=_t_11)->((succ (count _v_10 (sort _t_12)))=(count _v_10 (insort _t_11 (sort _t_12)))))
      ====================
    }
    current subgoal: ((count _v_10 _t_12)=(count _v_10 (sort (cons _t_11 _t_12))))
    rewritten [6]: ((count _v_10 _t_12)=(count _v_10 (insort _t_11 (sort _t_12))))
    rewritten [9]: ((count _v_10 (sort _t_12))=(count _v_10 (insort _t_11 (sort _t_12))))

The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_15))=_qv_15))
	(forall ((Nat) (Nat)) ((less _qv_16 _qv_17)=(less _qv_17 _qv_16)))
	(forall ((Lst)) ((sort (sort _qv_18))=_qv_18))
	(forall ((Nat) (Lst) (Lst)) ((insort _qv_19 (cons _qv_20 _qv_21))=(cons (insort _qv_19 _qv_20) (insort _qv_19 _qv_21))))
	(forall ((Nat) (Lst) (Lst)) ((cons _qv_22 (insort _qv_23 _qv_24))=(insort (cons _qv_22 _qv_23) (cons _qv_22 _qv_24))))

    proven by induction: ((count _v_10 _w_14)=(count _v_10 (insort _t_11 _w_14)))
    rewriting done
  }
  adding ((_v_10!=_t_11)->((count _v_10 _t_12)=(count _v_10 (sort (cons _t_11 _t_12))))) to assumptions
  all subgoals are proven
  rewriting done
}

Proved
unsat
