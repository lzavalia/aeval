
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
	(forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))

Simplified goal: (forall ((Lst) (Lst)) ((rotate (len x) (append x y))=(append y x)))


Base case:       ((rotate (len nil) (append nil _v_6))=(append _v_6 nil))
{
  {
    ====================
    | Assumptions [0]: (forall ((Lst)) ((append nil _qv_1)=_qv_1))
    | Assumptions [1]: (forall ((Nat) (Lst) (Lst)) ((append (cons _qv_2 _qv_3) _qv_4)=(cons _qv_2 (append _qv_3 _qv_4))))
    | Assumptions [2]: (forall ((Nat) (Lst)) ((len (cons _qv_5 _qv_6))=(succ (len _qv_6))))
    | Assumptions [3]: (forall ((Nat)) ((rotate (succ _qv_8) nil)=nil))
    | Assumptions [4]: (forall ((Nat) (Nat) (Lst)) ((rotate (succ _qv_9) (cons _qv_10 _qv_11))=(rotate _qv_9 (append _qv_11 (cons _qv_10 nil)))))
    | Assumptions [5]: (forall ((Lst) (Nat) (Lst)) ((append (append _qv_12 (cons _qv_13 nil)) _qv_14)=(append _qv_12 (cons _qv_13 _qv_14))))
    | Assumptions [6]: (forall ((Lst) (Lst) (Lst)) ((append (append _qv_15 _qv_16) _qv_17)=(append _qv_15 (append _qv_16 _qv_17))))
    | Assumptions [7]: (forall ((Lst)) ((rotate (len nil) _qv_7)=_qv_7))
    ====================
  }
  rewritten [0]: ((rotate (len nil) _v_6)=(append _v_6 nil))
  rewritten [7]: (_v_6=(append _v_6 nil))

The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_7))=_qv_7))
	(forall ((Lst) (Lst)) ((append _qv_8 _qv_9)=(append _qv_9 _qv_8)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_10 _qv_11) _qv_12)=(append _qv_10 (append _qv_11 _qv_12))))

  proven by induction: (_v_6=(append _v_6 nil))
  rewriting done
}
Inductive step:  ((rotate (len (cons _t_7 _t_8)) (append (cons _t_7 _t_8) _v_6))=(append _v_6 (cons _t_7 _t_8)))
{
  proven trivially
}

Proved
unsat
