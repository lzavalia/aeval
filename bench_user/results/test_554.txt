
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
	(forall ((Nat) (Nat)) ((plus _qv_1 _qv_2)=(plus _qv_2 _qv_1)))
	(forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_3 _qv_4) _qv_5)=(plus _qv_3 (plus _qv_4 _qv_5))))
	(forall ((Nat) (Nat)) ((mult _qv_6 _qv_7)=(mult _qv_7 _qv_6)))
	(forall ((Nat) (Nat) (Nat)) ((mult (mult _qv_8 _qv_9) _qv_10)=(mult _qv_8 (mult _qv_9 _qv_10))))
	(forall ((Nat)) ((fac (fac _qv_11))=_qv_11))
	(forall ((Nat) (Nat)) ((qfac _qv_12 _qv_13)=(qfac _qv_13 _qv_12)))
	(forall ((Nat) (Nat) (Nat)) ((qfac (qfac _qv_14 _qv_15) _qv_16)=(qfac _qv_14 (qfac _qv_15 _qv_16))))
	(forall ((Nat) (Nat) (Nat)) ((mult _qv_17 (plus _qv_18 _qv_19))=(plus (mult _qv_17 _qv_18) (mult _qv_17 _qv_19))))
	(forall ((Nat) (Nat) (Nat)) ((qfac _qv_20 (plus _qv_21 _qv_22))=(plus (qfac _qv_20 _qv_21) (qfac _qv_20 _qv_22))))
	(forall ((Nat) (Nat) (Nat)) ((plus _qv_23 (mult _qv_24 _qv_25))=(mult (plus _qv_23 _qv_24) (plus _qv_23 _qv_25))))
	(forall ((Nat) (Nat) (Nat)) ((qfac _qv_26 (mult _qv_27 _qv_28))=(mult (qfac _qv_26 _qv_27) (qfac _qv_26 _qv_28))))
	(forall ((Nat) (Nat) (Nat)) ((plus _qv_29 (qfac _qv_30 _qv_31))=(qfac (plus _qv_29 _qv_30) (plus _qv_29 _qv_31))))
	(forall ((Nat) (Nat) (Nat)) ((mult _qv_32 (qfac _qv_33 _qv_34))=(qfac (mult _qv_32 _qv_33) (mult _qv_32 _qv_34))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_35 _qv_36))=(plus (succ _qv_35) (succ _qv_36))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_35 _qv_36))=(plus (succ _qv_36) (succ _qv_35))))
	(forall ((Nat) (Nat)) ((succ (mult _qv_37 _qv_38))=(mult (succ _qv_37) (succ _qv_38))))
	(forall ((Nat) (Nat)) ((succ (mult _qv_37 _qv_38))=(mult (succ _qv_38) (succ _qv_37))))
	(forall ((Nat) (Nat)) ((succ (qfac _qv_39 _qv_40))=(qfac (succ _qv_39) (succ _qv_40))))
	(forall ((Nat) (Nat)) ((succ (qfac _qv_39 _qv_40))=(qfac (succ _qv_40) (succ _qv_39))))
	(forall ((Nat) (Nat)) ((fac (plus _qv_41 _qv_42))=(plus (fac _qv_41) (fac _qv_42))))
	(forall ((Nat) (Nat)) ((fac (plus _qv_41 _qv_42))=(plus (fac _qv_42) (fac _qv_41))))
	(forall ((Nat) (Nat)) ((fac (mult _qv_43 _qv_44))=(mult (fac _qv_43) (fac _qv_44))))
	(forall ((Nat) (Nat)) ((fac (mult _qv_43 _qv_44))=(mult (fac _qv_44) (fac _qv_43))))
	(forall ((Nat) (Nat)) ((fac (qfac _qv_45 _qv_46))=(qfac (fac _qv_45) (fac _qv_46))))
	(forall ((Nat) (Nat)) ((fac (qfac _qv_45 _qv_46))=(qfac (fac _qv_46) (fac _qv_45))))

Simplified goal: (forall ((Nat)) ((fac x)=(qfac x (succ zero))))


Base case:       ((fac zero)=(qfac zero (succ zero)))
{
  proven trivially
}
Inductive step:  ((fac (succ _t_47))=(qfac (succ _t_47) (succ zero)))
{
  proven trivially
}

Proved
unsat
