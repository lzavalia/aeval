
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
	(forall ((Nat)) (0<=(nat-to-int _qv_1)))
	(forall ((Nat) (Nat)) ((plus _qv_2 _qv_3)=(plus _qv_3 _qv_2)))
	(forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_4 _qv_5) _qv_6)=(plus _qv_4 (plus _qv_5 _qv_6))))
	(forall ((Nat)) ((double (double _qv_7))=_qv_7))
	(forall ((Nat)) ((nat-to-int (succ _qv_8))=(nat-to-int _qv_8)))
	(forall ((Nat)) ((nat-to-int (double _qv_9))=(nat-to-int _qv_9)))
	(forall ((Nat) (Nat)) ((succ (plus _qv_10 _qv_11))=(plus (succ _qv_10) (succ _qv_11))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_10 _qv_11))=(plus (succ _qv_11) (succ _qv_10))))
	(forall ((Nat) (Nat)) ((double (plus _qv_12 _qv_13))=(plus (double _qv_12) (double _qv_13))))
	(forall ((Nat) (Nat)) ((double (plus _qv_12 _qv_13))=(plus (double _qv_13) (double _qv_12))))

Simplified goal: (forall ((Nat)) ((double x)=(plus x x)))


Base case:       ((double zero)=(plus zero zero))
{
  proven trivially
}
Inductive step:  ((double (succ _t_14))=(plus (succ _t_14) (succ _t_14)))
{
  proven trivially
}

Proved
unsat
