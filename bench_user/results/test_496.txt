
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Lst) (Lst)) ((lst-intersection _qv_0 _qv_1)=(lst-intersection _qv_1 _qv_0)))
	(forall ((Lst) (Lst) (Lst)) ((lst-intersection (lst-intersection _qv_2 _qv_3) _qv_4)=(lst-intersection _qv_2 (lst-intersection _qv_3 _qv_4))))

Simplified goal: (forall ((Nat) (Lst) (Lst)) (((lst-mem x y)&&(lst-mem x z))->(lst-mem x (lst-intersection y z))))


Base case:       (lst-mem zero (lst-intersection _v_5 _v_6))
{
  {
    ====================
    | Assumptions [0]: (forall ((Nat) (Nat) (Lst)) ((mem _qv_2 (cons _qv_3 _qv_4))=((_qv_2=_qv_3)||(mem _qv_2 _qv_4))))
    | Assumptions [1]: (forall ((Nat) (Lst)) ((lst-mem _qv_5 _qv_6)=(mem _qv_5 _qv_6)))
    | Assumptions [2]: (forall ((Lst)) ((lst-intersection nil _qv_7)=nil))
    | Assumptions [3]: (forall ((Nat) (Lst) (Lst)) ((lst-intersection (cons _qv_8 _qv_9) _qv_10)=ite((lst-mem _qv_8 _qv_10), (cons _qv_8 (lst-intersection _qv_9 _qv_10)), (lst-intersection _qv_9 _qv_10))))
    | Assumptions [4]: (lst-mem zero _v_5)
    | Assumptions [5]: (lst-mem zero _v_6)
    | Assumptions [6]: (forall ((Nat)) (!(mem _qv_1 nil)))
    | Assumptions [7]: (mem zero _v_5)
    | Assumptions [8]: (mem zero _v_6)
    | Assumptions [9]: ((lst-mem zero _v_5)=(mem zero _v_5))
    | Assumptions [10]: ((lst-mem zero _v_6)=(mem zero _v_6))
    ====================
  }
  rewritten [1]: (mem zero (lst-intersection _v_5 _v_6))

The Knowledge Scheme currently contains the following lemmas:
	(forall ((Lst) (Lst)) ((lst-intersection _qv_7 _qv_8)=(lst-intersection _qv_8 _qv_7)))
	(forall ((Lst) (Lst) (Lst)) ((lst-intersection (lst-intersection _qv_9 _qv_10) _qv_11)=(lst-intersection _qv_9 (lst-intersection _qv_10 _qv_11))))
	(forall ((Nat) (Lst) BOOL) ((lst-mem _qv_12 (mem _qv_13 _qv_14))=(mem (lst-mem _qv_12 _qv_13) (lst-mem _qv_12 _qv_14))))
	(forall ((Nat) (Lst) BOOL) ((mem _qv_15 (lst-mem _qv_16 _qv_17))=(lst-mem (mem _qv_15 _qv_16) (mem _qv_15 _qv_17))))


The Knowledge Scheme currently contains the following lemmas:
	(forall ((Lst) (Lst)) ((lst-intersection _qv_22 _qv_23)=(lst-intersection _qv_23 _qv_22)))
	(forall ((Lst) (Lst) (Lst)) ((lst-intersection (lst-intersection _qv_24 _qv_25) _qv_26)=(lst-intersection _qv_24 (lst-intersection _qv_25 _qv_26))))
	(forall ((Nat) (Lst) BOOL) ((lst-mem _qv_27 (mem _qv_28 _qv_29))=(mem (lst-mem _qv_27 _qv_28) (lst-mem _qv_27 _qv_29))))
	(forall ((Nat) (Lst) BOOL) ((mem _qv_30 (lst-mem _qv_31 _qv_32))=(lst-mem (mem _qv_30 _qv_31) (mem _qv_30 _qv_32))))

  proven by induction: (mem zero (lst-intersection _v_5 _v_6))
}
Inductive step:  (lst-mem (succ _t_7) (lst-intersection _v_5 _v_6))
{
  {
    ====================
    | Assumptions [0]: (forall ((Nat) (Nat) (Lst)) ((mem _qv_2 (cons _qv_3 _qv_4))=((_qv_2=_qv_3)||(mem _qv_2 _qv_4))))
    | Assumptions [1]: (forall ((Nat) (Lst)) ((lst-mem _qv_5 _qv_6)=(mem _qv_5 _qv_6)))
    | Assumptions [2]: (forall ((Lst)) ((lst-intersection nil _qv_7)=nil))
    | Assumptions [3]: (forall ((Nat) (Lst) (Lst)) ((lst-intersection (cons _qv_8 _qv_9) _qv_10)=ite((lst-mem _qv_8 _qv_10), (cons _qv_8 (lst-intersection _qv_9 _qv_10)), (lst-intersection _qv_9 _qv_10))))
    | Assumptions [4]: (forall ((Lst) (Lst)) (((lst-mem _t_7 y)&&(lst-mem _t_7 z))->(lst-mem _t_7 (lst-intersection y z))))
    | Assumptions [5]: (lst-mem (succ _t_7) _v_5)
    | Assumptions [6]: (lst-mem (succ _t_7) _v_6)
    | Assumptions [7]: (forall ((Nat)) (!(mem _qv_1 nil)))
    | Assumptions [8]: (mem (succ _t_7) _v_5)
    | Assumptions [9]: (mem (succ _t_7) _v_6)
    ====================
  }
  rewritten [1]: (mem (succ _t_7) (lst-intersection _v_5 _v_6))

The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_8))=_qv_8))
	(forall ((Lst) (Lst)) ((lst-intersection _qv_9 _qv_10)=(lst-intersection _qv_10 _qv_9)))
	(forall ((Lst) (Lst) (Lst)) ((lst-intersection (lst-intersection _qv_11 _qv_12) _qv_13)=(lst-intersection _qv_11 (lst-intersection _qv_12 _qv_13))))
	(forall ((Nat) (Lst) BOOL) ((lst-mem _qv_14 (mem _qv_15 _qv_16))=(mem (lst-mem _qv_14 _qv_15) (lst-mem _qv_14 _qv_16))))
	(forall ((Nat) (Lst) BOOL) ((mem _qv_17 (lst-mem _qv_18 _qv_19))=(lst-mem (mem _qv_17 _qv_18) (mem _qv_17 _qv_19))))

  proven by induction: (mem (succ _t_7) (lst-intersection _v_5 _v_6))
}

Proved
unsat
