
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
	(forall ((Nat)) (0<=(nat-to-int _qv_1)))
	(forall ((Nat) (Nat)) ((less _qv_2 _qv_3)=(less _qv_3 _qv_2)))
	(forall ((Lst)) ((sort (sort _qv_4))=_qv_4))
	(forall ((Nat)) ((nat-to-int (succ _qv_5))=(nat-to-int _qv_5)))
	(forall ((Nat) (Lst) (Lst)) ((insort _qv_6 (cons _qv_7 _qv_8))=(cons (insort _qv_6 _qv_7) (insort _qv_6 _qv_8))))
	(forall ((Nat) (Lst) (Lst)) ((cons _qv_9 (insort _qv_10 _qv_11))=(insort (cons _qv_9 _qv_10) (cons _qv_9 _qv_11))))

Simplified goal: (forall ((Nat) (Lst)) ((count x (insort x y))=(succ (count x y))))


Base case:       ((count zero (insort zero _v_12))=(succ (count zero _v_12)))
{
  {
    ====================
    | Assumptions [0]: ((nat-to-int zero)=0)
    | Assumptions [1]: ((sort nil)=nil)
    | Assumptions [2]: (forall ((Nat)) ((nat-to-int _qv_1)>=0))
    | Assumptions [3]: (forall ((Nat) (Nat)) (((nat-to-int _qv_2)=(nat-to-int _qv_3))->(_qv_2=_qv_3)))
    | Assumptions [4]: (forall ((Nat)) ((nat-to-int (succ _qv_4))=(1+(nat-to-int _qv_4))))
    | Assumptions [5]: (forall ((Nat) (Nat)) ((less (succ _qv_7) (succ _qv_8))=(less _qv_7 _qv_8)))
    | Assumptions [6]: (forall ((Nat) (Nat)) ((less _qv_9 _qv_10)=((nat-to-int _qv_9)<(nat-to-int _qv_10))))
    | Assumptions [7]: (forall ((Nat)) ((count _qv_11 nil)=zero))
    | Assumptions [8]: (forall ((Nat) (Nat) (Lst)) ((count _qv_12 (cons _qv_13 _qv_14))=ite(_qv_12=_qv_13, (succ (count _qv_12 _qv_14)), (count _qv_12 _qv_14))))
    | Assumptions [9]: (forall ((Nat)) ((insort _qv_15 nil)=(cons _qv_15 nil)))
    | Assumptions [10]: (forall ((Nat) (Nat) (Lst)) ((insort _qv_16 (cons _qv_17 _qv_18))=ite((less _qv_16 _qv_17), (cons _qv_16 (cons _qv_17 _qv_18)), (cons _qv_17 (insort _qv_16 _qv_18)))))
    | Assumptions [11]: (forall ((Nat) (Lst)) ((sort (cons _qv_19 _qv_20))=(insort _qv_19 (sort _qv_20))))
    | Assumptions [12]: (forall ((Nat)) (!(less _qv_5 zero)))
    | Assumptions [13]: (forall ((Nat)) (less zero (succ _qv_6)))
    ====================
  }
  rewritten [3]: ((nat-to-int (count zero (insort zero _v_12)))=(nat-to-int (succ (count zero _v_12))))
  rewritten [4]: ((nat-to-int (count zero (insort zero _v_12)))=(1+(nat-to-int (count zero _v_12))))

The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_13))=_qv_13))
	(forall ((Nat)) (0<=(nat-to-int _qv_14)))
	(forall ((Nat) (Nat)) ((less _qv_15 _qv_16)=(less _qv_16 _qv_15)))
	(forall ((Lst)) ((sort (sort _qv_17))=_qv_17))
	(forall ((Nat)) ((nat-to-int (succ _qv_18))=(nat-to-int _qv_18)))
	(forall ((Nat) (Lst) (Lst)) ((insort _qv_19 (cons _qv_20 _qv_21))=(cons (insort _qv_19 _qv_20) (insort _qv_19 _qv_21))))
	(forall ((Nat) (Lst) (Lst)) ((cons _qv_22 (insort _qv_23 _qv_24))=(insort (cons _qv_22 _qv_23) (cons _qv_22 _qv_24))))

  proven by induction: ((nat-to-int (count zero (insort zero _v_12)))=(1+(nat-to-int (count zero _v_12))))
  rewriting done
}
Inductive step:  ((count (succ _t_13) (insort (succ _t_13) _v_12))=(succ (count (succ _t_13) _v_12)))
{
  {
    ====================
    | Assumptions [0]: ((nat-to-int zero)=0)
    | Assumptions [1]: ((sort nil)=nil)
    | Assumptions [2]: (forall ((Nat)) ((nat-to-int _qv_1)>=0))
    | Assumptions [3]: (forall ((Nat) (Nat)) (((nat-to-int _qv_2)=(nat-to-int _qv_3))->(_qv_2=_qv_3)))
    | Assumptions [4]: (forall ((Nat)) ((nat-to-int (succ _qv_4))=(1+(nat-to-int _qv_4))))
    | Assumptions [5]: (forall ((Nat) (Nat)) ((less (succ _qv_7) (succ _qv_8))=(less _qv_7 _qv_8)))
    | Assumptions [6]: (forall ((Nat) (Nat)) ((less _qv_9 _qv_10)=((nat-to-int _qv_9)<(nat-to-int _qv_10))))
    | Assumptions [7]: (forall ((Nat)) ((count _qv_11 nil)=zero))
    | Assumptions [8]: (forall ((Nat) (Nat) (Lst)) ((count _qv_12 (cons _qv_13 _qv_14))=ite(_qv_12=_qv_13, (succ (count _qv_12 _qv_14)), (count _qv_12 _qv_14))))
    | Assumptions [9]: (forall ((Nat)) ((insort _qv_15 nil)=(cons _qv_15 nil)))
    | Assumptions [10]: (forall ((Nat) (Nat) (Lst)) ((insort _qv_16 (cons _qv_17 _qv_18))=ite((less _qv_16 _qv_17), (cons _qv_16 (cons _qv_17 _qv_18)), (cons _qv_17 (insort _qv_16 _qv_18)))))
    | Assumptions [11]: (forall ((Nat) (Lst)) ((sort (cons _qv_19 _qv_20))=(insort _qv_19 (sort _qv_20))))
    | Assumptions [12]: (forall ((Lst)) ((count _t_13 (insort _t_13 y))=(succ (count _t_13 y))))
    | Assumptions [13]: (forall ((Lst)) ((succ (count _t_13 y))=(count _t_13 (insort _t_13 y))))
    | Assumptions [14]: (forall ((Nat)) (!(less _qv_5 zero)))
    | Assumptions [15]: (forall ((Nat)) (less zero (succ _qv_6)))
    ====================
  }
  rewritten [3]: ((nat-to-int (count (succ _t_13) (insort (succ _t_13) _v_12)))=(nat-to-int (succ (count (succ _t_13) _v_12))))
  rewritten [4]: ((nat-to-int (count (succ _t_13) (insort (succ _t_13) _v_12)))=(1+(nat-to-int (count (succ _t_13) _v_12))))

The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_15))=_qv_15))
	(forall ((Nat)) (0<=(nat-to-int _qv_16)))
	(forall ((Nat) (Nat)) ((less _qv_17 _qv_18)=(less _qv_18 _qv_17)))
	(forall ((Lst)) ((sort (sort _qv_19))=_qv_19))
	(forall ((Nat)) ((nat-to-int (succ _qv_20))=(nat-to-int _qv_20)))
	(forall ((Nat) (Lst) (Lst)) ((insort _qv_21 (cons _qv_22 _qv_23))=(cons (insort _qv_21 _qv_22) (insort _qv_21 _qv_23))))
	(forall ((Nat) (Lst) (Lst)) ((cons _qv_24 (insort _qv_25 _qv_26))=(insort (cons _qv_24 _qv_25) (cons _qv_24 _qv_26))))


The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_28))=_qv_28))
	(forall ((Nat)) (0<=(nat-to-int _qv_29)))
	(forall ((Nat) (Nat)) ((less _qv_30 _qv_31)=(less _qv_31 _qv_30)))
	(forall ((Lst)) ((sort (sort _qv_32))=_qv_32))
	(forall ((Nat)) ((nat-to-int (succ _qv_33))=(nat-to-int _qv_33)))
	(forall ((Nat) (Lst) (Lst)) ((insort _qv_34 (cons _qv_35 _qv_36))=(cons (insort _qv_34 _qv_35) (insort _qv_34 _qv_36))))
	(forall ((Nat) (Lst) (Lst)) ((cons _qv_37 (insort _qv_38 _qv_39))=(insort (cons _qv_37 _qv_38) (cons _qv_37 _qv_39))))


The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_30))=_qv_30))
	(forall ((Nat)) (0<=(nat-to-int _qv_31)))
	(forall ((Nat) (Nat)) ((less _qv_32 _qv_33)=(less _qv_33 _qv_32)))
	(forall ((Lst)) ((sort (sort _qv_34))=_qv_34))
	(forall ((Nat)) ((nat-to-int (succ _qv_35))=(nat-to-int _qv_35)))
	(forall ((Nat) (Lst) (Lst)) ((insort _qv_36 (cons _qv_37 _qv_38))=(cons (insort _qv_36 _qv_37) (insort _qv_36 _qv_38))))
	(forall ((Nat) (Lst) (Lst)) ((cons _qv_39 (insort _qv_40 _qv_41))=(insort (cons _qv_39 _qv_40) (cons _qv_39 _qv_41))))

CURRENT SUBGOAL ((nat-to-int (count zero (insort zero _v_42)))=((nat-to-int (count zero _v_42))+1))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_30))=_qv_30))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((nat-to-int (count zero (insort zero _v_42)))=((nat-to-int (count zero _v_42))+1))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_31)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((nat-to-int (count zero (insort zero _v_42)))=((nat-to-int (count zero _v_42))+1))
NOW TESTING (forall ((Nat) (Nat)) ((less _qv_32 _qv_33)=(less _qv_33 _qv_32)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((nat-to-int (count zero (insort zero _v_42)))=((nat-to-int (count zero _v_42))+1))
NOW TESTING (forall ((Lst)) ((sort (sort _qv_34))=_qv_34))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((nat-to-int (count zero (insort zero _v_42)))=((nat-to-int (count zero _v_42))+1))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_35))=(nat-to-int _qv_35)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((nat-to-int (count zero (insort zero _v_42)))=((nat-to-int (count zero _v_42))+1))
NOW TESTING (forall ((Nat) (Lst) (Lst)) ((insort _qv_36 (cons _qv_37 _qv_38))=(cons (insort _qv_36 _qv_37) (insort _qv_36 _qv_38))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((nat-to-int (count zero (insort zero _v_42)))=((nat-to-int (count zero _v_42))+1))
NOW TESTING (forall ((Nat) (Lst) (Lst)) ((cons _qv_39 (insort _qv_40 _qv_41))=(insort (cons _qv_39 _qv_40) (cons _qv_39 _qv_41))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((nat-to-int (count zero (insort zero _v_42)))=((nat-to-int (count zero _v_42))+1))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_30))=_qv_30))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((nat-to-int (count zero (insort zero _v_42)))=((nat-to-int (count zero _v_42))+1))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_31)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((nat-to-int (count zero (insort zero _v_42)))=((nat-to-int (count zero _v_42))+1))
NOW TESTING (forall ((Nat) (Nat)) ((less _qv_32 _qv_33)=(less _qv_33 _qv_32)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((nat-to-int (count zero (insort zero _v_42)))=((nat-to-int (count zero _v_42))+1))
NOW TESTING (forall ((Lst)) ((sort (sort _qv_34))=_qv_34))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((nat-to-int (count zero (insort zero _v_42)))=((nat-to-int (count zero _v_42))+1))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_35))=(nat-to-int _qv_35)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((nat-to-int (count zero (insort zero _v_42)))=((nat-to-int (count zero _v_42))+1))
NOW TESTING (forall ((Nat) (Lst) (Lst)) ((insort _qv_36 (cons _qv_37 _qv_38))=(cons (insort _qv_36 _qv_37) (insort _qv_36 _qv_38))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((nat-to-int (count zero (insort zero _v_42)))=((nat-to-int (count zero _v_42))+1))
NOW TESTING (forall ((Nat) (Lst) (Lst)) ((cons _qv_39 (insort _qv_40 _qv_41))=(insort (cons _qv_39 _qv_40) (cons _qv_39 _qv_41))))
USE ASSUMPTION FAILED

  proven by induction: ((nat-to-int (count _w_14 (insort _w_14 _v_12)))=(1+(nat-to-int (count _w_14 _v_12))))
  rewriting done
}

Proved
unsat
