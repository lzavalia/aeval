
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
	(forall ((Nat)) (0<=(nat-to-int _qv_1)))
	(forall ((Nat) (Nat)) ((plus _qv_2 _qv_3)=(plus _qv_3 _qv_2)))
	(forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_4 _qv_5) _qv_6)=(plus _qv_4 (plus _qv_5 _qv_6))))
	(forall ((Nat) (Nat)) ((mult _qv_7 _qv_8)=(mult _qv_8 _qv_7)))
	(forall ((Nat) (Nat) (Nat)) ((mult (mult _qv_9 _qv_10) _qv_11)=(mult _qv_9 (mult _qv_10 _qv_11))))
	(forall ((Nat)) ((fac (fac _qv_12))=_qv_12))
	(forall ((Nat) (Nat)) ((qfac _qv_13 _qv_14)=(qfac _qv_14 _qv_13)))
	(forall ((Nat) (Nat) (Nat)) ((qfac (qfac _qv_15 _qv_16) _qv_17)=(qfac _qv_15 (qfac _qv_16 _qv_17))))
	(forall ((Nat)) ((nat-to-int (succ _qv_18))=(nat-to-int _qv_18)))
	(forall ((Nat)) ((nat-to-int (fac _qv_19))=(nat-to-int _qv_19)))
	(forall ((Nat) (Nat) (Nat)) ((mult _qv_20 (plus _qv_21 _qv_22))=(plus (mult _qv_20 _qv_21) (mult _qv_20 _qv_22))))
	(forall ((Nat) (Nat) (Nat)) ((qfac _qv_23 (plus _qv_24 _qv_25))=(plus (qfac _qv_23 _qv_24) (qfac _qv_23 _qv_25))))
	(forall ((Nat) (Nat) (Nat)) ((plus _qv_26 (mult _qv_27 _qv_28))=(mult (plus _qv_26 _qv_27) (plus _qv_26 _qv_28))))
	(forall ((Nat) (Nat) (Nat)) ((qfac _qv_29 (mult _qv_30 _qv_31))=(mult (qfac _qv_29 _qv_30) (qfac _qv_29 _qv_31))))
	(forall ((Nat) (Nat) (Nat)) ((plus _qv_32 (qfac _qv_33 _qv_34))=(qfac (plus _qv_32 _qv_33) (plus _qv_32 _qv_34))))
	(forall ((Nat) (Nat) (Nat)) ((mult _qv_35 (qfac _qv_36 _qv_37))=(qfac (mult _qv_35 _qv_36) (mult _qv_35 _qv_37))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_38 _qv_39))=(plus (succ _qv_38) (succ _qv_39))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_38 _qv_39))=(plus (succ _qv_39) (succ _qv_38))))
	(forall ((Nat) (Nat)) ((succ (mult _qv_40 _qv_41))=(mult (succ _qv_40) (succ _qv_41))))
	(forall ((Nat) (Nat)) ((succ (mult _qv_40 _qv_41))=(mult (succ _qv_41) (succ _qv_40))))
	(forall ((Nat) (Nat)) ((succ (qfac _qv_42 _qv_43))=(qfac (succ _qv_42) (succ _qv_43))))
	(forall ((Nat) (Nat)) ((succ (qfac _qv_42 _qv_43))=(qfac (succ _qv_43) (succ _qv_42))))
	(forall ((Nat) (Nat)) ((fac (plus _qv_44 _qv_45))=(plus (fac _qv_44) (fac _qv_45))))
	(forall ((Nat) (Nat)) ((fac (plus _qv_44 _qv_45))=(plus (fac _qv_45) (fac _qv_44))))
	(forall ((Nat) (Nat)) ((fac (mult _qv_46 _qv_47))=(mult (fac _qv_46) (fac _qv_47))))
	(forall ((Nat) (Nat)) ((fac (mult _qv_46 _qv_47))=(mult (fac _qv_47) (fac _qv_46))))
	(forall ((Nat) (Nat)) ((fac (qfac _qv_48 _qv_49))=(qfac (fac _qv_48) (fac _qv_49))))
	(forall ((Nat) (Nat)) ((fac (qfac _qv_48 _qv_49))=(qfac (fac _qv_49) (fac _qv_48))))

Simplified goal: (forall ((Nat)) ((fac x)=(qfac x (succ zero))))


Base case:       ((fac zero)=(qfac zero (succ zero)))
{
  proven trivially
}
Inductive step:  ((fac (succ _t_50))=(qfac (succ _t_50) (succ zero)))
{
  proven trivially
}

Proved
unsat
