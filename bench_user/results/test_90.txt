
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
	(forall ((Nat)) (0<=(nat-to-int _qv_1)))
	(forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
	(forall ((Lst)) ((filter (filter _qv_7))=_qv_7))
	(forall ((Nat)) ((nat-to-int (succ _qv_8))=(nat-to-int _qv_8)))
	(forall ((Lst) (Lst)) ((filter (append _qv_9 _qv_10))=(append (filter _qv_9) (filter _qv_10))))
	(forall ((Lst) (Lst)) ((filter (append _qv_9 _qv_10))=(append (filter _qv_10) (filter _qv_9))))

Simplified goal: (forall ((Lst) (Lst)) ((filter (append xs ys))=(append (filter xs) (filter ys))))


Base case:       ((filter (append nil _v_11))=(append (filter nil) (filter _v_11)))
{
  proven trivially
}
Inductive step:  ((filter (append (cons _t_12 _t_13) _v_11))=(append (filter (cons _t_12 _t_13)) (filter _v_11)))
{
  proven trivially
}

Proved
unsat
