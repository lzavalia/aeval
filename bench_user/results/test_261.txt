
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
	(forall ((Nat)) (0<=(nat-to-int _qv_1)))
	(forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
	(forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
	(forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))

Simplified goal: (forall ((Lst) (Lst)) ((len (append x y))=(len (append y x))))


Base case:       ((len (append nil _v_9))=(len (append _v_9 nil)))
{
  {
    ====================
    | Assumptions [0]: (forall ((Nat)) ((nat-to-int _qv_1)>=0))
    | Assumptions [1]: (forall ((Nat) (Nat)) (((nat-to-int _qv_2)=(nat-to-int _qv_3))->(_qv_2=_qv_3)))
    | Assumptions [2]: (forall ((Nat)) ((nat-to-int (succ _qv_4))=(1+(nat-to-int _qv_4))))
    | Assumptions [3]: (forall ((Lst)) ((append nil _qv_5)=_qv_5))
    | Assumptions [4]: (forall ((Nat) (Lst) (Lst)) ((append (cons _qv_6 _qv_7) _qv_8)=(cons _qv_6 (append _qv_7 _qv_8))))
    | Assumptions [5]: (forall ((Nat) (Lst)) ((len (cons _qv_9 _qv_10))=(succ (len _qv_10))))
    | Assumptions [6]: (forall ((Lst) (Nat) (Lst)) ((len (append _qv_11 (cons _qv_12 _qv_13)))=(succ (len (append _qv_11 _qv_13)))))
    | Assumptions [7]: ((nat-to-int (len nil))=0)
    ====================
  }
  rewritten [1]: ((nat-to-int (len (append nil _v_9)))=(nat-to-int (len (append _v_9 nil))))
  rewritten [3]: ((nat-to-int (len _v_9))=(nat-to-int (len (append _v_9 nil))))

The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_10))=_qv_10))
	(forall ((Nat)) (0<=(nat-to-int _qv_11)))
	(forall ((Lst) (Lst)) ((append _qv_12 _qv_13)=(append _qv_13 _qv_12)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_14 _qv_15) _qv_16)=(append _qv_14 (append _qv_15 _qv_16))))
	(forall ((Nat)) ((nat-to-int (succ _qv_17))=(nat-to-int _qv_17)))
	(forall ((Lst)) ((nat-to-int (len _qv_18))=(nat-to-int _qv_18)))

  proven by induction: ((nat-to-int (len _v_9))=(nat-to-int (len (append _v_9 nil))))
  rewriting done
}
Inductive step:  ((len (append (cons _t_10 _t_11) _v_9))=(len (append _v_9 (cons _t_10 _t_11))))
{
  proven trivially
}

Proved
unsat
