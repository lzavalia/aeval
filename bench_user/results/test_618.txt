
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat) (Nat)) ((plus _qv_0 _qv_1)=(plus _qv_1 _qv_0)))
	(forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_2 _qv_3) _qv_4)=(plus _qv_2 (plus _qv_3 _qv_4))))
	(forall ((Lst) (Lst)) ((append _qv_5 _qv_6)=(append _qv_6 _qv_5)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_7 _qv_8) _qv_9)=(append _qv_7 (append _qv_8 _qv_9))))
	(forall ((Lst)) ((rev (rev _qv_10))=_qv_10))
	(forall ((Lst) (Lst)) ((qreva _qv_11 _qv_12)=(qreva _qv_12 _qv_11)))
	(forall ((Lst) (Lst) (Lst)) ((qreva (qreva _qv_13 _qv_14) _qv_15)=(qreva _qv_13 (qreva _qv_14 _qv_15))))
	(forall ((Lst) (Lst) (Lst)) ((qreva _qv_16 (append _qv_17 _qv_18))=(append (qreva _qv_16 _qv_17) (qreva _qv_16 _qv_18))))
	(forall ((Lst) (Lst) (Lst)) ((append _qv_19 (qreva _qv_20 _qv_21))=(qreva (append _qv_19 _qv_20) (append _qv_19 _qv_21))))
	(forall ((Lst) (Lst)) ((rev (append _qv_22 _qv_23))=(append (rev _qv_22) (rev _qv_23))))
	(forall ((Lst) (Lst)) ((rev (append _qv_22 _qv_23))=(append (rev _qv_23) (rev _qv_22))))
	(forall ((Lst) (Lst)) ((rev (qreva _qv_24 _qv_25))=(qreva (rev _qv_24) (rev _qv_25))))
	(forall ((Lst) (Lst)) ((rev (qreva _qv_24 _qv_25))=(qreva (rev _qv_25) (rev _qv_24))))

Simplified goal: (forall ((Lst) (Lst)) ((len (qreva x y))=(plus (len x) (len y))))


Base case:       ((len (qreva nil _v_26))=(plus (len nil) (len _v_26)))
{
  proven trivially
}
Inductive step:  ((len (qreva (cons _t_27 _t_28) _v_26))=(plus (len (cons _t_27 _t_28)) (len _v_26)))
{
  {
    ====================
    | Assumptions [0]: ((rev nil)=nil)
    | Assumptions [1]: (forall ((Nat) (Nat)) ((plus (succ _qv_2) _qv_3)=(succ (plus _qv_2 _qv_3))))
    | Assumptions [2]: (forall ((Lst)) ((append nil _qv_4)=_qv_4))
    | Assumptions [3]: (forall ((Nat) (Lst) (Lst)) ((append (cons _qv_5 _qv_6) _qv_7)=(cons _qv_5 (append _qv_6 _qv_7))))
    | Assumptions [4]: (forall ((Nat) (Lst)) ((len (cons _qv_8 _qv_9))=(succ (len _qv_9))))
    | Assumptions [5]: (forall ((Nat) (Lst)) ((rev (cons _qv_10 _qv_11))=(append (rev _qv_11) (cons _qv_10 nil))))
    | Assumptions [6]: (forall ((Lst)) ((qreva nil _qv_12)=_qv_12))
    | Assumptions [7]: (forall ((Lst) (Lst) (Nat)) ((qreva (cons _qv_15 _qv_13) _qv_14)=(qreva _qv_13 (cons _qv_15 _qv_14))))
    | Assumptions [8]: (forall ((Lst)) ((len (qreva _t_28 y))=(plus (len _t_28) (len y))))
    | Assumptions [9]: (forall ((Lst)) ((plus (len _t_28) (len y))=(len (qreva _t_28 y))))
    | Assumptions [10]: (forall ((Nat)) ((plus (len nil) _qv_1)=_qv_1))
    ====================
  }
  rewritten [4]: ((len (qreva (cons _t_27 _t_28) _v_26))=(plus (succ (len _t_28)) (len _v_26)))
  rewritten [1]: ((len (qreva (cons _t_27 _t_28) _v_26))=(succ (plus (len _t_28) (len _v_26))))
  rewritten [7]: ((len (qreva _t_28 (cons _t_27 _v_26)))=(succ (plus (len _t_28) (len _v_26))))
  rewritten [8]: ((plus (len _t_28) (len (cons _t_27 _v_26)))=(succ (plus (len _t_28) (len _v_26))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((len (qreva _t_28 (cons _t_27 _v_26)))=(succ (plus (len _t_28) (len _v_26))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_0 _qv_1)=(plus _qv_1 _qv_0)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((len (qreva _t_28 (cons _t_27 _v_26)))=(succ (plus (len _t_28) (len _v_26))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_2 _qv_3) _qv_4)=(plus _qv_2 (plus _qv_3 _qv_4))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((len (qreva _t_28 (cons _t_27 _v_26)))=(succ (plus (len _t_28) (len _v_26))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_5 _qv_6)=(append _qv_6 _qv_5)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((len (qreva _t_28 (cons _t_27 _v_26)))=(succ (plus (len _t_28) (len _v_26))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_7 _qv_8) _qv_9)=(append _qv_7 (append _qv_8 _qv_9))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((len (qreva _t_28 (cons _t_27 _v_26)))=(succ (plus (len _t_28) (len _v_26))))
NOW TESTING (forall ((Lst)) ((rev (rev _qv_10))=_qv_10))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((len (qreva _t_28 (cons _t_27 _v_26)))=(succ (plus (len _t_28) (len _v_26))))
NOW TESTING (forall ((Lst) (Lst)) ((qreva _qv_11 _qv_12)=(qreva _qv_12 _qv_11)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((len (qreva _t_28 (cons _t_27 _v_26)))=(succ (plus (len _t_28) (len _v_26))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((qreva (qreva _qv_13 _qv_14) _qv_15)=(qreva _qv_13 (qreva _qv_14 _qv_15))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((len (qreva _t_28 (cons _t_27 _v_26)))=(succ (plus (len _t_28) (len _v_26))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((qreva _qv_16 (append _qv_17 _qv_18))=(append (qreva _qv_16 _qv_17) (qreva _qv_16 _qv_18))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((len (qreva _t_28 (cons _t_27 _v_26)))=(succ (plus (len _t_28) (len _v_26))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append _qv_19 (qreva _qv_20 _qv_21))=(qreva (append _qv_19 _qv_20) (append _qv_19 _qv_21))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((len (qreva _t_28 (cons _t_27 _v_26)))=(succ (plus (len _t_28) (len _v_26))))
NOW TESTING (forall ((Lst) (Lst)) ((rev (append _qv_22 _qv_23))=(append (rev _qv_22) (rev _qv_23))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((len (qreva _t_28 (cons _t_27 _v_26)))=(succ (plus (len _t_28) (len _v_26))))
NOW TESTING (forall ((Lst) (Lst)) ((rev (append _qv_22 _qv_23))=(append (rev _qv_23) (rev _qv_22))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((len (qreva _t_28 (cons _t_27 _v_26)))=(succ (plus (len _t_28) (len _v_26))))
NOW TESTING (forall ((Lst) (Lst)) ((rev (qreva _qv_24 _qv_25))=(qreva (rev _qv_24) (rev _qv_25))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((len (qreva _t_28 (cons _t_27 _v_26)))=(succ (plus (len _t_28) (len _v_26))))
NOW TESTING (forall ((Lst) (Lst)) ((rev (qreva _qv_24 _qv_25))=(qreva (rev _qv_25) (rev _qv_24))))
USE ASSUMPTION FAILED

  backtrack to: ((len (qreva _t_28 (cons _t_27 _v_26)))=(succ (plus (len _t_28) (len _v_26))))
  rewritten [9]: ((len (qreva _t_28 (cons _t_27 _v_26)))=(succ (len (qreva _t_28 _v_26))))
  rewritten [8]: ((plus (len _t_28) (len (cons _t_27 _v_26)))=(succ (len (qreva _t_28 _v_26))))
  rewritten [4]: ((plus (len _t_28) (succ (len _v_26)))=(succ (len (qreva _t_28 _v_26))))
  rewritten [8]: ((plus (len _t_28) (succ (len _v_26)))=(succ (plus (len _t_28) (len _v_26))))
  Maximum recursion depth reached

The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat) (Nat)) ((plus _qv_31 _qv_32)=(plus _qv_32 _qv_31)))
	(forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_33 _qv_34) _qv_35)=(plus _qv_33 (plus _qv_34 _qv_35))))
	(forall ((Lst) (Lst)) ((append _qv_36 _qv_37)=(append _qv_37 _qv_36)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_38 _qv_39) _qv_40)=(append _qv_38 (append _qv_39 _qv_40))))
	(forall ((Lst)) ((rev (rev _qv_41))=_qv_41))
	(forall ((Lst) (Lst)) ((qreva _qv_42 _qv_43)=(qreva _qv_43 _qv_42)))
	(forall ((Lst) (Lst) (Lst)) ((qreva (qreva _qv_44 _qv_45) _qv_46)=(qreva _qv_44 (qreva _qv_45 _qv_46))))
	(forall ((Lst) (Lst) (Lst)) ((qreva _qv_47 (append _qv_48 _qv_49))=(append (qreva _qv_47 _qv_48) (qreva _qv_47 _qv_49))))
	(forall ((Lst) (Lst) (Lst)) ((append _qv_50 (qreva _qv_51 _qv_52))=(qreva (append _qv_50 _qv_51) (append _qv_50 _qv_52))))
	(forall ((Lst) (Lst)) ((rev (append _qv_53 _qv_54))=(append (rev _qv_53) (rev _qv_54))))
	(forall ((Lst) (Lst)) ((rev (append _qv_53 _qv_54))=(append (rev _qv_54) (rev _qv_53))))
	(forall ((Lst) (Lst)) ((rev (qreva _qv_55 _qv_56))=(qreva (rev _qv_55) (rev _qv_56))))
	(forall ((Lst) (Lst)) ((rev (qreva _qv_55 _qv_56))=(qreva (rev _qv_56) (rev _qv_55))))

  proven by induction: ((plus (len _t_28) (succ _w_30))=(succ (plus (len _t_28) _w_30)))
  rewriting done
  rewriting done
  rewriting done
  rewriting done
  rewriting done
  rewriting done
}

Proved
unsat
