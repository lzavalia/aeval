
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
	(forall ((Nat)) (0<=(nat-to-int _qv_1)))
	(forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
	(forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
	(forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))

Simplified goal: (forall ((Lst)) ((rotate (len x) x)=x))


Base case:       ((rotate (len nil) nil)=nil)
{
  proven trivially
}
Inductive step:  ((rotate (len (cons _t_9 _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
{
  {
    ====================
    | Assumptions [0]: (forall ((Nat)) ((nat-to-int _qv_1)>=0))
    | Assumptions [1]: (forall ((Nat) (Nat)) (((nat-to-int _qv_2)=(nat-to-int _qv_3))->(_qv_2=_qv_3)))
    | Assumptions [2]: (forall ((Nat)) ((nat-to-int (succ _qv_4))=(1+(nat-to-int _qv_4))))
    | Assumptions [3]: (forall ((Lst)) ((append nil _qv_5)=_qv_5))
    | Assumptions [4]: (forall ((Nat) (Lst) (Lst)) ((append (cons _qv_6 _qv_7) _qv_8)=(cons _qv_6 (append _qv_7 _qv_8))))
    | Assumptions [5]: (forall ((Nat) (Lst)) ((len (cons _qv_9 _qv_10))=(succ (len _qv_10))))
    | Assumptions [6]: (forall ((Nat)) ((rotate (succ _qv_12) nil)=nil))
    | Assumptions [7]: (forall ((Nat) (Nat) (Lst)) ((rotate (succ _qv_13) (cons _qv_14 _qv_15))=(rotate _qv_13 (append _qv_15 (cons _qv_14 nil)))))
    | Assumptions [8]: ((rotate (len _t_10) _t_10)=_t_10)
    | Assumptions [9]: (_t_10=(rotate (len _t_10) _t_10))
    | Assumptions [10]: ((nat-to-int (len nil))=0)
    | Assumptions [11]: (forall ((Lst)) ((rotate (len nil) _qv_11)=_qv_11))
    | Assumptions [12]: ((rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))=(rotate (len _t_10) _t_10))
    | Assumptions [13]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))=(rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))
    | Assumptions [14]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
    ====================
  }
  rewritten [5]: ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
  rewritten [7]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
  rewritten [9]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
  rewritten [9]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
  rewritten [9]: ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [7]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [7]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
  rewritten [7]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
  rewritten [9]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
  rewritten [9]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
  rewritten [9]: ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [7]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [7]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (cons _t_9 _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_9 _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_9 _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_9 _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_9 _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_9 _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (cons _t_9 _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
  rewritten [9]: ((rotate (len (cons _t_9 (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [5]: ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [7]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (append (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (append (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (append (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (append (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
  rewritten [7]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
  rewritten [9]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
  rewritten [9]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
  rewritten [7]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
  rewritten [9]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
  rewritten [9]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [8]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (append (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [12]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [8]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (append (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [12]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (append (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))) (cons _t_9 (rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))))=(cons _t_9 (rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (append (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))) (cons _t_9 (rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))))=(cons _t_9 (rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [8]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (append (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [12]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [8]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (append (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [12]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (append (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))) (cons _t_9 (rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))))=(cons _t_9 (rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (append (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))) (cons _t_9 (rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))))=(cons _t_9 (rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [7]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (append (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (append (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (append (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (append (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
  rewritten [7]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
  rewritten [9]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
  rewritten [9]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
  rewritten [7]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
  rewritten [9]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
  rewritten [9]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [8]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (append (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [12]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [8]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (append (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [12]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (append (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))) (cons _t_9 (rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))))=(cons _t_9 (rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (append (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))) (cons _t_9 (rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))))=(cons _t_9 (rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [8]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (append (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [12]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [8]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (append (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [12]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (append (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))) (cons _t_9 (rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))))=(cons _t_9 (rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (append (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))) (cons _t_9 (rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))))=(cons _t_9 (rotate (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (len (cons _t_9 (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_9 (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_9 (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_9 (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_9 (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_9 (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (cons _t_9 (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len (cons _t_9 _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
  rewritten [5]: ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
  rewritten [7]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
  rewritten [9]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
  rewritten [9]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
  rewritten [9]: ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [7]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [7]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
  rewritten [7]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
  rewritten [9]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
  rewritten [9]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
  rewritten [9]: ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [7]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [7]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (cons _t_9 _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_9 _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_9 _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_9 _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_9 _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_9 _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (cons _t_9 _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
  rewritten [5]: ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
  rewritten [7]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
  rewritten [9]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
  rewritten [9]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
  rewritten [9]: ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [7]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [7]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
  rewritten [7]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
  rewritten [9]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
  rewritten [9]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
  rewritten [9]: ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [7]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [7]: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [8]: ((rotate (len _t_10) (append _t_10 (cons _t_9 nil)))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_10) _t_10)) (append (rotate (len _t_10) _t_10) (cons _t_9 nil)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (append (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)) (cons _t_9 nil)))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
  rewritten [9]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))) (cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))=(cons _t_9 (rotate (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))) (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10)))) (cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))=(cons _t_9 (rotate (len (rotate (len _t_10) _t_10)) (rotate (len _t_10) _t_10))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_10) _t_10))) (cons _t_9 (rotate (len _t_10) _t_10)))=(cons _t_9 (rotate (len _t_10) _t_10)))
CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
CURRENT SUBGOAL ((rotate (len (cons _t_9 _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_9 _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_9 _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_9 _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_9 _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_9 _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (cons _t_9 _t_10)) (cons _t_9 _t_10))=(cons _t_9 _t_10))

The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_1004))=_qv_1004))
	(forall ((Nat)) (0<=(nat-to-int _qv_1005)))
	(forall ((Lst) (Lst)) ((append _qv_1006 _qv_1007)=(append _qv_1007 _qv_1006)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_1008 _qv_1009) _qv_1010)=(append _qv_1008 (append _qv_1009 _qv_1010))))
	(forall ((Nat)) ((nat-to-int (succ _qv_1011))=(nat-to-int _qv_1011)))
	(forall ((Lst)) ((nat-to-int (len _qv_1012))=(nat-to-int _qv_1012)))

