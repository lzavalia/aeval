
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
	(forall ((Nat)) (0<=(nat-to-int _qv_1)))
	(forall ((Nat) (Nat)) ((plus _qv_2 _qv_3)=(plus _qv_3 _qv_2)))
	(forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_4 _qv_5) _qv_6)=(plus _qv_4 (plus _qv_5 _qv_6))))
	(forall ((Nat) (Nat)) ((minus _qv_7 _qv_8)=(minus _qv_8 _qv_7)))
	(forall ((Nat) (Nat) (Nat)) ((minus (minus _qv_9 _qv_10) _qv_11)=(minus _qv_9 (minus _qv_10 _qv_11))))
	(forall ((Nat)) ((nat-to-int (succ _qv_12))=(nat-to-int _qv_12)))
	(forall ((Nat) (Nat) (Nat)) ((minus _qv_13 (plus _qv_14 _qv_15))=(plus (minus _qv_13 _qv_14) (minus _qv_13 _qv_15))))
	(forall ((Nat) (Nat) (Nat)) ((plus _qv_16 (minus _qv_17 _qv_18))=(minus (plus _qv_16 _qv_17) (plus _qv_16 _qv_18))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_19 _qv_20))=(plus (succ _qv_19) (succ _qv_20))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_19 _qv_20))=(plus (succ _qv_20) (succ _qv_19))))
	(forall ((Nat) (Nat)) ((succ (minus _qv_21 _qv_22))=(minus (succ _qv_21) (succ _qv_22))))
	(forall ((Nat) (Nat)) ((succ (minus _qv_21 _qv_22))=(minus (succ _qv_22) (succ _qv_21))))

Simplified goal: (forall ((Nat) (Nat)) ((minus (plus m n) n)=m))


Base case:       ((minus (plus zero _v_23) _v_23)=zero)
{
  proven trivially
}
Inductive step:  ((minus (plus (succ _t_24) _v_23) _v_23)=(succ _t_24))
{
  proven trivially
}

Proved
unsat
