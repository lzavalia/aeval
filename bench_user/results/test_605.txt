
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
	(forall ((Nat) (Nat)) ((plus _qv_1 _qv_2)=(plus _qv_2 _qv_1)))
	(forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_3 _qv_4) _qv_5)=(plus _qv_3 (plus _qv_4 _qv_5))))
	(forall ((Lst) (Lst)) ((append _qv_6 _qv_7)=(append _qv_7 _qv_6)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_8 _qv_9) _qv_10)=(append _qv_8 (append _qv_9 _qv_10))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))

Simplified goal: (forall ((Lst) (Lst)) ((even (len (append x y)))=(even (plus (len x) (len y)))))


Base case:       ((even (len (append nil _v_13)))=(even (plus (len nil) (len _v_13))))
{
  proven trivially
}
Inductive step:  ((even (len (append (cons _t_14 _t_15) _v_13)))=(even (plus (len (cons _t_14 _t_15)) (len _v_13))))
{
  proven trivially
}

Proved
unsat
