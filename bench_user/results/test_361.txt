
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
	(forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
	(forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
	(forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))

Simplified goal: (forall ((Nat) (Nat) (Lst)) ((rotate (succ n) (rotate m x))=(rotate (succ m) (rotate n x))))


Base case:       ((rotate (succ zero) (rotate _v_13 _v_14))=(rotate (succ _v_13) (rotate zero _v_14)))
{
  {
    ====================
    | Assumptions [0]: (forall ((Nat) (Lst)) ((len (cons _qv_1 _qv_2))=(succ (len _qv_2))))
    | Assumptions [1]: (forall ((Lst)) ((append nil _qv_3)=_qv_3))
    | Assumptions [2]: (forall ((Nat) (Lst) (Lst)) ((append (cons _qv_4 _qv_5) _qv_6)=(cons _qv_4 (append _qv_5 _qv_6))))
    | Assumptions [3]: (forall ((Nat)) ((rotate (succ _qv_8) nil)=nil))
    | Assumptions [4]: (forall ((Nat) (Nat) (Lst)) ((rotate (succ _qv_9) (cons _qv_10 _qv_11))=(rotate _qv_9 (append _qv_11 (cons _qv_10 nil)))))
    | Assumptions [5]: (forall ((Nat) (Nat)) ((plus (succ _qv_13) _qv_14)=(succ (plus _qv_13 _qv_14))))
    | Assumptions [6]: (forall ((Lst)) ((rotate (len nil) _qv_7)=_qv_7))
    | Assumptions [7]: (forall ((Nat)) ((plus (len nil) _qv_12)=_qv_12))
    ====================
  }
  rewritten [6]: ((rotate (succ (len nil)) (rotate _v_13 _v_14))=(rotate (succ _v_13) _v_14))

The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_15))=_qv_15))
	(forall ((Lst) (Lst)) ((append _qv_16 _qv_17)=(append _qv_17 _qv_16)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_18 _qv_19) _qv_20)=(append _qv_18 (append _qv_19 _qv_20))))
	(forall ((Nat) (Nat)) ((plus _qv_21 _qv_22)=(plus _qv_22 _qv_21)))
	(forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_23 _qv_24) _qv_25)=(plus _qv_23 (plus _qv_24 _qv_25))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_26 _qv_27))=(plus (succ _qv_26) (succ _qv_27))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_26 _qv_27))=(plus (succ _qv_27) (succ _qv_26))))


The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_30))=_qv_30))
	(forall ((Lst) (Lst)) ((append _qv_31 _qv_32)=(append _qv_32 _qv_31)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_33 _qv_34) _qv_35)=(append _qv_33 (append _qv_34 _qv_35))))
	(forall ((Nat) (Nat)) ((plus _qv_36 _qv_37)=(plus _qv_37 _qv_36)))
	(forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_38 _qv_39) _qv_40)=(plus _qv_38 (plus _qv_39 _qv_40))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_41 _qv_42))=(plus (succ _qv_41) (succ _qv_42))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_41 _qv_42))=(plus (succ _qv_42) (succ _qv_41))))

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_29 nil))=(rotate (succ _v_29) nil))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_15))=_qv_15))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_29 nil))=(rotate (succ _v_29) nil))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_16 _qv_17)=(append _qv_17 _qv_16)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_29 nil))=(rotate (succ _v_29) nil))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_18 _qv_19) _qv_20)=(append _qv_18 (append _qv_19 _qv_20))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_29 nil))=(rotate (succ _v_29) nil))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_21 _qv_22)=(plus _qv_22 _qv_21)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_29 nil))=(rotate (succ _v_29) nil))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_23 _qv_24) _qv_25)=(plus _qv_23 (plus _qv_24 _qv_25))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_29 nil))=(rotate (succ _v_29) nil))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_26 _qv_27))=(plus (succ _qv_26) (succ _qv_27))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_29 nil))=(rotate (succ _v_29) nil))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_26 _qv_27))=(plus (succ _qv_27) (succ _qv_26))))
USE ASSUMPTION FAILED


The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_30))=_qv_30))
	(forall ((Lst) (Lst)) ((append _qv_31 _qv_32)=(append _qv_32 _qv_31)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_33 _qv_34) _qv_35)=(append _qv_33 (append _qv_34 _qv_35))))
	(forall ((Nat) (Nat)) ((plus _qv_36 _qv_37)=(plus _qv_37 _qv_36)))
	(forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_38 _qv_39) _qv_40)=(plus _qv_38 (plus _qv_39 _qv_40))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_41 _qv_42))=(plus (succ _qv_41) (succ _qv_42))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_41 _qv_42))=(plus (succ _qv_42) (succ _qv_41))))

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_29 nil))=(rotate (succ _v_29) nil))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_15))=_qv_15))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_29 nil))=(rotate (succ _v_29) nil))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_16 _qv_17)=(append _qv_17 _qv_16)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_29 nil))=(rotate (succ _v_29) nil))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_18 _qv_19) _qv_20)=(append _qv_18 (append _qv_19 _qv_20))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_29 nil))=(rotate (succ _v_29) nil))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_21 _qv_22)=(plus _qv_22 _qv_21)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_29 nil))=(rotate (succ _v_29) nil))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_23 _qv_24) _qv_25)=(plus _qv_23 (plus _qv_24 _qv_25))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_29 nil))=(rotate (succ _v_29) nil))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_26 _qv_27))=(plus (succ _qv_26) (succ _qv_27))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_29 nil))=(rotate (succ _v_29) nil))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_26 _qv_27))=(plus (succ _qv_27) (succ _qv_26))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_13 _v_14))=(rotate (succ _v_13) (rotate (len nil) _v_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_13 _v_14))=(rotate (succ _v_13) (rotate (len nil) _v_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_13 _v_14))=(rotate (succ _v_13) (rotate (len nil) _v_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_13 _v_14))=(rotate (succ _v_13) (rotate (len nil) _v_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_13 _v_14))=(rotate (succ _v_13) (rotate (len nil) _v_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_13 _v_14))=(rotate (succ _v_13) (rotate (len nil) _v_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_13 _v_14))=(rotate (succ _v_13) (rotate (len nil) _v_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len nil)) (rotate _v_13 _v_14))=(rotate (succ _v_13) (rotate (len nil) _v_14)))
  rewritten [6]: ((rotate (succ (len nil)) (rotate _v_13 _v_14))=(rotate (succ _v_13) _v_14))

The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_15))=_qv_15))
	(forall ((Lst) (Lst)) ((append _qv_16 _qv_17)=(append _qv_17 _qv_16)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_18 _qv_19) _qv_20)=(append _qv_18 (append _qv_19 _qv_20))))
	(forall ((Nat) (Nat)) ((plus _qv_21 _qv_22)=(plus _qv_22 _qv_21)))
	(forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_23 _qv_24) _qv_25)=(plus _qv_23 (plus _qv_24 _qv_25))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_26 _qv_27))=(plus (succ _qv_26) (succ _qv_27))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_26 _qv_27))=(plus (succ _qv_27) (succ _qv_26))))


The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_30))=_qv_30))
	(forall ((Lst) (Lst)) ((append _qv_31 _qv_32)=(append _qv_32 _qv_31)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_33 _qv_34) _qv_35)=(append _qv_33 (append _qv_34 _qv_35))))
	(forall ((Nat) (Nat)) ((plus _qv_36 _qv_37)=(plus _qv_37 _qv_36)))
	(forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_38 _qv_39) _qv_40)=(plus _qv_38 (plus _qv_39 _qv_40))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_41 _qv_42))=(plus (succ _qv_41) (succ _qv_42))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_41 _qv_42))=(plus (succ _qv_42) (succ _qv_41))))

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_29 nil))=(rotate (succ _v_29) nil))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_15))=_qv_15))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_29 nil))=(rotate (succ _v_29) nil))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_16 _qv_17)=(append _qv_17 _qv_16)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_29 nil))=(rotate (succ _v_29) nil))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_18 _qv_19) _qv_20)=(append _qv_18 (append _qv_19 _qv_20))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_29 nil))=(rotate (succ _v_29) nil))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_21 _qv_22)=(plus _qv_22 _qv_21)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_29 nil))=(rotate (succ _v_29) nil))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_23 _qv_24) _qv_25)=(plus _qv_23 (plus _qv_24 _qv_25))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_29 nil))=(rotate (succ _v_29) nil))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_26 _qv_27))=(plus (succ _qv_26) (succ _qv_27))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_29 nil))=(rotate (succ _v_29) nil))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_26 _qv_27))=(plus (succ _qv_27) (succ _qv_26))))
USE ASSUMPTION FAILED


The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_30))=_qv_30))
	(forall ((Lst) (Lst)) ((append _qv_31 _qv_32)=(append _qv_32 _qv_31)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_33 _qv_34) _qv_35)=(append _qv_33 (append _qv_34 _qv_35))))
	(forall ((Nat) (Nat)) ((plus _qv_36 _qv_37)=(plus _qv_37 _qv_36)))
	(forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_38 _qv_39) _qv_40)=(plus _qv_38 (plus _qv_39 _qv_40))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_41 _qv_42))=(plus (succ _qv_41) (succ _qv_42))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_41 _qv_42))=(plus (succ _qv_42) (succ _qv_41))))

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_29 nil))=(rotate (succ _v_29) nil))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_15))=_qv_15))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_29 nil))=(rotate (succ _v_29) nil))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_16 _qv_17)=(append _qv_17 _qv_16)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_29 nil))=(rotate (succ _v_29) nil))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_18 _qv_19) _qv_20)=(append _qv_18 (append _qv_19 _qv_20))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_29 nil))=(rotate (succ _v_29) nil))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_21 _qv_22)=(plus _qv_22 _qv_21)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_29 nil))=(rotate (succ _v_29) nil))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_23 _qv_24) _qv_25)=(plus _qv_23 (plus _qv_24 _qv_25))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_29 nil))=(rotate (succ _v_29) nil))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_26 _qv_27))=(plus (succ _qv_26) (succ _qv_27))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_29 nil))=(rotate (succ _v_29) nil))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_26 _qv_27))=(plus (succ _qv_27) (succ _qv_26))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_13 _v_14))=(rotate (succ _v_13) (rotate (len nil) _v_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_13 _v_14))=(rotate (succ _v_13) (rotate (len nil) _v_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_13 _v_14))=(rotate (succ _v_13) (rotate (len nil) _v_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_13 _v_14))=(rotate (succ _v_13) (rotate (len nil) _v_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_13 _v_14))=(rotate (succ _v_13) (rotate (len nil) _v_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_13 _v_14))=(rotate (succ _v_13) (rotate (len nil) _v_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_13 _v_14))=(rotate (succ _v_13) (rotate (len nil) _v_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len nil)) (rotate _v_13 _v_14))=(rotate (succ _v_13) (rotate (len nil) _v_14)))
}

Base case:       ((rotate (succ _v_15) (rotate zero _v_16))=(rotate (succ zero) (rotate _v_15 _v_16)))
{
  {
    ====================
    | Assumptions [0]: (forall ((Nat) (Lst)) ((len (cons _qv_1 _qv_2))=(succ (len _qv_2))))
    | Assumptions [1]: (forall ((Lst)) ((append nil _qv_3)=_qv_3))
    | Assumptions [2]: (forall ((Nat) (Lst) (Lst)) ((append (cons _qv_4 _qv_5) _qv_6)=(cons _qv_4 (append _qv_5 _qv_6))))
    | Assumptions [3]: (forall ((Nat)) ((rotate (succ _qv_8) nil)=nil))
    | Assumptions [4]: (forall ((Nat) (Nat) (Lst)) ((rotate (succ _qv_9) (cons _qv_10 _qv_11))=(rotate _qv_9 (append _qv_11 (cons _qv_10 nil)))))
    | Assumptions [5]: (forall ((Nat) (Nat)) ((plus (succ _qv_13) _qv_14)=(succ (plus _qv_13 _qv_14))))
    | Assumptions [6]: (forall ((Lst)) ((rotate (len nil) _qv_7)=_qv_7))
    | Assumptions [7]: (forall ((Nat)) ((plus (len nil) _qv_12)=_qv_12))
    ====================
  }
}

Base case:       ((rotate (succ _v_17) (rotate _v_18 nil))=(rotate (succ _v_18) (rotate _v_17 nil)))
{
  {
    ====================
    | Assumptions [0]: (forall ((Nat) (Lst)) ((len (cons _qv_1 _qv_2))=(succ (len _qv_2))))
    | Assumptions [1]: (forall ((Lst)) ((append nil _qv_3)=_qv_3))
    | Assumptions [2]: (forall ((Nat) (Lst) (Lst)) ((append (cons _qv_4 _qv_5) _qv_6)=(cons _qv_4 (append _qv_5 _qv_6))))
    | Assumptions [3]: (forall ((Nat)) ((rotate (succ _qv_8) nil)=nil))
    | Assumptions [4]: (forall ((Nat) (Nat) (Lst)) ((rotate (succ _qv_9) (cons _qv_10 _qv_11))=(rotate _qv_9 (append _qv_11 (cons _qv_10 nil)))))
    | Assumptions [5]: (forall ((Nat) (Nat)) ((plus (succ _qv_13) _qv_14)=(succ (plus _qv_13 _qv_14))))
    | Assumptions [6]: (forall ((Lst)) ((rotate (len nil) _qv_7)=_qv_7))
    | Assumptions [7]: (forall ((Nat)) ((plus (len nil) _qv_12)=_qv_12))
    ====================
  }
}
Unknown
sat
