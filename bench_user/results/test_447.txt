
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Lst) (Lst)) ((append _qv_0 _qv_1)=(append _qv_1 _qv_0)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_2 _qv_3) _qv_4)=(append _qv_2 (append _qv_3 _qv_4))))
	(forall ((Lst)) ((filter (filter _qv_5))=_qv_5))
	(forall ((Lst) (Lst)) ((filter (append _qv_6 _qv_7))=(append (filter _qv_6) (filter _qv_7))))
	(forall ((Lst) (Lst)) ((filter (append _qv_6 _qv_7))=(append (filter _qv_7) (filter _qv_6))))

Simplified goal: (forall ((Nat) (Lst)) ((last (append xs (cons x nil)))=x))


Base case:       ((last (append _v_8 (cons zero nil)))=zero)
{
  {
    ====================
    | Assumptions [0]: ((filter nil)=nil)
    | Assumptions [1]: (forall ((Lst)) ((append nil _qv_1)=_qv_1))
    | Assumptions [2]: (forall ((Nat) (Lst) (Lst)) ((append (cons _qv_2 _qv_3) _qv_4)=(cons _qv_2 (append _qv_3 _qv_4))))
    | Assumptions [3]: (forall ((Nat) (Lst)) ((last (cons _qv_5 _qv_6))=ite(_qv_6=nil, _qv_5, (last _qv_6))))
    | Assumptions [4]: (forall ((Nat) (Lst)) ((filter (cons _qv_7 _qv_8))=ite((P _qv_7), (cons _qv_7 (filter _qv_8)), (filter _qv_8))))
    ====================
  }
}

Base case:       ((last (append nil (cons _v_9 nil)))=_v_9)
{
  proven trivially
}
Inductive step:  ((last (append (cons _t_10 _t_11) (cons _v_9 nil)))=_v_9)
{
  {
    ====================
    | Assumptions [0]: ((filter nil)=nil)
    | Assumptions [1]: (forall ((Lst)) ((append nil _qv_1)=_qv_1))
    | Assumptions [2]: (forall ((Nat) (Lst) (Lst)) ((append (cons _qv_2 _qv_3) _qv_4)=(cons _qv_2 (append _qv_3 _qv_4))))
    | Assumptions [3]: (forall ((Nat) (Lst)) ((last (cons _qv_5 _qv_6))=ite(_qv_6=nil, _qv_5, (last _qv_6))))
    | Assumptions [4]: (forall ((Nat) (Lst)) ((filter (cons _qv_7 _qv_8))=ite((P _qv_7), (cons _qv_7 (filter _qv_8)), (filter _qv_8))))
    | Assumptions [5]: (forall ((Nat)) ((last (append _t_11 (cons x nil)))=x))
    | Assumptions [6]: (forall ((Nat)) (x=(last (append _t_11 (cons x nil)))))
    ====================
  }
  rewritten [2]: ((last (cons _t_10 (append _t_11 (cons _v_9 nil))))=_v_9)
  rewritten [3]: (ite((append _t_11 (cons _v_9 nil))=nil, _t_10, (last (append _t_11 (cons _v_9 nil))))=_v_9)
  proceed with (part 1/2): (((append _t_11 (cons _v_9 nil))=nil)->(_t_10=_v_9))
  {
    {
      ====================
      | Assumptions [0]: ((filter nil)=nil)
      | Assumptions [1]: (forall ((Lst)) ((append nil _qv_1)=_qv_1))
      | Assumptions [2]: (forall ((Nat) (Lst) (Lst)) ((append (cons _qv_2 _qv_3) _qv_4)=(cons _qv_2 (append _qv_3 _qv_4))))
      | Assumptions [3]: (forall ((Nat) (Lst)) ((last (cons _qv_5 _qv_6))=ite(_qv_6=nil, _qv_5, (last _qv_6))))
      | Assumptions [4]: (forall ((Nat) (Lst)) ((filter (cons _qv_7 _qv_8))=ite((P _qv_7), (cons _qv_7 (filter _qv_8)), (filter _qv_8))))
      | Assumptions [5]: (forall ((Nat)) ((last (append _t_11 (cons x nil)))=x))
      | Assumptions [6]: (forall ((Nat)) (x=(last (append _t_11 (cons x nil)))))
      | Assumptions [7]: ((append _t_11 (cons _v_9 nil))=nil)
      | Assumptions [8]: ((append _t_11 (cons (last (append _t_11 (cons _v_9 nil))) nil))=nil)
      | Assumptions [9]: ((append _t_11 (cons (last (append _t_11 (cons (last (append _t_11 (cons _v_9 nil))) nil))) nil))=nil)
      | Assumptions [10]: ((append _t_11 (cons (last nil) nil))=nil)
      | Assumptions [11]: ((append _t_11 (cons (last (append _t_11 (cons (last (append _t_11 (cons (last (append _t_11 (cons _v_9 nil))) nil))) nil))) nil))=nil)
      | Assumptions [12]: ((append _t_11 (cons (last (append _t_11 (cons (last nil) nil))) nil))=nil)
      ====================
    }
    current subgoal: (_t_10=_v_9)
    rewritten [6]: (_t_10=(last (append _t_11 (cons _v_9 nil))))
    rewritten [5]: (_t_10=_v_9)
    rewritten [6]: ((last (append _t_11 (cons _t_10 nil)))=_v_9)
    rewritten [6]: ((last (append _t_11 (cons _t_10 nil)))=(last (append _t_11 (cons _v_9 nil))))
    rewritten [6]: ((last (append _t_11 (cons _t_10 nil)))=(last (append _t_11 (cons (last (append _t_11 (cons _v_9 nil))) nil))))
    Maximum recursion depth reached

The Knowledge Scheme currently contains the following lemmas:
	(forall ((Lst) (Lst)) ((append _qv_12 _qv_13)=(append _qv_13 _qv_12)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_14 _qv_15) _qv_16)=(append _qv_14 (append _qv_15 _qv_16))))
	(forall ((Lst)) ((filter (filter _qv_17))=_qv_17))
	(forall ((Lst) (Lst)) ((filter (append _qv_18 _qv_19))=(append (filter _qv_18) (filter _qv_19))))
	(forall ((Lst) (Lst)) ((filter (append _qv_18 _qv_19))=(append (filter _qv_19) (filter _qv_18))))

