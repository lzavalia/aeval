
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
	(forall ((Nat)) (0<=(nat-to-int _qv_1)))
	(forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
	(forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))

Simplified goal: (forall ((Nat) (Nat) (Lst)) ((!(n=h))->((count n (append x (cons h nil)))=(count n x))))


Base case:       ((count zero (append _v_9 (cons _v_8 nil)))=(count zero _v_9))
{
  {
    ====================
    | Assumptions [0]: ((nat-to-int zero)=0)
    | Assumptions [1]: (forall ((Nat)) ((nat-to-int _qv_1)>=0))
    | Assumptions [2]: (forall ((Nat) (Nat)) (((nat-to-int _qv_2)=(nat-to-int _qv_3))->(_qv_2=_qv_3)))
    | Assumptions [3]: (forall ((Nat)) ((nat-to-int (succ _qv_4))=(1+(nat-to-int _qv_4))))
    | Assumptions [4]: (forall ((Lst)) ((append nil _qv_5)=_qv_5))
    | Assumptions [5]: (forall ((Nat) (Lst) (Lst)) ((append (cons _qv_6 _qv_7) _qv_8)=(cons _qv_6 (append _qv_7 _qv_8))))
    | Assumptions [6]: (forall ((Nat)) ((count _qv_9 nil)=zero))
    | Assumptions [7]: (forall ((Nat) (Nat) (Lst)) ((count _qv_10 (cons _qv_11 _qv_12))=ite(_qv_10=_qv_11, (succ (count _qv_10 _qv_12)), (count _qv_10 _qv_12))))
    | Assumptions [8]: (zero!=_v_8)
    ====================
  }
  rewritten [2]: ((nat-to-int (count zero (append _v_9 (cons _v_8 nil))))=(nat-to-int (count zero _v_9)))
CURRENT SUBGOAL ((count zero (append _v_9 (cons _v_8 nil)))=(count zero _v_9))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((count zero (append _v_9 (cons _v_8 nil)))=(count zero _v_9))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((count zero (append _v_9 (cons _v_8 nil)))=(count zero _v_9))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((count zero (append _v_9 (cons _v_8 nil)))=(count zero _v_9))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((count zero (append _v_9 (cons _v_8 nil)))=(count zero _v_9))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

  backtrack to: ((count zero (append _v_9 (cons _v_8 nil)))=(count zero _v_9))
  rewritten [2]: ((nat-to-int (count zero (append _v_9 (cons _v_8 nil))))=(nat-to-int (count zero _v_9)))
CURRENT SUBGOAL ((count zero (append _v_9 (cons _v_8 nil)))=(count zero _v_9))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((count zero (append _v_9 (cons _v_8 nil)))=(count zero _v_9))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((count zero (append _v_9 (cons _v_8 nil)))=(count zero _v_9))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((count zero (append _v_9 (cons _v_8 nil)))=(count zero _v_9))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((count zero (append _v_9 (cons _v_8 nil)))=(count zero _v_9))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

  backtrack to: ((count zero (append _v_9 (cons _v_8 nil)))=(count zero _v_9))
}

Base case:       ((count _v_10 (append _v_11 (cons zero nil)))=(count _v_10 _v_11))
{
  {
    ====================
    | Assumptions [0]: ((nat-to-int zero)=0)
    | Assumptions [1]: (forall ((Nat)) ((nat-to-int _qv_1)>=0))
    | Assumptions [2]: (forall ((Nat) (Nat)) (((nat-to-int _qv_2)=(nat-to-int _qv_3))->(_qv_2=_qv_3)))
    | Assumptions [3]: (forall ((Nat)) ((nat-to-int (succ _qv_4))=(1+(nat-to-int _qv_4))))
    | Assumptions [4]: (forall ((Lst)) ((append nil _qv_5)=_qv_5))
    | Assumptions [5]: (forall ((Nat) (Lst) (Lst)) ((append (cons _qv_6 _qv_7) _qv_8)=(cons _qv_6 (append _qv_7 _qv_8))))
    | Assumptions [6]: (forall ((Nat)) ((count _qv_9 nil)=zero))
    | Assumptions [7]: (forall ((Nat) (Nat) (Lst)) ((count _qv_10 (cons _qv_11 _qv_12))=ite(_qv_10=_qv_11, (succ (count _qv_10 _qv_12)), (count _qv_10 _qv_12))))
    | Assumptions [8]: (zero!=_v_8)
    | Assumptions [9]: (_v_10!=zero)
    ====================
  }
  rewritten [2]: ((nat-to-int (count _v_10 (append _v_11 (cons zero nil))))=(nat-to-int (count _v_10 _v_11)))
CURRENT SUBGOAL ((count _v_10 (append _v_11 (cons zero nil)))=(count _v_10 _v_11))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((count _v_10 (append _v_11 (cons zero nil)))=(count _v_10 _v_11))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((count _v_10 (append _v_11 (cons zero nil)))=(count _v_10 _v_11))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((count _v_10 (append _v_11 (cons zero nil)))=(count _v_10 _v_11))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((count _v_10 (append _v_11 (cons zero nil)))=(count _v_10 _v_11))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

  backtrack to: ((count _v_10 (append _v_11 (cons zero nil)))=(count _v_10 _v_11))
  rewritten [2]: ((nat-to-int (count _v_10 (append _v_11 (cons zero nil))))=(nat-to-int (count _v_10 _v_11)))
CURRENT SUBGOAL ((count _v_10 (append _v_11 (cons zero nil)))=(count _v_10 _v_11))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((count _v_10 (append _v_11 (cons zero nil)))=(count _v_10 _v_11))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((count _v_10 (append _v_11 (cons zero nil)))=(count _v_10 _v_11))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((count _v_10 (append _v_11 (cons zero nil)))=(count _v_10 _v_11))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((count _v_10 (append _v_11 (cons zero nil)))=(count _v_10 _v_11))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
USE ASSUMPTION FAILED

  backtrack to: ((count _v_10 (append _v_11 (cons zero nil)))=(count _v_10 _v_11))
}

Base case:       ((count _v_12 (append nil (cons _v_13 nil)))=(count _v_12 nil))
{
  proven trivially
}
Inductive step:  ((count _v_12 (append (cons _t_14 _t_15) (cons _v_13 nil)))=(count _v_12 (cons _t_14 _t_15)))
{
  proven trivially
}

Proved
unsat
