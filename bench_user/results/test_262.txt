
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
	(forall ((Nat)) (0<=(nat-to-int _qv_1)))
	(forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
	(forall ((Lst)) ((rev (rev _qv_7))=_qv_7))
	(forall ((Lst) (Lst)) ((qreva _qv_8 _qv_9)=(qreva _qv_9 _qv_8)))
	(forall ((Lst) (Lst) (Lst)) ((qreva (qreva _qv_10 _qv_11) _qv_12)=(qreva _qv_10 (qreva _qv_11 _qv_12))))
	(forall ((Nat)) ((nat-to-int (succ _qv_13))=(nat-to-int _qv_13)))
	(forall ((Lst) (Lst) (Lst)) ((qreva _qv_14 (append _qv_15 _qv_16))=(append (qreva _qv_14 _qv_15) (qreva _qv_14 _qv_16))))
	(forall ((Lst) (Lst) (Lst)) ((append _qv_17 (qreva _qv_18 _qv_19))=(qreva (append _qv_17 _qv_18) (append _qv_17 _qv_19))))
	(forall ((Lst) (Lst)) ((rev (append _qv_20 _qv_21))=(append (rev _qv_20) (rev _qv_21))))
	(forall ((Lst) (Lst)) ((rev (append _qv_20 _qv_21))=(append (rev _qv_21) (rev _qv_20))))
	(forall ((Lst) (Lst)) ((rev (qreva _qv_22 _qv_23))=(qreva (rev _qv_22) (rev _qv_23))))
	(forall ((Lst) (Lst)) ((rev (qreva _qv_22 _qv_23))=(qreva (rev _qv_23) (rev _qv_22))))

Simplified goal: (forall ((Lst) (Lst)) ((rev (qreva x (rev y)))=(append y x)))


Base case:       ((rev (qreva nil (rev _v_24)))=(append _v_24 nil))
{
  {
    ====================
    | Assumptions [0]: ((nat-to-int zero)=0)
    | Assumptions [1]: ((rev nil)=nil)
    | Assumptions [2]: (forall ((Nat)) ((nat-to-int _qv_1)>=0))
    | Assumptions [3]: (forall ((Nat) (Nat)) (((nat-to-int _qv_2)=(nat-to-int _qv_3))->(_qv_2=_qv_3)))
    | Assumptions [4]: (forall ((Nat)) ((nat-to-int (succ _qv_4))=(1+(nat-to-int _qv_4))))
    | Assumptions [5]: (forall ((Lst)) ((append nil _qv_5)=_qv_5))
    | Assumptions [6]: (forall ((Nat) (Lst) (Lst)) ((append (cons _qv_6 _qv_7) _qv_8)=(cons _qv_6 (append _qv_7 _qv_8))))
    | Assumptions [7]: (forall ((Nat) (Lst)) ((rev (cons _qv_9 _qv_10))=(append (rev _qv_10) (cons _qv_9 nil))))
    | Assumptions [8]: (forall ((Lst)) ((qreva nil _qv_11)=_qv_11))
    | Assumptions [9]: (forall ((Lst) (Lst) (Nat)) ((qreva (cons _qv_14 _qv_12) _qv_13)=(qreva _qv_12 (cons _qv_14 _qv_13))))
    | Assumptions [10]: (forall ((Lst) (Nat)) ((rev (append _qv_15 (cons _qv_16 nil)))=(cons _qv_16 (rev _qv_15))))
    | Assumptions [11]: (forall ((Lst) (Nat) (Lst)) ((append (append _qv_17 (cons _qv_18 nil)) _qv_19)=(append _qv_17 (cons _qv_18 _qv_19))))
    ====================
  }
  rewritten [8]: ((rev (rev _v_24))=(append _v_24 nil))

The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_25))=_qv_25))
	(forall ((Nat)) (0<=(nat-to-int _qv_26)))
	(forall ((Lst) (Lst)) ((append _qv_27 _qv_28)=(append _qv_28 _qv_27)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_29 _qv_30) _qv_31)=(append _qv_29 (append _qv_30 _qv_31))))
	(forall ((Lst)) ((rev (rev _qv_32))=_qv_32))
	(forall ((Lst) (Lst)) ((qreva _qv_33 _qv_34)=(qreva _qv_34 _qv_33)))
	(forall ((Lst) (Lst) (Lst)) ((qreva (qreva _qv_35 _qv_36) _qv_37)=(qreva _qv_35 (qreva _qv_36 _qv_37))))
	(forall ((Nat)) ((nat-to-int (succ _qv_38))=(nat-to-int _qv_38)))
	(forall ((Lst) (Lst) (Lst)) ((qreva _qv_39 (append _qv_40 _qv_41))=(append (qreva _qv_39 _qv_40) (qreva _qv_39 _qv_41))))
	(forall ((Lst) (Lst) (Lst)) ((append _qv_42 (qreva _qv_43 _qv_44))=(qreva (append _qv_42 _qv_43) (append _qv_42 _qv_44))))
	(forall ((Lst) (Lst)) ((rev (append _qv_45 _qv_46))=(append (rev _qv_45) (rev _qv_46))))
	(forall ((Lst) (Lst)) ((rev (append _qv_45 _qv_46))=(append (rev _qv_46) (rev _qv_45))))
	(forall ((Lst) (Lst)) ((rev (qreva _qv_47 _qv_48))=(qreva (rev _qv_47) (rev _qv_48))))
	(forall ((Lst) (Lst)) ((rev (qreva _qv_47 _qv_48))=(qreva (rev _qv_48) (rev _qv_47))))

  proven by induction: ((rev (rev _v_24))=(append _v_24 nil))
}
Inductive step:  ((rev (qreva (cons _t_25 _t_26) (rev _v_24)))=(append _v_24 (cons _t_25 _t_26)))
{
  proven trivially
}

Proved
unsat
