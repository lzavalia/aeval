
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
	(forall ((Nat) (Nat)) ((plus _qv_1 _qv_2)=(plus _qv_2 _qv_1)))
	(forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_3 _qv_4) _qv_5)=(plus _qv_3 (plus _qv_4 _qv_5))))
	(forall ((Nat) (Nat)) ((mult _qv_6 _qv_7)=(mult _qv_7 _qv_6)))
	(forall ((Nat) (Nat) (Nat)) ((mult (mult _qv_8 _qv_9) _qv_10)=(mult _qv_8 (mult _qv_9 _qv_10))))
	(forall ((Nat)) ((tri (tri _qv_11))=_qv_11))
	(forall ((Nat)) ((cubes (cubes _qv_12))=_qv_12))
	(forall ((Nat)) (0<=(nat-to-int _qv_13)))
	(forall ((Nat)) ((nat-to-int (succ _qv_14))=(nat-to-int _qv_14)))
	(forall ((Nat)) ((nat-to-int (tri _qv_15))=(nat-to-int _qv_15)))
	(forall ((Nat)) ((nat-to-int (cubes _qv_16))=(nat-to-int _qv_16)))
	(forall ((Nat) (Nat) (Nat)) ((mult _qv_17 (plus _qv_18 _qv_19))=(plus (mult _qv_17 _qv_18) (mult _qv_17 _qv_19))))
	(forall ((Nat) (Nat) (Nat)) ((plus _qv_20 (mult _qv_21 _qv_22))=(mult (plus _qv_20 _qv_21) (plus _qv_20 _qv_22))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_23 _qv_24))=(plus (succ _qv_23) (succ _qv_24))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_23 _qv_24))=(plus (succ _qv_24) (succ _qv_23))))
	(forall ((Nat) (Nat)) ((succ (mult _qv_25 _qv_26))=(mult (succ _qv_25) (succ _qv_26))))
	(forall ((Nat) (Nat)) ((succ (mult _qv_25 _qv_26))=(mult (succ _qv_26) (succ _qv_25))))
	(forall ((Nat) (Nat)) ((tri (plus _qv_27 _qv_28))=(plus (tri _qv_27) (tri _qv_28))))
	(forall ((Nat) (Nat)) ((tri (plus _qv_27 _qv_28))=(plus (tri _qv_28) (tri _qv_27))))
	(forall ((Nat) (Nat)) ((tri (mult _qv_29 _qv_30))=(mult (tri _qv_29) (tri _qv_30))))
	(forall ((Nat) (Nat)) ((tri (mult _qv_29 _qv_30))=(mult (tri _qv_30) (tri _qv_29))))
	(forall ((Nat) (Nat)) ((cubes (plus _qv_31 _qv_32))=(plus (cubes _qv_31) (cubes _qv_32))))
	(forall ((Nat) (Nat)) ((cubes (plus _qv_31 _qv_32))=(plus (cubes _qv_32) (cubes _qv_31))))
	(forall ((Nat) (Nat)) ((cubes (mult _qv_33 _qv_34))=(mult (cubes _qv_33) (cubes _qv_34))))
	(forall ((Nat) (Nat)) ((cubes (mult _qv_33 _qv_34))=(mult (cubes _qv_34) (cubes _qv_33))))

Simplified goal: (forall ((Nat) (Nat) (Nat)) ((plus x (plus y z))=(plus (plus y x) z)))


Base case:       ((plus zero (plus _v_35 _v_36))=(plus (plus _v_35 zero) _v_36))
{
  proven trivially
}
Inductive step:  ((plus (succ _t_37) (plus _v_35 _v_36))=(plus (plus _v_35 (succ _t_37)) _v_36))
{
  {
    ====================
    | Assumptions [0]: ((tri zero)=zero)
    | Assumptions [1]: ((cubes zero)=zero)
    | Assumptions [2]: ((nat-to-int zero)=0)
    | Assumptions [3]: (forall ((Nat)) ((plus zero _qv_1)=_qv_1))
    | Assumptions [4]: (forall ((Nat) (Nat)) ((plus (succ _qv_2) _qv_3)=(succ (plus _qv_2 _qv_3))))
    | Assumptions [5]: (forall ((Nat)) ((mult zero _qv_4)=zero))
    | Assumptions [6]: (forall ((Nat) (Nat)) ((mult (succ _qv_5) _qv_6)=(plus (mult _qv_5 _qv_6) _qv_6)))
    | Assumptions [7]: (forall ((Nat)) ((tri (succ _qv_7))=(plus (tri _qv_7) (succ _qv_7))))
    | Assumptions [8]: (forall ((Nat)) ((cubes (succ _qv_8))=(plus (cubes _qv_8) (mult (succ _qv_8) (mult (succ _qv_8) (succ _qv_8))))))
    | Assumptions [9]: (forall ((Nat)) ((nat-to-int _qv_9)>=0))
    | Assumptions [10]: (forall ((Nat) (Nat)) (((nat-to-int _qv_10)=(nat-to-int _qv_11))->(_qv_10=_qv_11)))
    | Assumptions [11]: (forall ((Nat)) ((nat-to-int (succ _qv_12))=(1+(nat-to-int _qv_12))))
    | Assumptions [12]: (forall ((Nat) (Nat)) ((nat-to-int (plus _qv_13 _qv_14))=((nat-to-int _qv_13)+(nat-to-int _qv_14))))
    | Assumptions [13]: (forall ((Nat) (Nat)) ((plus _qv_15 _qv_16)=(plus _qv_16 _qv_15)))
    | Assumptions [14]: (forall ((Nat) (Nat)) ((plus _t_37 (plus y z))=(plus (plus y _t_37) z)))
    | Assumptions [15]: (forall ((Nat) (Nat)) ((plus (plus y _t_37) z)=(plus _t_37 (plus y z))))
    ====================
  }
  rewritten [4]: ((succ (plus _t_37 (plus _v_35 _v_36)))=(plus (plus _v_35 (succ _t_37)) _v_36))
  rewritten [10]: ((nat-to-int (succ (plus _t_37 (plus _v_35 _v_36))))=(nat-to-int (plus (plus _v_35 (succ _t_37)) _v_36)))
  rewritten [11]: ((1+(nat-to-int (plus _t_37 (plus _v_35 _v_36))))=(nat-to-int (plus (plus _v_35 (succ _t_37)) _v_36)))
  rewritten [2]: ((nat-to-int (plus _t_37 (plus _v_35 _v_36)))=(-1+(nat-to-int (plus (plus _v_35 (succ _t_37)) _v_36))))
  rewritten [12]: (((nat-to-int _t_37)+(nat-to-int (plus _v_35 _v_36)))=((nat-to-int (plus (plus _v_35 (succ _t_37)) _v_36))+-1))
  rewritten [2]: (((nat-to-int _t_37)+(nat-to-int (plus _v_35 _v_36)))=(-1+(nat-to-int (plus (plus _v_35 (succ _t_37)) _v_36))))
  rewritten [12]: (((nat-to-int _t_37)+((nat-to-int _v_35)+(nat-to-int _v_36)))=((nat-to-int (plus (plus _v_35 (succ _t_37)) _v_36))+-1))
  Maximum recursion depth reached

The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_38))=_qv_38))
	(forall ((Nat) (Nat)) ((plus _qv_39 _qv_40)=(plus _qv_40 _qv_39)))
	(forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_41 _qv_42) _qv_43)=(plus _qv_41 (plus _qv_42 _qv_43))))
	(forall ((Nat) (Nat)) ((mult _qv_44 _qv_45)=(mult _qv_45 _qv_44)))
	(forall ((Nat) (Nat) (Nat)) ((mult (mult _qv_46 _qv_47) _qv_48)=(mult _qv_46 (mult _qv_47 _qv_48))))
	(forall ((Nat)) ((tri (tri _qv_49))=_qv_49))
	(forall ((Nat)) ((cubes (cubes _qv_50))=_qv_50))
	(forall ((Nat)) (0<=(nat-to-int _qv_51)))
	(forall ((Nat)) ((nat-to-int (succ _qv_52))=(nat-to-int _qv_52)))
	(forall ((Nat)) ((nat-to-int (tri _qv_53))=(nat-to-int _qv_53)))
	(forall ((Nat)) ((nat-to-int (cubes _qv_54))=(nat-to-int _qv_54)))
	(forall ((Nat) (Nat) (Nat)) ((mult _qv_55 (plus _qv_56 _qv_57))=(plus (mult _qv_55 _qv_56) (mult _qv_55 _qv_57))))
	(forall ((Nat) (Nat) (Nat)) ((plus _qv_58 (mult _qv_59 _qv_60))=(mult (plus _qv_58 _qv_59) (plus _qv_58 _qv_60))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_61 _qv_62))=(plus (succ _qv_61) (succ _qv_62))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_61 _qv_62))=(plus (succ _qv_62) (succ _qv_61))))
	(forall ((Nat) (Nat)) ((succ (mult _qv_63 _qv_64))=(mult (succ _qv_63) (succ _qv_64))))
	(forall ((Nat) (Nat)) ((succ (mult _qv_63 _qv_64))=(mult (succ _qv_64) (succ _qv_63))))
	(forall ((Nat) (Nat)) ((tri (plus _qv_65 _qv_66))=(plus (tri _qv_65) (tri _qv_66))))
	(forall ((Nat) (Nat)) ((tri (plus _qv_65 _qv_66))=(plus (tri _qv_66) (tri _qv_65))))
	(forall ((Nat) (Nat)) ((tri (mult _qv_67 _qv_68))=(mult (tri _qv_67) (tri _qv_68))))
	(forall ((Nat) (Nat)) ((tri (mult _qv_67 _qv_68))=(mult (tri _qv_68) (tri _qv_67))))
	(forall ((Nat) (Nat)) ((cubes (plus _qv_69 _qv_70))=(plus (cubes _qv_69) (cubes _qv_70))))
	(forall ((Nat) (Nat)) ((cubes (plus _qv_69 _qv_70))=(plus (cubes _qv_70) (cubes _qv_69))))
	(forall ((Nat) (Nat)) ((cubes (mult _qv_71 _qv_72))=(mult (cubes _qv_71) (cubes _qv_72))))
	(forall ((Nat) (Nat)) ((cubes (mult _qv_71 _qv_72))=(mult (cubes _qv_72) (cubes _qv_71))))

  proven by induction: (((nat-to-int _t_37)+((nat-to-int _v_35)+(nat-to-int _v_36)))=((nat-to-int (plus (plus _v_35 (succ _t_37)) _v_36))+-1))
  rewriting done
  rewriting done
  rewriting done
  rewriting done
  rewriting done
  rewriting done
}

Proved
unsat
