
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
	(forall ((Nat) (Nat)) ((plus _qv_1 _qv_2)=(plus _qv_2 _qv_1)))
	(forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_3 _qv_4) _qv_5)=(plus _qv_3 (plus _qv_4 _qv_5))))
	(forall ((Nat) (Nat)) ((mult _qv_6 _qv_7)=(mult _qv_7 _qv_6)))
	(forall ((Nat) (Nat) (Nat)) ((mult (mult _qv_8 _qv_9) _qv_10)=(mult _qv_8 (mult _qv_9 _qv_10))))
	(forall ((Nat)) ((tri (tri _qv_11))=_qv_11))
	(forall ((Nat)) ((cubes (cubes _qv_12))=_qv_12))
	(forall ((Nat) (Nat) (Nat)) ((mult _qv_13 (plus _qv_14 _qv_15))=(plus (mult _qv_13 _qv_14) (mult _qv_13 _qv_15))))
	(forall ((Nat) (Nat) (Nat)) ((plus _qv_16 (mult _qv_17 _qv_18))=(mult (plus _qv_16 _qv_17) (plus _qv_16 _qv_18))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_19 _qv_20))=(plus (succ _qv_19) (succ _qv_20))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_19 _qv_20))=(plus (succ _qv_20) (succ _qv_19))))
	(forall ((Nat) (Nat)) ((succ (mult _qv_21 _qv_22))=(mult (succ _qv_21) (succ _qv_22))))
	(forall ((Nat) (Nat)) ((succ (mult _qv_21 _qv_22))=(mult (succ _qv_22) (succ _qv_21))))
	(forall ((Nat) (Nat)) ((tri (plus _qv_23 _qv_24))=(plus (tri _qv_23) (tri _qv_24))))
	(forall ((Nat) (Nat)) ((tri (plus _qv_23 _qv_24))=(plus (tri _qv_24) (tri _qv_23))))
	(forall ((Nat) (Nat)) ((tri (mult _qv_25 _qv_26))=(mult (tri _qv_25) (tri _qv_26))))
	(forall ((Nat) (Nat)) ((tri (mult _qv_25 _qv_26))=(mult (tri _qv_26) (tri _qv_25))))
	(forall ((Nat) (Nat)) ((cubes (plus _qv_27 _qv_28))=(plus (cubes _qv_27) (cubes _qv_28))))
	(forall ((Nat) (Nat)) ((cubes (plus _qv_27 _qv_28))=(plus (cubes _qv_28) (cubes _qv_27))))
	(forall ((Nat) (Nat)) ((cubes (mult _qv_29 _qv_30))=(mult (cubes _qv_29) (cubes _qv_30))))
	(forall ((Nat) (Nat)) ((cubes (mult _qv_29 _qv_30))=(mult (cubes _qv_30) (cubes _qv_29))))

Simplified goal: (forall ((Nat) (Nat)) ((mult x (plus y y))=(mult y (plus x x))))


Base case:       ((mult zero (plus _v_31 _v_31))=(mult _v_31 (plus zero zero)))
{
  {
    ====================
    | Assumptions [0]: ((tri zero)=zero)
    | Assumptions [1]: ((cubes zero)=zero)
    | Assumptions [2]: (forall ((Nat)) ((plus zero _qv_1)=_qv_1))
    | Assumptions [3]: (forall ((Nat) (Nat)) ((plus (succ _qv_2) _qv_3)=(succ (plus _qv_2 _qv_3))))
    | Assumptions [4]: (forall ((Nat)) ((mult zero _qv_4)=zero))
    | Assumptions [5]: (forall ((Nat) (Nat)) ((mult (succ _qv_5) _qv_6)=(plus (mult _qv_5 _qv_6) _qv_6)))
    | Assumptions [6]: (forall ((Nat)) ((tri (succ _qv_7))=(plus (tri _qv_7) (succ _qv_7))))
    | Assumptions [7]: (forall ((Nat)) ((cubes (succ _qv_8))=(plus (cubes _qv_8) (mult (succ _qv_8) (mult (succ _qv_8) (succ _qv_8))))))
    ====================
  }
  rewritten [2]: ((mult zero (plus _v_31 _v_31))=(mult _v_31 zero))
  rewritten [4]: (zero=(mult _v_31 zero))

The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_32))=_qv_32))
	(forall ((Nat) (Nat)) ((plus _qv_33 _qv_34)=(plus _qv_34 _qv_33)))
	(forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_35 _qv_36) _qv_37)=(plus _qv_35 (plus _qv_36 _qv_37))))
	(forall ((Nat) (Nat)) ((mult _qv_38 _qv_39)=(mult _qv_39 _qv_38)))
	(forall ((Nat) (Nat) (Nat)) ((mult (mult _qv_40 _qv_41) _qv_42)=(mult _qv_40 (mult _qv_41 _qv_42))))
	(forall ((Nat)) ((tri (tri _qv_43))=_qv_43))
	(forall ((Nat)) ((cubes (cubes _qv_44))=_qv_44))
	(forall ((Nat) (Nat) (Nat)) ((mult _qv_45 (plus _qv_46 _qv_47))=(plus (mult _qv_45 _qv_46) (mult _qv_45 _qv_47))))
	(forall ((Nat) (Nat) (Nat)) ((plus _qv_48 (mult _qv_49 _qv_50))=(mult (plus _qv_48 _qv_49) (plus _qv_48 _qv_50))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_51 _qv_52))=(plus (succ _qv_51) (succ _qv_52))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_51 _qv_52))=(plus (succ _qv_52) (succ _qv_51))))
	(forall ((Nat) (Nat)) ((succ (mult _qv_53 _qv_54))=(mult (succ _qv_53) (succ _qv_54))))
	(forall ((Nat) (Nat)) ((succ (mult _qv_53 _qv_54))=(mult (succ _qv_54) (succ _qv_53))))
	(forall ((Nat) (Nat)) ((tri (plus _qv_55 _qv_56))=(plus (tri _qv_55) (tri _qv_56))))
	(forall ((Nat) (Nat)) ((tri (plus _qv_55 _qv_56))=(plus (tri _qv_56) (tri _qv_55))))
	(forall ((Nat) (Nat)) ((tri (mult _qv_57 _qv_58))=(mult (tri _qv_57) (tri _qv_58))))
	(forall ((Nat) (Nat)) ((tri (mult _qv_57 _qv_58))=(mult (tri _qv_58) (tri _qv_57))))
	(forall ((Nat) (Nat)) ((cubes (plus _qv_59 _qv_60))=(plus (cubes _qv_59) (cubes _qv_60))))
	(forall ((Nat) (Nat)) ((cubes (plus _qv_59 _qv_60))=(plus (cubes _qv_60) (cubes _qv_59))))
	(forall ((Nat) (Nat)) ((cubes (mult _qv_61 _qv_62))=(mult (cubes _qv_61) (cubes _qv_62))))
	(forall ((Nat) (Nat)) ((cubes (mult _qv_61 _qv_62))=(mult (cubes _qv_62) (cubes _qv_61))))

  proven by induction: (zero=(mult _v_31 zero))
  rewriting done
}
Inductive step:  ((mult (succ _t_32) (plus _v_31 _v_31))=(mult _v_31 (plus (succ _t_32) (succ _t_32))))
{
  {
    ====================
    | Assumptions [0]: ((tri zero)=zero)
    | Assumptions [1]: ((cubes zero)=zero)
    | Assumptions [2]: (forall ((Nat)) ((plus zero _qv_1)=_qv_1))
    | Assumptions [3]: (forall ((Nat) (Nat)) ((plus (succ _qv_2) _qv_3)=(succ (plus _qv_2 _qv_3))))
    | Assumptions [4]: (forall ((Nat)) ((mult zero _qv_4)=zero))
    | Assumptions [5]: (forall ((Nat) (Nat)) ((mult (succ _qv_5) _qv_6)=(plus (mult _qv_5 _qv_6) _qv_6)))
    | Assumptions [6]: (forall ((Nat)) ((tri (succ _qv_7))=(plus (tri _qv_7) (succ _qv_7))))
    | Assumptions [7]: (forall ((Nat)) ((cubes (succ _qv_8))=(plus (cubes _qv_8) (mult (succ _qv_8) (mult (succ _qv_8) (succ _qv_8))))))
    | Assumptions [8]: (forall ((Nat)) ((mult _t_32 (plus y y))=(mult y (plus _t_32 _t_32))))
    | Assumptions [9]: (forall ((Nat)) ((mult y (plus _t_32 _t_32))=(mult _t_32 (plus y y))))
    ====================
  }
  rewritten [3]: ((mult (succ _t_32) (plus _v_31 _v_31))=(mult _v_31 (succ (plus _t_32 (succ _t_32)))))
  rewritten [5]: ((plus (mult _t_32 (plus _v_31 _v_31)) (plus _v_31 _v_31))=(mult _v_31 (succ (plus _t_32 (succ _t_32)))))
  rewritten [8]: ((plus (mult _v_31 (plus _t_32 _t_32)) (plus _v_31 _v_31))=(mult _v_31 (succ (plus _t_32 (succ _t_32)))))

The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_33))=_qv_33))
	(forall ((Nat) (Nat)) ((plus _qv_34 _qv_35)=(plus _qv_35 _qv_34)))
	(forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_36 _qv_37) _qv_38)=(plus _qv_36 (plus _qv_37 _qv_38))))
	(forall ((Nat) (Nat)) ((mult _qv_39 _qv_40)=(mult _qv_40 _qv_39)))
	(forall ((Nat) (Nat) (Nat)) ((mult (mult _qv_41 _qv_42) _qv_43)=(mult _qv_41 (mult _qv_42 _qv_43))))
	(forall ((Nat)) ((tri (tri _qv_44))=_qv_44))
	(forall ((Nat)) ((cubes (cubes _qv_45))=_qv_45))
	(forall ((Nat) (Nat) (Nat)) ((mult _qv_46 (plus _qv_47 _qv_48))=(plus (mult _qv_46 _qv_47) (mult _qv_46 _qv_48))))
	(forall ((Nat) (Nat) (Nat)) ((plus _qv_49 (mult _qv_50 _qv_51))=(mult (plus _qv_49 _qv_50) (plus _qv_49 _qv_51))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_52 _qv_53))=(plus (succ _qv_52) (succ _qv_53))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_52 _qv_53))=(plus (succ _qv_53) (succ _qv_52))))
	(forall ((Nat) (Nat)) ((succ (mult _qv_54 _qv_55))=(mult (succ _qv_54) (succ _qv_55))))
	(forall ((Nat) (Nat)) ((succ (mult _qv_54 _qv_55))=(mult (succ _qv_55) (succ _qv_54))))
	(forall ((Nat) (Nat)) ((tri (plus _qv_56 _qv_57))=(plus (tri _qv_56) (tri _qv_57))))
	(forall ((Nat) (Nat)) ((tri (plus _qv_56 _qv_57))=(plus (tri _qv_57) (tri _qv_56))))
	(forall ((Nat) (Nat)) ((tri (mult _qv_58 _qv_59))=(mult (tri _qv_58) (tri _qv_59))))
	(forall ((Nat) (Nat)) ((tri (mult _qv_58 _qv_59))=(mult (tri _qv_59) (tri _qv_58))))
	(forall ((Nat) (Nat)) ((cubes (plus _qv_60 _qv_61))=(plus (cubes _qv_60) (cubes _qv_61))))
	(forall ((Nat) (Nat)) ((cubes (plus _qv_60 _qv_61))=(plus (cubes _qv_61) (cubes _qv_60))))
	(forall ((Nat) (Nat)) ((cubes (mult _qv_62 _qv_63))=(mult (cubes _qv_62) (cubes _qv_63))))
	(forall ((Nat) (Nat)) ((cubes (mult _qv_62 _qv_63))=(mult (cubes _qv_63) (cubes _qv_62))))

