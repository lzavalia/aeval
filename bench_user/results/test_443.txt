
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat) (Nat)) ((less _qv_0 _qv_1)=(less _qv_1 _qv_0)))

Simplified goal: (forall ((Nat) (Nat)) [||    [&&    !(less a b)    a=b    !(less b a)]    [&&    (less a b)    (less b a)    b=a]    (less b a)&&(!(less a b))    (less a b)&&(!(less b a))])


Base case:       [||    [&&    !(less zero _v_2)    zero=_v_2    !(less _v_2 zero)]    [&&    (less zero _v_2)    (less _v_2 zero)    _v_2=zero]    (less _v_2 zero)&&(!(less zero _v_2))    (less zero _v_2)&&(!(less _v_2 zero))]
{
  {
    ====================
    | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
    | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
    | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
    | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
    ====================
  }
  rewritten [2]: [||    [&&    !(less zero _v_2)    zero=_v_2    true]    [&&    (less zero _v_2)    (less _v_2 zero)    _v_2=zero]    (less zero _v_2)&&true    (!(less zero _v_2))&&(less _v_2 zero)]
  deciding: (less zero _v_2)
  {
    ====================
    | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
    | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
    | Assumptions [2]: (!(less zero _v_2))
    | Assumptions [3]: (forall ((Nat)) (!(less _qv_1 zero)))
    | Assumptions [4]: (forall ((Nat)) (less zero (succ _qv_2)))
    | Assumptions [5]: (!(less zero zero))
    ====================
  }
  current subgoal: [||    [&&    (less zero _v_2)    (less _v_2 zero)    _v_2=zero]    (!(less zero _v_2))&&(less _v_2 zero)    (!(less zero _v_2))&&(zero=_v_2)]
  {
    deciding: [&&    (less zero _v_2)    (less _v_2 zero)    _v_2=zero]
    {
      ====================
      | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
      | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
      | Assumptions [2]: (!(less zero _v_2))
      | Assumptions [3]: (forall ((Nat)) (!(less _qv_1 zero)))
      | Assumptions [4]: (forall ((Nat)) (less zero (succ _qv_2)))
      | Assumptions [5]: (!(less zero zero))
      | Assumptions [6]: [||    !(less zero _v_2)    !(less _v_2 zero)    _v_2!=zero]
      ====================
    }
    current subgoal: (((!(less zero _v_2))&&(less _v_2 zero))||((!(less zero _v_2))&&(zero=_v_2)))
    {
      split for (part 1/3): (!(less zero _v_2))
      {
        {
          ====================
          | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
          | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
          | Assumptions [2]: (!(less zero _v_2))
          | Assumptions [3]: (forall ((Nat)) (!(less _qv_1 zero)))
          | Assumptions [4]: (forall ((Nat)) (less zero (succ _qv_2)))
          | Assumptions [5]: (!(less zero zero))
          ====================
        }
        deciding: ((!(less zero _v_2))&&(less _v_2 zero))
        {
          ====================
          | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
          | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
          | Assumptions [2]: (!(less zero _v_2))
          | Assumptions [3]: (!(less _v_2 zero))
          | Assumptions [4]: (forall ((Nat)) (!(less _qv_1 zero)))
          | Assumptions [5]: (forall ((Nat)) (less zero (succ _qv_2)))
          | Assumptions [6]: (!(less zero zero))
          | Assumptions [7]: ((less zero _v_2)||(!(less _v_2 zero)))
          ====================
        }
        current subgoal: ((!(less zero _v_2))&&(zero=_v_2))
        {
          proceed with (part 1/2): (!(less zero _v_2))
          {
              proven trivially (with Z3)
          }
          adding (!(less zero _v_2)) to assumptions
          proceed with (part 2/2): (zero=_v_2)
          {
            split for (part 1/2): (less zero _v_2)
            {
              inconsistent assumptions: (!(less zero _v_2)) and (less zero _v_2)
            }
            split for (part 2/2): (!(less _v_2 zero))
            {
              {
                ====================
                | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
                | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
                | Assumptions [2]: (!(less zero _v_2))
                | Assumptions [3]: (!(less _v_2 zero))
                | Assumptions [4]: (forall ((Nat)) (!(less _qv_1 zero)))
                | Assumptions [5]: (forall ((Nat)) (less zero (succ _qv_2)))
                | Assumptions [6]: (!(less zero zero))
                ====================
              }
            }
            unable to succeed
          }
          will try subgoals again
          proceed with (part 1/1): (zero=_v_2)
          {
            split for (part 1/2): (less zero _v_2)
            {
              inconsistent assumptions: (!(less zero _v_2)) and (less zero _v_2)
            }
            split for (part 2/2): (!(less _v_2 zero))
            {
              {
                ====================
                | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
                | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
                | Assumptions [2]: (!(less zero _v_2))
                | Assumptions [3]: (!(less _v_2 zero))
                | Assumptions [4]: (forall ((Nat)) (!(less _qv_1 zero)))
                | Assumptions [5]: (forall ((Nat)) (less zero (succ _qv_2)))
                | Assumptions [6]: (!(less zero zero))
                ====================
              }
            }
            unable to succeed
          }
          cannot prove 1 of the subgoals
        }
      }
      unable to succeed
      deciding: ((!(less zero _v_2))&&(less _v_2 zero))
      {
        ====================
        | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
        | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
        | Assumptions [2]: (!(less zero _v_2))
        | Assumptions [3]: (!(less _v_2 zero))
        | Assumptions [4]: (forall ((Nat)) (!(less _qv_1 zero)))
        | Assumptions [5]: (forall ((Nat)) (less zero (succ _qv_2)))
        | Assumptions [6]: (!(less zero zero))
        | Assumptions [7]: [||    !(less zero _v_2)    !(less _v_2 zero)    _v_2!=zero]
        | Assumptions [8]: ((less zero _v_2)||(!(less _v_2 zero)))
        ====================
      }
      current subgoal: ((!(less zero _v_2))&&(zero=_v_2))
      {
        proceed with (part 1/2): (!(less zero _v_2))
        {
            proven trivially (with Z3)
        }
        adding (!(less zero _v_2)) to assumptions
        proceed with (part 2/2): (zero=_v_2)
        {
          split for (part 1/2): (less zero _v_2)
          {
            inconsistent assumptions: (!(less zero _v_2)) and (less zero _v_2)
          }
          split for (part 2/2): (!(less _v_2 zero))
          {
            {
              ====================
              | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
              | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
              | Assumptions [2]: (!(less zero _v_2))
              | Assumptions [3]: (!(less _v_2 zero))
              | Assumptions [4]: (forall ((Nat)) (!(less _qv_1 zero)))
              | Assumptions [5]: (forall ((Nat)) (less zero (succ _qv_2)))
              | Assumptions [6]: (!(less zero zero))
              | Assumptions [7]: [||    !(less zero _v_2)    !(less _v_2 zero)    _v_2!=zero]
              ====================
            }
            split for (part 1/3): (!(less zero _v_2))
            {
              {
                ====================
                | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
                | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
                | Assumptions [2]: (!(less zero _v_2))
                | Assumptions [3]: (!(less _v_2 zero))
                | Assumptions [4]: (forall ((Nat)) (!(less _qv_1 zero)))
                | Assumptions [5]: (forall ((Nat)) (less zero (succ _qv_2)))
                | Assumptions [6]: (!(less zero zero))
                ====================
              }
            }
            unable to succeed
          }
          unable to succeed
        }
        will try subgoals again
        proceed with (part 1/1): (zero=_v_2)
        {
          split for (part 1/2): (less zero _v_2)
          {
            inconsistent assumptions: (!(less zero _v_2)) and (less zero _v_2)
          }
          split for (part 2/2): (!(less _v_2 zero))
          {
            {
              ====================
              | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
              | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
              | Assumptions [2]: (!(less zero _v_2))
              | Assumptions [3]: (!(less _v_2 zero))
              | Assumptions [4]: (forall ((Nat)) (!(less _qv_1 zero)))
              | Assumptions [5]: (forall ((Nat)) (less zero (succ _qv_2)))
              | Assumptions [6]: (!(less zero zero))
              | Assumptions [7]: [||    !(less zero _v_2)    !(less _v_2 zero)    _v_2!=zero]
              ====================
            }
            split for (part 1/3): (!(less zero _v_2))
            {
              {
                ====================
                | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
                | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
                | Assumptions [2]: (!(less zero _v_2))
                | Assumptions [3]: (!(less _v_2 zero))
                | Assumptions [4]: (forall ((Nat)) (!(less _qv_1 zero)))
                | Assumptions [5]: (forall ((Nat)) (less zero (succ _qv_2)))
                | Assumptions [6]: (!(less zero zero))
                ====================
              }
            }
            unable to succeed
          }
          unable to succeed
        }
        cannot prove 1 of the subgoals
      }
    }
  }

The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat) (Nat)) ((less _qv_6 _qv_7)=(less _qv_7 _qv_6)))

  proven by induction: [||    [&&    !(less zero _v_2)    zero=_v_2    true]    [&&    (less zero _v_2)    (less _v_2 zero)    _v_2=zero]    (less zero _v_2)&&true    (!(less zero _v_2))&&(less _v_2 zero)]
}
Inductive step:  [||    [&&    !(less (succ _t_6) _v_2)    (succ _t_6)=_v_2    !(less _v_2 (succ _t_6))]    [&&    (less (succ _t_6) _v_2)    (less _v_2 (succ _t_6))    _v_2=(succ _t_6)]    (less _v_2 (succ _t_6))&&(!(less (succ _t_6) _v_2))    (less (succ _t_6) _v_2)&&(!(less _v_2 (succ _t_6)))]
{
  {
    ====================
    | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
    | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
    | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
    | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
    | Assumptions [4]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
    ====================
  }
  deciding: [&&    !(less (succ _t_6) _v_2)    (succ _t_6)=_v_2    !(less _v_2 (succ _t_6))]
  {
    ====================
    | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
    | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
    | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
    | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
    | Assumptions [4]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
    | Assumptions [5]: [||    (less (succ _t_6) _v_2)    (less _v_2 (succ _t_6))    (succ _t_6)!=_v_2]
    ====================
  }
  current subgoal: [||    [&&    (less (succ _t_6) _v_2)    (less _v_2 (succ _t_6))    _v_2=(succ _t_6)]    (less (succ _t_6) _v_2)&&(!(less _v_2 (succ _t_6)))    (!(less (succ _t_6) _v_2))&&(less _v_2 (succ _t_6))]
  {
    split for (part 1/3): (less (succ _t_6) _v_2)
    {
      {
        ====================
        | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
        | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
        | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
        | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
        | Assumptions [4]: (less (succ _t_6) _v_2)
        | Assumptions [5]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
        ====================
      }
      deciding: [&&    (less (succ _t_6) _v_2)    (less _v_2 (succ _t_6))    _v_2=(succ _t_6)]
      {
        ====================
        | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
        | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
        | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
        | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
        | Assumptions [4]: (less (succ _t_6) _v_2)
        | Assumptions [5]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
        | Assumptions [6]: [||    !(less (succ _t_6) _v_2)    !(less _v_2 (succ _t_6))    _v_2!=(succ _t_6)]
        | Assumptions [7]: ((!(less _v_2 (succ _t_6)))||(_v_2!=(succ _t_6)))
        ====================
      }
      current subgoal: (((less (succ _t_6) _v_2)&&(!(less _v_2 (succ _t_6))))||((!(less (succ _t_6) _v_2))&&(less _v_2 (succ _t_6))))
      {
        split for (part 1/3): (!(less (succ _t_6) _v_2))
        {
          inconsistent assumptions: (less (succ _t_6) _v_2) and (!(less (succ _t_6) _v_2))
        }
        split for (part 2/3): (!(less _v_2 (succ _t_6)))
        {
          {
            ====================
            | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
            | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
            | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
            | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
            | Assumptions [4]: (less (succ _t_6) _v_2)
            | Assumptions [5]: (!(less _v_2 (succ _t_6)))
            | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
            | Assumptions [7]: ((!(less _v_2 (succ _t_6)))||(_v_2!=(succ _t_6)))
            ====================
          }
          split for (part 1/2): (!(less _v_2 (succ _t_6)))
          {
            {
              ====================
              | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
              | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
              | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
              | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
              | Assumptions [4]: (less (succ _t_6) _v_2)
              | Assumptions [5]: (!(less _v_2 (succ _t_6)))
              | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
              ====================
            }
            deciding: ((less (succ _t_6) _v_2)&&(!(less _v_2 (succ _t_6))))
            inconsistent assumptions: (less (succ _t_6) _v_2) and (!(less (succ _t_6) _v_2))
          }
          split for (part 2/2): (_v_2!=(succ _t_6))
          {
            {
              ====================
              | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
              | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
              | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
              | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
              | Assumptions [4]: (less (succ _t_6) _v_2)
              | Assumptions [5]: (!(less _v_2 (succ _t_6)))
              | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
              | Assumptions [7]: (_v_2!=(succ _t_6))
              ====================
            }
            deciding: ((less (succ _t_6) _v_2)&&(!(less _v_2 (succ _t_6))))
            inconsistent assumptions: (less (succ _t_6) _v_2) and (!(less (succ _t_6) _v_2))
          }
          splitting succeeded
        }
        split for (part 3/3): (_v_2!=(succ _t_6))
        {
          {
            ====================
            | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
            | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
            | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
            | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
            | Assumptions [4]: (less (succ _t_6) _v_2)
            | Assumptions [5]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
            | Assumptions [6]: (_v_2!=(succ _t_6))
            | Assumptions [7]: ((!(less _v_2 (succ _t_6)))||(_v_2!=(succ _t_6)))
            ====================
          }
          split for (part 1/2): (!(less _v_2 (succ _t_6)))
          {
            {
              ====================
              | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
              | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
              | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
              | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
              | Assumptions [4]: (less (succ _t_6) _v_2)
              | Assumptions [5]: (!(less _v_2 (succ _t_6)))
              | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
              | Assumptions [7]: (_v_2!=(succ _t_6))
              ====================
            }
            deciding: ((less (succ _t_6) _v_2)&&(!(less _v_2 (succ _t_6))))
            inconsistent assumptions: (less (succ _t_6) _v_2) and (!(less (succ _t_6) _v_2))
          }
          split for (part 2/2): (_v_2!=(succ _t_6))
          {
            {
              ====================
              | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
              | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
              | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
              | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
              | Assumptions [4]: (less (succ _t_6) _v_2)
              | Assumptions [5]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
              | Assumptions [6]: (_v_2!=(succ _t_6))
              ====================
            }
            deciding: ((less (succ _t_6) _v_2)&&(!(less _v_2 (succ _t_6))))
            {
              ====================
              | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
              | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
              | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
              | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
              | Assumptions [4]: (less (succ _t_6) _v_2)
              | Assumptions [5]: (less _v_2 (succ _t_6))
              | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
              | Assumptions [7]: (_v_2!=(succ _t_6))
              | Assumptions [8]: ((!(less (succ _t_6) _v_2))||(less _v_2 (succ _t_6)))
              ====================
            }
            current subgoal: ((!(less (succ _t_6) _v_2))&&(less _v_2 (succ _t_6)))
            {
              proceed with (part 1/2): (!(less (succ _t_6) _v_2))
              {
                split for (part 1/2): (!(less (succ _t_6) _v_2))
                {
                  inconsistent assumptions: (less (succ _t_6) _v_2) and (!(less (succ _t_6) _v_2))
                }
                split for (part 2/2): (less _v_2 (succ _t_6))
                {
                  {
                    ====================
                    | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
                    | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
                    | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
                    | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
                    | Assumptions [4]: (less (succ _t_6) _v_2)
                    | Assumptions [5]: (less _v_2 (succ _t_6))
                    | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
                    | Assumptions [7]: (_v_2!=(succ _t_6))
                    ====================
                  }
                }
                unable to succeed
              }
              proceed with (part 2/2): (less _v_2 (succ _t_6))
              {
                  proven trivially (with Z3)
              }
              adding (less _v_2 (succ _t_6)) to assumptions
              will try subgoals again
              proceed with (part 1/1): (!(less (succ _t_6) _v_2))
              {
                split for (part 1/2): (!(less (succ _t_6) _v_2))
                {
                  inconsistent assumptions: (less (succ _t_6) _v_2) and (!(less (succ _t_6) _v_2))
                }
                split for (part 2/2): (less _v_2 (succ _t_6))
                {
                  {
                    ====================
                    | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
                    | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
                    | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
                    | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
                    | Assumptions [4]: (less (succ _t_6) _v_2)
                    | Assumptions [5]: (less _v_2 (succ _t_6))
                    | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
                    | Assumptions [7]: (_v_2!=(succ _t_6))
                    ====================
                  }
                }
                unable to succeed
              }
              cannot prove 1 of the subgoals
            }
          }
          unable to succeed
          deciding: ((less (succ _t_6) _v_2)&&(!(less _v_2 (succ _t_6))))
          {
            ====================
            | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
            | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
            | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
            | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
            | Assumptions [4]: (less (succ _t_6) _v_2)
            | Assumptions [5]: (less _v_2 (succ _t_6))
            | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
            | Assumptions [7]: (_v_2!=(succ _t_6))
            | Assumptions [8]: ((!(less _v_2 (succ _t_6)))||(_v_2!=(succ _t_6)))
            | Assumptions [9]: ((!(less (succ _t_6) _v_2))||(less _v_2 (succ _t_6)))
            ====================
          }
          current subgoal: ((!(less (succ _t_6) _v_2))&&(less _v_2 (succ _t_6)))
          {
            proceed with (part 1/2): (!(less (succ _t_6) _v_2))
            {
              split for (part 1/2): (!(less (succ _t_6) _v_2))
              {
                inconsistent assumptions: (less (succ _t_6) _v_2) and (!(less (succ _t_6) _v_2))
              }
              split for (part 2/2): (less _v_2 (succ _t_6))
              {
                {
                  ====================
                  | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
                  | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
                  | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
                  | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
                  | Assumptions [4]: (less (succ _t_6) _v_2)
                  | Assumptions [5]: (less _v_2 (succ _t_6))
                  | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
                  | Assumptions [7]: (_v_2!=(succ _t_6))
                  | Assumptions [8]: ((!(less _v_2 (succ _t_6)))||(_v_2!=(succ _t_6)))
                  ====================
                }
                split for (part 1/2): (!(less _v_2 (succ _t_6)))
                {
                  inconsistent assumptions: (less _v_2 (succ _t_6)) and (!(less _v_2 (succ _t_6)))
                }
                split for (part 2/2): (_v_2!=(succ _t_6))
                {
                  {
                    ====================
                    | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
                    | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
                    | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
                    | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
                    | Assumptions [4]: (less (succ _t_6) _v_2)
                    | Assumptions [5]: (less _v_2 (succ _t_6))
                    | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
                    | Assumptions [7]: (_v_2!=(succ _t_6))
                    ====================
                  }
                }
                unable to succeed
              }
              unable to succeed
            }
            proceed with (part 2/2): (less _v_2 (succ _t_6))
            {
                proven trivially (with Z3)
            }
            adding (less _v_2 (succ _t_6)) to assumptions
            will try subgoals again
            proceed with (part 1/1): (!(less (succ _t_6) _v_2))
            {
              split for (part 1/2): (!(less (succ _t_6) _v_2))
              {
                inconsistent assumptions: (less (succ _t_6) _v_2) and (!(less (succ _t_6) _v_2))
              }
              split for (part 2/2): (less _v_2 (succ _t_6))
              {
                {
                  ====================
                  | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
                  | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
                  | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
                  | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
                  | Assumptions [4]: (less (succ _t_6) _v_2)
                  | Assumptions [5]: (less _v_2 (succ _t_6))
                  | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
                  | Assumptions [7]: (_v_2!=(succ _t_6))
                  | Assumptions [8]: ((!(less _v_2 (succ _t_6)))||(_v_2!=(succ _t_6)))
                  ====================
                }
                split for (part 1/2): (!(less _v_2 (succ _t_6)))
                {
                  inconsistent assumptions: (less _v_2 (succ _t_6)) and (!(less _v_2 (succ _t_6)))
                }
                split for (part 2/2): (_v_2!=(succ _t_6))
                {
                  {
                    ====================
                    | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
                    | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
                    | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
                    | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
                    | Assumptions [4]: (less (succ _t_6) _v_2)
                    | Assumptions [5]: (less _v_2 (succ _t_6))
                    | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
                    | Assumptions [7]: (_v_2!=(succ _t_6))
                    ====================
                  }
                }
                unable to succeed
              }
              unable to succeed
            }
            cannot prove 1 of the subgoals
          }
        }
        unable to succeed
        deciding: ((less (succ _t_6) _v_2)&&(!(less _v_2 (succ _t_6))))
        {
          ====================
          | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
          | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
          | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
          | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
          | Assumptions [4]: (less (succ _t_6) _v_2)
          | Assumptions [5]: (less _v_2 (succ _t_6))
          | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
          | Assumptions [7]: (_v_2!=(succ _t_6))
          | Assumptions [8]: [||    !(less (succ _t_6) _v_2)    !(less _v_2 (succ _t_6))    _v_2!=(succ _t_6)]
          | Assumptions [9]: ((!(less _v_2 (succ _t_6)))||(_v_2!=(succ _t_6)))
          | Assumptions [10]: ((!(less (succ _t_6) _v_2))||(less _v_2 (succ _t_6)))
          | Assumptions [11]: ((!(less (succ _t_6) _v_2))||(_v_2!=(succ _t_6)))
          ====================
        }
        current subgoal: ((!(less (succ _t_6) _v_2))&&(less _v_2 (succ _t_6)))
        {
          proceed with (part 1/2): (!(less (succ _t_6) _v_2))
          {
            split for (part 1/2): (!(less (succ _t_6) _v_2))
            {
              inconsistent assumptions: (less (succ _t_6) _v_2) and (!(less (succ _t_6) _v_2))
            }
            split for (part 2/2): (less _v_2 (succ _t_6))
            {
              {
                ====================
                | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
                | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
                | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
                | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
                | Assumptions [4]: (less (succ _t_6) _v_2)
                | Assumptions [5]: (less _v_2 (succ _t_6))
                | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
                | Assumptions [7]: (_v_2!=(succ _t_6))
                | Assumptions [8]: [||    !(less (succ _t_6) _v_2)    !(less _v_2 (succ _t_6))    _v_2!=(succ _t_6)]
                | Assumptions [9]: ((!(less _v_2 (succ _t_6)))||(_v_2!=(succ _t_6)))
                | Assumptions [10]: ((!(less (succ _t_6) _v_2))||(_v_2!=(succ _t_6)))
                ====================
              }
              split for (part 1/3): (!(less (succ _t_6) _v_2))
              {
                inconsistent assumptions: (less (succ _t_6) _v_2) and (!(less (succ _t_6) _v_2))
              }
              split for (part 2/3): (!(less _v_2 (succ _t_6)))
              {
                inconsistent assumptions: (less _v_2 (succ _t_6)) and (!(less _v_2 (succ _t_6)))
              }
              split for (part 3/3): (_v_2!=(succ _t_6))
              {
                {
                  ====================
                  | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
                  | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
                  | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
                  | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
                  | Assumptions [4]: (less (succ _t_6) _v_2)
                  | Assumptions [5]: (less _v_2 (succ _t_6))
                  | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
                  | Assumptions [7]: (_v_2!=(succ _t_6))
                  | Assumptions [8]: ((!(less _v_2 (succ _t_6)))||(_v_2!=(succ _t_6)))
                  | Assumptions [9]: ((!(less (succ _t_6) _v_2))||(_v_2!=(succ _t_6)))
                  ====================
                }
                split for (part 1/2): (!(less (succ _t_6) _v_2))
                {
                  inconsistent assumptions: (less (succ _t_6) _v_2) and (!(less (succ _t_6) _v_2))
                }
                split for (part 2/2): (_v_2!=(succ _t_6))
                {
                  {
                    ====================
                    | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
                    | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
                    | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
                    | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
                    | Assumptions [4]: (less (succ _t_6) _v_2)
                    | Assumptions [5]: (less _v_2 (succ _t_6))
                    | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
                    | Assumptions [7]: (_v_2!=(succ _t_6))
                    | Assumptions [8]: ((!(less _v_2 (succ _t_6)))||(_v_2!=(succ _t_6)))
                    ====================
                  }
                  split for (part 1/2): (!(less _v_2 (succ _t_6)))
                  {
                    inconsistent assumptions: (less _v_2 (succ _t_6)) and (!(less _v_2 (succ _t_6)))
                  }
                  split for (part 2/2): (_v_2!=(succ _t_6))
                  {
                    {
                      ====================
                      | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
                      | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
                      | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
                      | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
                      | Assumptions [4]: (less (succ _t_6) _v_2)
                      | Assumptions [5]: (less _v_2 (succ _t_6))
                      | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
                      | Assumptions [7]: (_v_2!=(succ _t_6))
                      ====================
                    }
                  }
                  unable to succeed
                }
                unable to succeed
              }
              unable to succeed
            }
            unable to succeed
          }
          proceed with (part 2/2): (less _v_2 (succ _t_6))
          {
              proven trivially (with Z3)
          }
          adding (less _v_2 (succ _t_6)) to assumptions
          will try subgoals again
          proceed with (part 1/1): (!(less (succ _t_6) _v_2))
          {
            split for (part 1/2): (!(less (succ _t_6) _v_2))
            {
              inconsistent assumptions: (less (succ _t_6) _v_2) and (!(less (succ _t_6) _v_2))
            }
            split for (part 2/2): (less _v_2 (succ _t_6))
            {
              {
                ====================
                | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
                | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
                | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
                | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
                | Assumptions [4]: (less (succ _t_6) _v_2)
                | Assumptions [5]: (less _v_2 (succ _t_6))
                | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
                | Assumptions [7]: (_v_2!=(succ _t_6))
                | Assumptions [8]: [||    !(less (succ _t_6) _v_2)    !(less _v_2 (succ _t_6))    _v_2!=(succ _t_6)]
                | Assumptions [9]: ((!(less _v_2 (succ _t_6)))||(_v_2!=(succ _t_6)))
                | Assumptions [10]: ((!(less (succ _t_6) _v_2))||(_v_2!=(succ _t_6)))
                ====================
              }
              split for (part 1/3): (!(less (succ _t_6) _v_2))
              {
                inconsistent assumptions: (less (succ _t_6) _v_2) and (!(less (succ _t_6) _v_2))
              }
              split for (part 2/3): (!(less _v_2 (succ _t_6)))
              {
                inconsistent assumptions: (less _v_2 (succ _t_6)) and (!(less _v_2 (succ _t_6)))
              }
              split for (part 3/3): (_v_2!=(succ _t_6))
              {
                {
                  ====================
                  | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
                  | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
                  | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
                  | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
                  | Assumptions [4]: (less (succ _t_6) _v_2)
                  | Assumptions [5]: (less _v_2 (succ _t_6))
                  | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
                  | Assumptions [7]: (_v_2!=(succ _t_6))
                  | Assumptions [8]: ((!(less _v_2 (succ _t_6)))||(_v_2!=(succ _t_6)))
                  | Assumptions [9]: ((!(less (succ _t_6) _v_2))||(_v_2!=(succ _t_6)))
                  ====================
                }
                split for (part 1/2): (!(less (succ _t_6) _v_2))
                {
                  inconsistent assumptions: (less (succ _t_6) _v_2) and (!(less (succ _t_6) _v_2))
                }
                split for (part 2/2): (_v_2!=(succ _t_6))
                {
                  {
                    ====================
                    | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
                    | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
                    | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
                    | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
                    | Assumptions [4]: (less (succ _t_6) _v_2)
                    | Assumptions [5]: (less _v_2 (succ _t_6))
                    | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
                    | Assumptions [7]: (_v_2!=(succ _t_6))
                    | Assumptions [8]: ((!(less _v_2 (succ _t_6)))||(_v_2!=(succ _t_6)))
                    ====================
                  }
                  split for (part 1/2): (!(less _v_2 (succ _t_6)))
                  {
                    inconsistent assumptions: (less _v_2 (succ _t_6)) and (!(less _v_2 (succ _t_6)))
                  }
                  split for (part 2/2): (_v_2!=(succ _t_6))
                  {
                    {
                      ====================
                      | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
                      | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
                      | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
                      | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
                      | Assumptions [4]: (less (succ _t_6) _v_2)
                      | Assumptions [5]: (less _v_2 (succ _t_6))
                      | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
                      | Assumptions [7]: (_v_2!=(succ _t_6))
                      ====================
                    }
                  }
                  unable to succeed
                }
                unable to succeed
              }
              unable to succeed
            }
            unable to succeed
          }
          cannot prove 1 of the subgoals
        }
      }
    }
    unable to succeed
    deciding: [&&    (less (succ _t_6) _v_2)    (less _v_2 (succ _t_6))    _v_2=(succ _t_6)]
    {
      ====================
      | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
      | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
      | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
      | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
      | Assumptions [4]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
      | Assumptions [5]: [||    (less (succ _t_6) _v_2)    (less _v_2 (succ _t_6))    (succ _t_6)!=_v_2]
      | Assumptions [6]: [||    !(less (succ _t_6) _v_2)    !(less _v_2 (succ _t_6))    _v_2!=(succ _t_6)]
      ====================
    }
    current subgoal: (((less (succ _t_6) _v_2)&&(!(less _v_2 (succ _t_6))))||((!(less (succ _t_6) _v_2))&&(less _v_2 (succ _t_6))))
    {
      split for (part 1/3): (less (succ _t_6) _v_2)
      {
        {
          ====================
          | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
          | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
          | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
          | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
          | Assumptions [4]: (less (succ _t_6) _v_2)
          | Assumptions [5]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
          | Assumptions [6]: [||    !(less (succ _t_6) _v_2)    !(less _v_2 (succ _t_6))    _v_2!=(succ _t_6)]
          | Assumptions [7]: ((!(less _v_2 (succ _t_6)))||(_v_2!=(succ _t_6)))
          ====================
        }
        split for (part 1/3): (!(less (succ _t_6) _v_2))
        {
          inconsistent assumptions: (less (succ _t_6) _v_2) and (!(less (succ _t_6) _v_2))
        }
        split for (part 2/3): (!(less _v_2 (succ _t_6)))
        {
          {
            ====================
            | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
            | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
            | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
            | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
            | Assumptions [4]: (less (succ _t_6) _v_2)
            | Assumptions [5]: (!(less _v_2 (succ _t_6)))
            | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
            | Assumptions [7]: ((!(less _v_2 (succ _t_6)))||(_v_2!=(succ _t_6)))
            ====================
          }
          split for (part 1/2): (!(less _v_2 (succ _t_6)))
          {
            {
              ====================
              | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
              | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
              | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
              | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
              | Assumptions [4]: (less (succ _t_6) _v_2)
              | Assumptions [5]: (!(less _v_2 (succ _t_6)))
              | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
              ====================
            }
            deciding: ((less (succ _t_6) _v_2)&&(!(less _v_2 (succ _t_6))))
            inconsistent assumptions: (less (succ _t_6) _v_2) and (!(less (succ _t_6) _v_2))
          }
          split for (part 2/2): (_v_2!=(succ _t_6))
          {
            {
              ====================
              | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
              | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
              | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
              | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
              | Assumptions [4]: (less (succ _t_6) _v_2)
              | Assumptions [5]: (!(less _v_2 (succ _t_6)))
              | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
              | Assumptions [7]: (_v_2!=(succ _t_6))
              ====================
            }
            deciding: ((less (succ _t_6) _v_2)&&(!(less _v_2 (succ _t_6))))
            inconsistent assumptions: (less (succ _t_6) _v_2) and (!(less (succ _t_6) _v_2))
          }
          splitting succeeded
        }
        split for (part 3/3): (_v_2!=(succ _t_6))
        {
          {
            ====================
            | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
            | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
            | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
            | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
            | Assumptions [4]: (less (succ _t_6) _v_2)
            | Assumptions [5]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
            | Assumptions [6]: (_v_2!=(succ _t_6))
            | Assumptions [7]: ((!(less _v_2 (succ _t_6)))||(_v_2!=(succ _t_6)))
            ====================
          }
          split for (part 1/2): (!(less _v_2 (succ _t_6)))
          {
            {
              ====================
              | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
              | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
              | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
              | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
              | Assumptions [4]: (less (succ _t_6) _v_2)
              | Assumptions [5]: (!(less _v_2 (succ _t_6)))
              | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
              | Assumptions [7]: (_v_2!=(succ _t_6))
              ====================
            }
            deciding: ((less (succ _t_6) _v_2)&&(!(less _v_2 (succ _t_6))))
            inconsistent assumptions: (less (succ _t_6) _v_2) and (!(less (succ _t_6) _v_2))
          }
          split for (part 2/2): (_v_2!=(succ _t_6))
          {
            {
              ====================
              | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
              | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
              | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
              | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
              | Assumptions [4]: (less (succ _t_6) _v_2)
              | Assumptions [5]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
              | Assumptions [6]: (_v_2!=(succ _t_6))
              ====================
            }
            deciding: ((less (succ _t_6) _v_2)&&(!(less _v_2 (succ _t_6))))
            {
              ====================
              | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
              | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
              | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
              | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
              | Assumptions [4]: (less (succ _t_6) _v_2)
              | Assumptions [5]: (less _v_2 (succ _t_6))
              | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
              | Assumptions [7]: (_v_2!=(succ _t_6))
              | Assumptions [8]: ((!(less (succ _t_6) _v_2))||(less _v_2 (succ _t_6)))
              ====================
            }
            current subgoal: ((!(less (succ _t_6) _v_2))&&(less _v_2 (succ _t_6)))
            {
              proceed with (part 1/2): (!(less (succ _t_6) _v_2))
              {
                split for (part 1/2): (!(less (succ _t_6) _v_2))
                {
                  inconsistent assumptions: (less (succ _t_6) _v_2) and (!(less (succ _t_6) _v_2))
                }
                split for (part 2/2): (less _v_2 (succ _t_6))
                {
                  {
                    ====================
                    | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
                    | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
                    | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
                    | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
                    | Assumptions [4]: (less (succ _t_6) _v_2)
                    | Assumptions [5]: (less _v_2 (succ _t_6))
                    | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
                    | Assumptions [7]: (_v_2!=(succ _t_6))
                    ====================
                  }
                }
                unable to succeed
              }
              proceed with (part 2/2): (less _v_2 (succ _t_6))
              {
                  proven trivially (with Z3)
              }
              adding (less _v_2 (succ _t_6)) to assumptions
              will try subgoals again
              proceed with (part 1/1): (!(less (succ _t_6) _v_2))
              {
                split for (part 1/2): (!(less (succ _t_6) _v_2))
                {
                  inconsistent assumptions: (less (succ _t_6) _v_2) and (!(less (succ _t_6) _v_2))
                }
                split for (part 2/2): (less _v_2 (succ _t_6))
                {
                  {
                    ====================
                    | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
                    | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
                    | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
                    | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
                    | Assumptions [4]: (less (succ _t_6) _v_2)
                    | Assumptions [5]: (less _v_2 (succ _t_6))
                    | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
                    | Assumptions [7]: (_v_2!=(succ _t_6))
                    ====================
                  }
                }
                unable to succeed
              }
              cannot prove 1 of the subgoals
            }
          }
          unable to succeed
          deciding: ((less (succ _t_6) _v_2)&&(!(less _v_2 (succ _t_6))))
          {
            ====================
            | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
            | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
            | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
            | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
            | Assumptions [4]: (less (succ _t_6) _v_2)
            | Assumptions [5]: (less _v_2 (succ _t_6))
            | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
            | Assumptions [7]: (_v_2!=(succ _t_6))
            | Assumptions [8]: ((!(less _v_2 (succ _t_6)))||(_v_2!=(succ _t_6)))
            | Assumptions [9]: ((!(less (succ _t_6) _v_2))||(less _v_2 (succ _t_6)))
            ====================
          }
          current subgoal: ((!(less (succ _t_6) _v_2))&&(less _v_2 (succ _t_6)))
          {
            proceed with (part 1/2): (!(less (succ _t_6) _v_2))
            {
              split for (part 1/2): (!(less (succ _t_6) _v_2))
              {
                inconsistent assumptions: (less (succ _t_6) _v_2) and (!(less (succ _t_6) _v_2))
              }
              split for (part 2/2): (less _v_2 (succ _t_6))
              {
                {
                  ====================
                  | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
                  | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
                  | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
                  | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
                  | Assumptions [4]: (less (succ _t_6) _v_2)
                  | Assumptions [5]: (less _v_2 (succ _t_6))
                  | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
                  | Assumptions [7]: (_v_2!=(succ _t_6))
                  | Assumptions [8]: ((!(less _v_2 (succ _t_6)))||(_v_2!=(succ _t_6)))
                  ====================
                }
                split for (part 1/2): (!(less _v_2 (succ _t_6)))
                {
                  inconsistent assumptions: (less _v_2 (succ _t_6)) and (!(less _v_2 (succ _t_6)))
                }
                split for (part 2/2): (_v_2!=(succ _t_6))
                {
                  {
                    ====================
                    | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
                    | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
                    | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
                    | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
                    | Assumptions [4]: (less (succ _t_6) _v_2)
                    | Assumptions [5]: (less _v_2 (succ _t_6))
                    | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
                    | Assumptions [7]: (_v_2!=(succ _t_6))
                    ====================
                  }
                }
                unable to succeed
              }
              unable to succeed
            }
            proceed with (part 2/2): (less _v_2 (succ _t_6))
            {
                proven trivially (with Z3)
            }
            adding (less _v_2 (succ _t_6)) to assumptions
            will try subgoals again
            proceed with (part 1/1): (!(less (succ _t_6) _v_2))
            {
              split for (part 1/2): (!(less (succ _t_6) _v_2))
              {
                inconsistent assumptions: (less (succ _t_6) _v_2) and (!(less (succ _t_6) _v_2))
              }
              split for (part 2/2): (less _v_2 (succ _t_6))
              {
                {
                  ====================
                  | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
                  | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
                  | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
                  | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
                  | Assumptions [4]: (less (succ _t_6) _v_2)
                  | Assumptions [5]: (less _v_2 (succ _t_6))
                  | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
                  | Assumptions [7]: (_v_2!=(succ _t_6))
                  | Assumptions [8]: ((!(less _v_2 (succ _t_6)))||(_v_2!=(succ _t_6)))
                  ====================
                }
                split for (part 1/2): (!(less _v_2 (succ _t_6)))
                {
                  inconsistent assumptions: (less _v_2 (succ _t_6)) and (!(less _v_2 (succ _t_6)))
                }
                split for (part 2/2): (_v_2!=(succ _t_6))
                {
                  {
                    ====================
                    | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
                    | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
                    | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
                    | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
                    | Assumptions [4]: (less (succ _t_6) _v_2)
                    | Assumptions [5]: (less _v_2 (succ _t_6))
                    | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
                    | Assumptions [7]: (_v_2!=(succ _t_6))
                    ====================
                  }
                }
                unable to succeed
              }
              unable to succeed
            }
            cannot prove 1 of the subgoals
          }
        }
        unable to succeed
        deciding: ((less (succ _t_6) _v_2)&&(!(less _v_2 (succ _t_6))))
        {
          ====================
          | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
          | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
          | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
          | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
          | Assumptions [4]: (less (succ _t_6) _v_2)
          | Assumptions [5]: (less _v_2 (succ _t_6))
          | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
          | Assumptions [7]: (_v_2!=(succ _t_6))
          | Assumptions [8]: [||    !(less (succ _t_6) _v_2)    !(less _v_2 (succ _t_6))    _v_2!=(succ _t_6)]
          | Assumptions [9]: ((!(less _v_2 (succ _t_6)))||(_v_2!=(succ _t_6)))
          | Assumptions [10]: ((!(less (succ _t_6) _v_2))||(less _v_2 (succ _t_6)))
          | Assumptions [11]: ((!(less (succ _t_6) _v_2))||(_v_2!=(succ _t_6)))
          ====================
        }
        current subgoal: ((!(less (succ _t_6) _v_2))&&(less _v_2 (succ _t_6)))
        {
          proceed with (part 1/2): (!(less (succ _t_6) _v_2))
          {
            split for (part 1/2): (!(less (succ _t_6) _v_2))
            {
              inconsistent assumptions: (less (succ _t_6) _v_2) and (!(less (succ _t_6) _v_2))
            }
            split for (part 2/2): (less _v_2 (succ _t_6))
            {
              {
                ====================
                | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
                | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
                | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
                | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
                | Assumptions [4]: (less (succ _t_6) _v_2)
                | Assumptions [5]: (less _v_2 (succ _t_6))
                | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
                | Assumptions [7]: (_v_2!=(succ _t_6))
                | Assumptions [8]: [||    !(less (succ _t_6) _v_2)    !(less _v_2 (succ _t_6))    _v_2!=(succ _t_6)]
                | Assumptions [9]: ((!(less _v_2 (succ _t_6)))||(_v_2!=(succ _t_6)))
                | Assumptions [10]: ((!(less (succ _t_6) _v_2))||(_v_2!=(succ _t_6)))
                ====================
              }
              split for (part 1/3): (!(less (succ _t_6) _v_2))
              {
                inconsistent assumptions: (less (succ _t_6) _v_2) and (!(less (succ _t_6) _v_2))
              }
              split for (part 2/3): (!(less _v_2 (succ _t_6)))
              {
                inconsistent assumptions: (less _v_2 (succ _t_6)) and (!(less _v_2 (succ _t_6)))
              }
              split for (part 3/3): (_v_2!=(succ _t_6))
              {
                {
                  ====================
                  | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
                  | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
                  | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
                  | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
                  | Assumptions [4]: (less (succ _t_6) _v_2)
                  | Assumptions [5]: (less _v_2 (succ _t_6))
                  | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
                  | Assumptions [7]: (_v_2!=(succ _t_6))
                  | Assumptions [8]: ((!(less _v_2 (succ _t_6)))||(_v_2!=(succ _t_6)))
                  | Assumptions [9]: ((!(less (succ _t_6) _v_2))||(_v_2!=(succ _t_6)))
                  ====================
                }
                split for (part 1/2): (!(less (succ _t_6) _v_2))
                {
                  inconsistent assumptions: (less (succ _t_6) _v_2) and (!(less (succ _t_6) _v_2))
                }
                split for (part 2/2): (_v_2!=(succ _t_6))
                {
                  {
                    ====================
                    | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
                    | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
                    | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
                    | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
                    | Assumptions [4]: (less (succ _t_6) _v_2)
                    | Assumptions [5]: (less _v_2 (succ _t_6))
                    | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
                    | Assumptions [7]: (_v_2!=(succ _t_6))
                    | Assumptions [8]: ((!(less _v_2 (succ _t_6)))||(_v_2!=(succ _t_6)))
                    ====================
                  }
                  split for (part 1/2): (!(less _v_2 (succ _t_6)))
                  {
                    inconsistent assumptions: (less _v_2 (succ _t_6)) and (!(less _v_2 (succ _t_6)))
                  }
                  split for (part 2/2): (_v_2!=(succ _t_6))
                  {
                    {
                      ====================
                      | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
                      | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
                      | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
                      | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
                      | Assumptions [4]: (less (succ _t_6) _v_2)
                      | Assumptions [5]: (less _v_2 (succ _t_6))
                      | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
                      | Assumptions [7]: (_v_2!=(succ _t_6))
                      ====================
                    }
                  }
                  unable to succeed
                }
                unable to succeed
              }
              unable to succeed
            }
            unable to succeed
          }
          proceed with (part 2/2): (less _v_2 (succ _t_6))
          {
              proven trivially (with Z3)
          }
          adding (less _v_2 (succ _t_6)) to assumptions
          will try subgoals again
          proceed with (part 1/1): (!(less (succ _t_6) _v_2))
          {
            split for (part 1/2): (!(less (succ _t_6) _v_2))
            {
              inconsistent assumptions: (less (succ _t_6) _v_2) and (!(less (succ _t_6) _v_2))
            }
            split for (part 2/2): (less _v_2 (succ _t_6))
            {
              {
                ====================
                | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
                | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
                | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
                | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
                | Assumptions [4]: (less (succ _t_6) _v_2)
                | Assumptions [5]: (less _v_2 (succ _t_6))
                | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
                | Assumptions [7]: (_v_2!=(succ _t_6))
                | Assumptions [8]: [||    !(less (succ _t_6) _v_2)    !(less _v_2 (succ _t_6))    _v_2!=(succ _t_6)]
                | Assumptions [9]: ((!(less _v_2 (succ _t_6)))||(_v_2!=(succ _t_6)))
                | Assumptions [10]: ((!(less (succ _t_6) _v_2))||(_v_2!=(succ _t_6)))
                ====================
              }
              split for (part 1/3): (!(less (succ _t_6) _v_2))
              {
                inconsistent assumptions: (less (succ _t_6) _v_2) and (!(less (succ _t_6) _v_2))
              }
              split for (part 2/3): (!(less _v_2 (succ _t_6)))
              {
                inconsistent assumptions: (less _v_2 (succ _t_6)) and (!(less _v_2 (succ _t_6)))
              }
              split for (part 3/3): (_v_2!=(succ _t_6))
              {
                {
                  ====================
                  | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
                  | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
                  | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
                  | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
                  | Assumptions [4]: (less (succ _t_6) _v_2)
                  | Assumptions [5]: (less _v_2 (succ _t_6))
                  | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
                  | Assumptions [7]: (_v_2!=(succ _t_6))
                  | Assumptions [8]: ((!(less _v_2 (succ _t_6)))||(_v_2!=(succ _t_6)))
                  | Assumptions [9]: ((!(less (succ _t_6) _v_2))||(_v_2!=(succ _t_6)))
                  ====================
                }
                split for (part 1/2): (!(less (succ _t_6) _v_2))
                {
                  inconsistent assumptions: (less (succ _t_6) _v_2) and (!(less (succ _t_6) _v_2))
                }
                split for (part 2/2): (_v_2!=(succ _t_6))
                {
                  {
                    ====================
                    | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
                    | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
                    | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
                    | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
                    | Assumptions [4]: (less (succ _t_6) _v_2)
                    | Assumptions [5]: (less _v_2 (succ _t_6))
                    | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
                    | Assumptions [7]: (_v_2!=(succ _t_6))
                    | Assumptions [8]: ((!(less _v_2 (succ _t_6)))||(_v_2!=(succ _t_6)))
                    ====================
                  }
                  split for (part 1/2): (!(less _v_2 (succ _t_6)))
                  {
                    inconsistent assumptions: (less _v_2 (succ _t_6)) and (!(less _v_2 (succ _t_6)))
                  }
                  split for (part 2/2): (_v_2!=(succ _t_6))
                  {
                    {
                      ====================
                      | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
                      | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
                      | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
                      | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
                      | Assumptions [4]: (less (succ _t_6) _v_2)
                      | Assumptions [5]: (less _v_2 (succ _t_6))
                      | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
                      | Assumptions [7]: (_v_2!=(succ _t_6))
                      ====================
                    }
                  }
                  unable to succeed
                }
                unable to succeed
              }
              unable to succeed
            }
            unable to succeed
          }
          cannot prove 1 of the subgoals
        }
      }
      unable to succeed
      deciding: ((less (succ _t_6) _v_2)&&(!(less _v_2 (succ _t_6))))
      {
        ====================
        | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
        | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
        | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
        | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
        | Assumptions [4]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
        | Assumptions [5]: [||    (less (succ _t_6) _v_2)    (less _v_2 (succ _t_6))    (succ _t_6)!=_v_2]
        | Assumptions [6]: [||    !(less (succ _t_6) _v_2)    !(less _v_2 (succ _t_6))    _v_2!=(succ _t_6)]
        | Assumptions [7]: ((!(less (succ _t_6) _v_2))||(less _v_2 (succ _t_6)))
        ====================
      }
      current subgoal: ((!(less (succ _t_6) _v_2))&&(less _v_2 (succ _t_6)))
      {
        proceed with (part 1/2): (!(less (succ _t_6) _v_2))
        {
          split for (part 1/3): (less (succ _t_6) _v_2)
          {
            {
              ====================
              | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
              | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
              | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
              | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
              | Assumptions [4]: (less (succ _t_6) _v_2)
              | Assumptions [5]: (less _v_2 (succ _t_6))
              | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
              | Assumptions [7]: (_v_2!=(succ _t_6))
              | Assumptions [8]: [||    !(less (succ _t_6) _v_2)    !(less _v_2 (succ _t_6))    _v_2!=(succ _t_6)]
              | Assumptions [9]: ((!(less (succ _t_6) _v_2))||(less _v_2 (succ _t_6)))
              | Assumptions [10]: ((!(less _v_2 (succ _t_6)))||(_v_2!=(succ _t_6)))
              | Assumptions [11]: ((!(less (succ _t_6) _v_2))||(_v_2!=(succ _t_6)))
              ====================
            }
            split for (part 1/2): (!(less (succ _t_6) _v_2))
            {
              inconsistent assumptions: (less (succ _t_6) _v_2) and (!(less (succ _t_6) _v_2))
            }
            split for (part 2/2): (less _v_2 (succ _t_6))
            {
              {
                ====================
                | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
                | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
                | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
                | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
                | Assumptions [4]: (less (succ _t_6) _v_2)
                | Assumptions [5]: (less _v_2 (succ _t_6))
                | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
                | Assumptions [7]: (_v_2!=(succ _t_6))
                | Assumptions [8]: [||    !(less (succ _t_6) _v_2)    !(less _v_2 (succ _t_6))    _v_2!=(succ _t_6)]
                | Assumptions [9]: ((!(less _v_2 (succ _t_6)))||(_v_2!=(succ _t_6)))
                | Assumptions [10]: ((!(less (succ _t_6) _v_2))||(_v_2!=(succ _t_6)))
                ====================
              }
              split for (part 1/3): (!(less (succ _t_6) _v_2))
              {
                inconsistent assumptions: (less (succ _t_6) _v_2) and (!(less (succ _t_6) _v_2))
              }
              split for (part 2/3): (!(less _v_2 (succ _t_6)))
              {
                inconsistent assumptions: (less _v_2 (succ _t_6)) and (!(less _v_2 (succ _t_6)))
              }
              split for (part 3/3): (_v_2!=(succ _t_6))
              {
                {
                  ====================
                  | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
                  | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
                  | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
                  | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
                  | Assumptions [4]: (less (succ _t_6) _v_2)
                  | Assumptions [5]: (less _v_2 (succ _t_6))
                  | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
                  | Assumptions [7]: (_v_2!=(succ _t_6))
                  | Assumptions [8]: ((!(less _v_2 (succ _t_6)))||(_v_2!=(succ _t_6)))
                  | Assumptions [9]: ((!(less (succ _t_6) _v_2))||(_v_2!=(succ _t_6)))
                  ====================
                }
                split for (part 1/2): (!(less (succ _t_6) _v_2))
                {
                  inconsistent assumptions: (less (succ _t_6) _v_2) and (!(less (succ _t_6) _v_2))
                }
                split for (part 2/2): (_v_2!=(succ _t_6))
                {
                  {
                    ====================
                    | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
                    | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
                    | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
                    | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
                    | Assumptions [4]: (less (succ _t_6) _v_2)
                    | Assumptions [5]: (less _v_2 (succ _t_6))
                    | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
                    | Assumptions [7]: (_v_2!=(succ _t_6))
                    | Assumptions [8]: ((!(less _v_2 (succ _t_6)))||(_v_2!=(succ _t_6)))
                    ====================
                  }
                  split for (part 1/2): (!(less _v_2 (succ _t_6)))
                  {
                    inconsistent assumptions: (less _v_2 (succ _t_6)) and (!(less _v_2 (succ _t_6)))
                  }
                  split for (part 2/2): (_v_2!=(succ _t_6))
                  {
                    {
                      ====================
                      | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
                      | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
                      | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
                      | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
                      | Assumptions [4]: (less (succ _t_6) _v_2)
                      | Assumptions [5]: (less _v_2 (succ _t_6))
                      | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
                      | Assumptions [7]: (_v_2!=(succ _t_6))
                      ====================
                    }
                  }
                  unable to succeed
                }
                unable to succeed
              }
              unable to succeed
            }
            unable to succeed
          }
          unable to succeed
        }
        proceed with (part 2/2): (less _v_2 (succ _t_6))
        {
          split for (part 1/3): (less (succ _t_6) _v_2)
          {
            {
              ====================
              | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
              | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
              | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
              | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
              | Assumptions [4]: (less (succ _t_6) _v_2)
              | Assumptions [5]: (less _v_2 (succ _t_6))
              | Assumptions [6]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
              | Assumptions [7]: (_v_2!=(succ _t_6))
              | Assumptions [8]: [||    !(less (succ _t_6) _v_2)    !(less _v_2 (succ _t_6))    _v_2!=(succ _t_6)]
              | Assumptions [9]: ((!(less (succ _t_6) _v_2))||(less _v_2 (succ _t_6)))
              | Assumptions [10]: ((!(less _v_2 (succ _t_6)))||(_v_2!=(succ _t_6)))
              | Assumptions [11]: ((!(less (succ _t_6) _v_2))||(_v_2!=(succ _t_6)))
              ====================
            }
            rewriting [5] done
          }
          split for (part 2/3): (less _v_2 (succ _t_6))
          {
            {
              ====================
              | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
              | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
              | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
              | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
              | Assumptions [4]: (less _v_2 (succ _t_6))
              | Assumptions [5]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
              | Assumptions [6]: [||    !(less (succ _t_6) _v_2)    !(less _v_2 (succ _t_6))    _v_2!=(succ _t_6)]
              | Assumptions [7]: ((!(less (succ _t_6) _v_2))||(less _v_2 (succ _t_6)))
              | Assumptions [8]: ((!(less (succ _t_6) _v_2))||(_v_2!=(succ _t_6)))
              ====================
            }
            rewriting [4] done
          }
          split for (part 3/3): ((succ _t_6)!=_v_2)
          {
            {
              ====================
              | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
              | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
              | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
              | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
              | Assumptions [4]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
              | Assumptions [5]: ((succ _t_6)!=_v_2)
              | Assumptions [6]: [||    !(less (succ _t_6) _v_2)    !(less _v_2 (succ _t_6))    _v_2!=(succ _t_6)]
              | Assumptions [7]: ((!(less (succ _t_6) _v_2))||(less _v_2 (succ _t_6)))
              ====================
            }
            split for (part 1/2): (!(less (succ _t_6) _v_2))
            {
              {
                ====================
                | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
                | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
                | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
                | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
                | Assumptions [4]: (!(less (succ _t_6) _v_2))
                | Assumptions [5]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
                | Assumptions [6]: ((succ _t_6)!=_v_2)
                | Assumptions [7]: [||    !(less (succ _t_6) _v_2)    !(less _v_2 (succ _t_6))    _v_2!=(succ _t_6)]
                ====================
              }
              split for (part 1/3): (!(less (succ _t_6) _v_2))
              {
                {
                  ====================
                  | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
                  | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
                  | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
                  | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
                  | Assumptions [4]: (!(less (succ _t_6) _v_2))
                  | Assumptions [5]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
                  | Assumptions [6]: ((succ _t_6)!=_v_2)
                  ====================
                }
              }
              unable to succeed
            }
            unable to succeed
          }
          unable to succeed
        }
        cannot prove 2 of the subgoals
      }
    }
  }

Base case:       [||    [&&    !(less _v_7 zero)    _v_7=zero    !(less zero _v_7)]    [&&    (less _v_7 zero)    (less zero _v_7)    zero=_v_7]    (less zero _v_7)&&(!(less _v_7 zero))    (less _v_7 zero)&&(!(less zero _v_7))]
{
  {
    ====================
    | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
    | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
    | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
    | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
    | Assumptions [4]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
    ====================
  }
  rewritten [2]: [||    [&&    true    _v_7=zero    !(less zero _v_7)]    [&&    (less _v_7 zero)    (less zero _v_7)    zero=_v_7]    (less _v_7 zero)&&(!(less zero _v_7))    true&&(less zero _v_7)]
  deciding: (less zero _v_7)
  {
    ====================
    | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
    | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
    | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
    | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
    | Assumptions [4]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
    | Assumptions [5]: (!(less zero _v_7))
    | Assumptions [6]: (!(less zero zero))
    | Assumptions [7]: [||    [&&    !(less _t_6 zero)    _t_6=zero    !(less zero _t_6)]    [&&    (less _t_6 zero)    (less zero _t_6)    zero=_t_6]    (less _t_6 zero)&&(!(less zero _t_6))    (!(less _t_6 zero))&&(less zero _t_6)]
    | Assumptions [8]: [||    [&&    !(less _t_6 zero)    _t_6=zero    !(less zero _t_6)]    (less _t_6 zero)&&(!(less zero _t_6))    (!(less _t_6 zero))&&(less zero _t_6)]
    | Assumptions [9]: [||    (less zero _t_6)    [&&    (less _t_6 zero)    (less zero _t_6)    zero=_t_6]    (less _t_6 zero)&&(!(less zero _t_6))    (_t_6=zero)&&(!(less zero _t_6))]
    | Assumptions [10]: [||    (less zero _t_6)    (less _t_6 zero)&&(!(less zero _t_6))    (_t_6=zero)&&(!(less zero _t_6))]
    ====================
  }
  current subgoal: [||    [&&    (less _v_7 zero)    (less zero _v_7)    zero=_v_7]    (less _v_7 zero)&&(!(less zero _v_7))    (_v_7=zero)&&(!(less zero _v_7))]
  {
    split for (part 1/4): (less zero _t_6)
    {
      {
        ====================
        | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
        | Assumptions [1]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
        | Assumptions [2]: (forall ((Nat)) (!(less _qv_1 zero)))
        | Assumptions [3]: (forall ((Nat)) (less zero (succ _qv_2)))
        | Assumptions [4]: (forall ((Nat)) [||    [&&    !(less _t_6 b)    _t_6=b    !(less b _t_6)]    [&&    (less _t_6 b)    (less b _t_6)    b=_t_6]    (less _t_6 b)&&(!(less b _t_6))    (!(less _t_6 b))&&(less b _t_6)])
        | Assumptions [5]: (!(less zero _v_7))
        | Assumptions [6]: (!(less zero zero))
        | Assumptions [7]: (!(less _t_6 zero))
        | Assumptions [8]: (less zero _t_6)
        | Assumptions [9]: [||    [&&    !(less _t_6 zero)    _t_6=zero    !(less zero _t_6)]    [&&    (less _t_6 zero)    (less zero _t_6)    zero=_t_6]    (less _t_6 zero)&&(!(less zero _t_6))    (!(less _t_6 zero))&&(less zero _t_6)]
        | Assumptions [10]: [||    [&&    !(less _t_6 zero)    _t_6=zero    !(less zero _t_6)]    (less _t_6 zero)&&(!(less zero _t_6))    (!(less _t_6 zero))&&(less zero _t_6)]
        | Assumptions [11]: [||    (less zero _t_6)    (less _t_6 zero)&&(!(less zero _t_6))    (_t_6=zero)&&(!(less zero _t_6))]
        | Assumptions [12]: ((less (succ zero) (succ _t_6))=(less zero _t_6))
        | Assumptions [13]: ((nmax zero _t_6)=ite((less zero _t_6), _t_6, zero))
        | Assumptions [14]: ([&&    (less _t_6 zero)    (less zero _t_6)    zero=_t_6]||((!(less _t_6 zero))&&(less zero _t_6)))
        | Assumptions [15]: ((less zero _t_6)||[&&    (less _t_6 zero)    (less zero _t_6)    zero=_t_6])
        | Assumptions [16]: ([&&    !(less _t_6 zero)    _t_6=zero    !(less zero _t_6)]||((!(less _t_6 zero))&&(less zero _t_6)))
        | Assumptions [17]: ((less zero _t_6)||((_t_6=zero)&&(!(less zero _t_6))))
        | Assumptions [18]: [||    [&&    !(less _t_6 zero)    _t_6=zero    !(less zero _t_6)]    [&&    (less _t_6 zero)    (less zero _t