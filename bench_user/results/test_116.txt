
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
	(forall ((Nat)) (0<=(nat-to-int _qv_1)))
	(forall ((Nat) (Nat)) ((minus _qv_2 _qv_3)=(minus _qv_3 _qv_2)))
	(forall ((Nat) (Nat) (Nat)) ((minus (minus _qv_4 _qv_5) _qv_6)=(minus _qv_4 (minus _qv_5 _qv_6))))
	(forall ((Lst)) ((butlast (butlast _qv_7))=_qv_7))
	(forall ((Nat)) ((nat-to-int (succ _qv_8))=(nat-to-int _qv_8)))
	(forall ((Lst)) ((nat-to-int (len _qv_9))=(nat-to-int _qv_9)))
	(forall ((Nat) (Nat)) ((succ (minus _qv_10 _qv_11))=(minus (succ _qv_10) (succ _qv_11))))
	(forall ((Nat) (Nat)) ((succ (minus _qv_10 _qv_11))=(minus (succ _qv_11) (succ _qv_10))))

Simplified goal: (forall ((Lst)) ((len (butlast xs))=(minus (len xs) (succ zero))))


Base case:       ((len (butlast nil))=(minus (len nil) (succ zero)))
{
  proven trivially
}
Inductive step:  ((len (butlast (cons _t_12 _t_13)))=(minus (len (cons _t_12 _t_13)) (succ (len nil))))
{
  {
    ====================
    | Assumptions [0]: ((butlast nil)=nil)
    | Assumptions [1]: (forall ((Nat)) ((nat-to-int _qv_1)>=0))
    | Assumptions [2]: (forall ((Nat) (Nat)) (((nat-to-int _qv_2)=(nat-to-int _qv_3))->(_qv_2=_qv_3)))
    | Assumptions [3]: (forall ((Nat)) ((nat-to-int (succ _qv_4))=(1+(nat-to-int _qv_4))))
    | Assumptions [4]: (forall ((Nat) (Nat)) ((minus (succ _qv_7) (succ _qv_8))=(minus _qv_7 _qv_8)))
    | Assumptions [5]: (forall ((Nat) (Nat)) ((nat-to-int (minus _qv_9 _qv_10))=ite((nat-to-int _qv_9)<(nat-to-int _qv_10), 0, (nat-to-int _qv_9)-(nat-to-int _qv_10))))
    | Assumptions [6]: (forall ((Nat) (Lst)) ((len (cons _qv_11 _qv_12))=(succ (len _qv_12))))
    | Assumptions [7]: (forall ((Nat) (Lst)) ((last (cons _qv_13 _qv_14))=ite(_qv_14=nil, _qv_13, (last _qv_14))))
    | Assumptions [8]: (forall ((Nat) (Lst)) ((butlast (cons _qv_15 _qv_16))=ite(_qv_16=nil, nil, (cons _qv_15 (butlast _qv_16)))))
    | Assumptions [9]: ((nat-to-int (len nil))=0)
    | Assumptions [10]: (forall ((Nat)) ((minus (len nil) _qv_5)=(len nil)))
    | Assumptions [11]: (forall ((Nat)) ((minus _qv_6 (len nil))=_qv_6))
    | Assumptions [12]: ((len (butlast _t_13))=(minus (len _t_13) (succ (len nil))))
    | Assumptions [13]: ((minus (len _t_13) (succ (len nil)))=(len (butlast _t_13)))
    ====================
  }
  rewritten [2]: ((nat-to-int (len (butlast (cons _t_12 _t_13))))=(nat-to-int (minus (len (cons _t_12 _t_13)) (succ (len nil)))))
  rewritten [5]: ((nat-to-int (len (butlast (cons _t_12 _t_13))))=ite((nat-to-int (len (cons _t_12 _t_13)))<(nat-to-int (succ (len nil))), 0, (nat-to-int (len (cons _t_12 _t_13)))-(nat-to-int (succ (len nil)))))
  proceed with (part 1/2): (((nat-to-int (len (cons _t_12 _t_13)))<(nat-to-int (succ (len nil))))->((nat-to-int (len (butlast (cons _t_12 _t_13))))=0))
  {
      proven trivially (with Z3)
  }
  adding (((nat-to-int (len (cons _t_12 _t_13)))<(nat-to-int (succ (len nil))))->((nat-to-int (len (butlast (cons _t_12 _t_13))))=0)) to assumptions
  proceed with (part 2/2): (((nat-to-int (len (cons _t_12 _t_13)))>=(nat-to-int (succ (len nil))))->((nat-to-int (len (butlast (cons _t_12 _t_13))))=((nat-to-int (len (cons _t_12 _t_13)))+(-(nat-to-int (succ (len nil)))))))
  {
    {
      ====================
      | Assumptions [0]: ((butlast nil)=nil)
      | Assumptions [1]: (forall ((Nat)) ((nat-to-int _qv_1)>=0))
      | Assumptions [2]: (forall ((Nat) (Nat)) (((nat-to-int _qv_2)=(nat-to-int _qv_3))->(_qv_2=_qv_3)))
      | Assumptions [3]: (forall ((Nat)) ((nat-to-int (succ _qv_4))=(1+(nat-to-int _qv_4))))
      | Assumptions [4]: (forall ((Nat) (Nat)) ((minus (succ _qv_7) (succ _qv_8))=(minus _qv_7 _qv_8)))
      | Assumptions [5]: (forall ((Nat) (Nat)) ((nat-to-int (minus _qv_9 _qv_10))=ite((nat-to-int _qv_9)<(nat-to-int _qv_10), 0, (nat-to-int _qv_9)-(nat-to-int _qv_10))))
      | Assumptions [6]: (forall ((Nat) (Lst)) ((len (cons _qv_11 _qv_12))=(succ (len _qv_12))))
      | Assumptions [7]: (forall ((Nat) (Lst)) ((last (cons _qv_13 _qv_14))=ite(_qv_14=nil, _qv_13, (last _qv_14))))
      | Assumptions [8]: (forall ((Nat) (Lst)) ((butlast (cons _qv_15 _qv_16))=ite(_qv_16=nil, nil, (cons _qv_15 (butlast _qv_16)))))
      | Assumptions [9]: ((nat-to-int (len nil))=0)
      | Assumptions [10]: (forall ((Nat)) ((minus (len nil) _qv_5)=(len nil)))
      | Assumptions [11]: (forall ((Nat)) ((minus _qv_6 (len nil))=_qv_6))
      | Assumptions [12]: ((len (butlast _t_13))=(minus (len _t_13) (succ (len nil))))
      | Assumptions [13]: ((minus (len _t_13) (succ (len nil)))=(len (butlast _t_13)))
      | Assumptions [14]: (((nat-to-int (len (cons _t_12 _t_13)))<(nat-to-int (succ (len nil))))->((nat-to-int (len (butlast (cons _t_12 _t_13))))=0))
      | Assumptions [15]: ((nat-to-int (len (cons _t_12 _t_13)