
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
	(forall ((Nat)) ((double (double _qv_1))=_qv_1))
	(forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))

Simplified goal: (forall ((Lst)) ((len (append x x))=(double (len x))))


Base case:       ((len (append nil nil))=(double (len nil)))
{
  proven trivially
}
Inductive step:  ((len (append (cons _t_7 _t_8) (cons _t_7 _t_8)))=(double (len (cons _t_7 _t_8))))
{
  proven trivially
}

Proved
unsat
