
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
	(forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
	(forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
	(forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))

Simplified goal: (forall ((Lst)) ((rotate (len x) x)=x))


Base case:       ((rotate (len nil) nil)=nil)
{
  proven trivially
}
Inductive step:  ((rotate (len (cons _t_13 _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
{
  {
    ====================
    | Assumptions [0]: (forall ((Nat) (Lst)) ((len (cons _qv_1 _qv_2))=(succ (len _qv_2))))
    | Assumptions [1]: (forall ((Lst)) ((append nil _qv_3)=_qv_3))
    | Assumptions [2]: (forall ((Nat) (Lst) (Lst)) ((append (cons _qv_4 _qv_5) _qv_6)=(cons _qv_4 (append _qv_5 _qv_6))))
    | Assumptions [3]: (forall ((Nat)) ((rotate (succ _qv_8) nil)=nil))
    | Assumptions [4]: (forall ((Nat) (Nat) (Lst)) ((rotate (succ _qv_9) (cons _qv_10 _qv_11))=(rotate _qv_9 (append _qv_11 (cons _qv_10 nil)))))
    | Assumptions [5]: (forall ((Nat) (Nat)) ((plus (succ _qv_13) _qv_14)=(succ (plus _qv_13 _qv_14))))
    | Assumptions [6]: ((rotate (len _t_14) _t_14)=_t_14)
    | Assumptions [7]: (_t_14=(rotate (len _t_14) _t_14))
    | Assumptions [8]: (forall ((Lst)) ((rotate (len nil) _qv_7)=_qv_7))
    | Assumptions [9]: (forall ((Nat)) ((plus (len nil) _qv_12)=_qv_12))
    | Assumptions [10]: ((rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))=(rotate (len _t_14) _t_14))
    | Assumptions [11]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))=(rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))
    | Assumptions [12]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
    ====================
  }
  rewritten [0]: ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
  rewritten [4]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
  rewritten [7]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
  rewritten [7]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
  rewritten [7]: ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [4]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [4]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
  rewritten [4]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
  rewritten [7]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
  rewritten [7]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
  rewritten [7]: ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [4]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [4]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (cons _t_13 _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_13 _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_13 _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_13 _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_13 _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_13 _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_13 _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (cons _t_13 _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
  rewritten [7]: ((rotate (len (cons _t_13 (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [0]: ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [4]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (append (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (append (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (append (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (append (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
  rewritten [4]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
  rewritten [7]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
  rewritten [7]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
  rewritten [4]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
  rewritten [7]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
  rewritten [7]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [6]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (append (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [10]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [6]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (append (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [10]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (append (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))) (cons _t_13 (rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))))=(cons _t_13 (rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (append (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))) (cons _t_13 (rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))))=(cons _t_13 (rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [6]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (append (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [10]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [6]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (append (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [10]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (append (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))) (cons _t_13 (rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))))=(cons _t_13 (rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (append (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))) (cons _t_13 (rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))))=(cons _t_13 (rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [4]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (append (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (append (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (append (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (append (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
  rewritten [4]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
  rewritten [7]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
  rewritten [7]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
  rewritten [4]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
  rewritten [7]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
  rewritten [7]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [6]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (append (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [10]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [6]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (append (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [10]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (append (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))) (cons _t_13 (rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))))=(cons _t_13 (rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (append (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))) (cons _t_13 (rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))))=(cons _t_13 (rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [6]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (append (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [10]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [6]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (append (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [10]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (append (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))) (cons _t_13 (rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))))=(cons _t_13 (rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (append (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))) (cons _t_13 (rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))))=(cons _t_13 (rotate (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (len (cons _t_13 (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_13 (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_13 (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_13 (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_13 (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_13 (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_13 (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (cons _t_13 (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len (cons _t_13 _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
  rewritten [0]: ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
  rewritten [4]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
  rewritten [7]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
  rewritten [7]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
  rewritten [7]: ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [4]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [4]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
  rewritten [4]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
  rewritten [7]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
  rewritten [7]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
  rewritten [7]: ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [4]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [4]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (cons _t_13 _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_13 _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_13 _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_13 _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_13 _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_13 _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_13 _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (cons _t_13 _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
  rewritten [0]: ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
  rewritten [4]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
  rewritten [7]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
  rewritten [7]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
  rewritten [7]: ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [4]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [4]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
  rewritten [4]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
  rewritten [7]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
  rewritten [7]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
  rewritten [7]: ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [4]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [4]: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [6]: ((rotate (len _t_14) (append _t_14 (cons _t_13 nil)))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_14) _t_14)) (append (rotate (len _t_14) _t_14) (cons _t_13 nil)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (append (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)) (cons _t_13 nil)))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
  rewritten [7]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))) (cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))=(cons _t_13 (rotate (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))) (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14)))) (cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))=(cons _t_13 (rotate (len (rotate (len _t_14) _t_14)) (rotate (len _t_14) _t_14))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_14) _t_14))) (cons _t_13 (rotate (len _t_14) _t_14)))=(cons _t_13 (rotate (len _t_14) _t_14)))
CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
CURRENT SUBGOAL ((rotate (len (cons _t_13 _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_13 _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_13 _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_13 _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_13 _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_13 _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_13 _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (cons _t_13 _t_14)) (cons _t_13 _t_14))=(cons _t_13 _t_14))

The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
	(forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
	(forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
	(forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len nil) nil))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 nil)))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 nil)))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 nil)))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 nil)))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 nil)))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 nil)))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 nil)))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_1014 _qv_1015)=(plus _qv_1015 _qv_1014)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_1016 _qv_1017) _qv_1018)=(plus _qv_1016 (plus _qv_1017 _qv_1018))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1019) (succ _qv_1020))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_1019 _qv_1020))=(plus (succ _qv_1020) (succ _qv_1019))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1008))=_qv_1008))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1009 _qv_1010)=(append _qv_1010 _qv_1009)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1023 _t_1024))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1011 _qv_1012) _qv_1013)=(append _qv_1011 (append _qv_1012 _qv_1013))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1024) (append _t_1024 (cons _t_1023 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len n