
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Lst) (Lst)) ((append _qv_0 _qv_1)=(append _qv_1 _qv_0)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_2 _qv_3) _qv_4)=(append _qv_2 (append _qv_3 _qv_4))))
	(forall ((Lst)) ((rev (rev _qv_5))=_qv_5))
	(forall ((Lst) (Lst)) ((rev (append _qv_6 _qv_7))=(append (rev _qv_6) (rev _qv_7))))
	(forall ((Lst) (Lst)) ((rev (append _qv_6 _qv_7))=(append (rev _qv_7) (rev _qv_6))))

Simplified goal: (forall (INT (Lst)) ((count n l)=(count n (rev l))))


Base case:       ((count _v_8 nil)=(count _v_8 (rev nil)))
{
  proven trivially
}
Inductive step:  ((count _v_8 (cons _t_9 _t_10))=(count _v_8 (rev (cons _t_9 _t_10))))
{
  {
    ====================
    | Assumptions [0]: ((rev nil)=nil)
    | Assumptions [1]: (forall ((Lst)) ((append nil _qv_1)=_qv_1))
    | Assumptions [2]: (forall (INT (Lst) (Lst)) ((append (cons _qv_2 _qv_3) _qv_4)=(cons _qv_2 (append _qv_3 _qv_4))))
    | Assumptions [3]: (forall (INT) ((count _qv_5 nil)=0))
    | Assumptions [4]: (forall (INT INT (Lst)) ((count _qv_6 (cons _qv_7 _qv_8))=ite(_qv_6=_qv_7, 1+(count _qv_6 _qv_8), (count _qv_6 _qv_8))))
    | Assumptions [5]: (forall (INT (Lst)) ((count _qv_9 _qv_10)>=0))
    | Assumptions [6]: (forall (INT (Lst)) ((rev (cons _qv_11 _qv_12))=(append (rev _qv_12) (cons _qv_11 nil))))
    | Assumptions [7]: (forall (INT) ((count n _t_10)=(count n (rev _t_10))))
    | Assumptions [8]: (forall (INT) ((count n (rev _t_10))=(count n _t_10)))
    ====================
  }
  rewritten [4]: (ite(_v_8=_t_9, 1+(count _v_8 _t_10), (count _v_8 _t_10))=(count _v_8 (rev (cons _t_9 _t_10))))
  proceed with (part 1/2): ((_v_8=_t_9)->((count _v_8 _t_10)=((count _v_8 (rev (cons _t_9 _t_10)))+-1)))
  {
    {
      ====================
      | Assumptions [0]: ((rev nil)=nil)
      | Assumptions [1]: (forall ((Lst)) ((append nil _qv_1)=_qv_1))
      | Assumptions [2]: (forall (INT (Lst) (Lst)) ((append (cons _qv_2 _qv_3) _qv_4)=(cons _qv_2 (append _qv_3 _qv_4))))
      | Assumptions [3]: (forall (INT) ((count _qv_5 nil)=0))
      | Assumptions [4]: (forall (INT INT (Lst)) ((count _qv_6 (cons _qv_7 _qv_8))=ite(_qv_6=_qv_7, 1+(count _qv_6 _qv_8), (count _qv_6 _qv_8))))
      | Assumptions [5]: (forall (INT (Lst)) ((count _qv_9 _qv_10)>=0))
      | Assumptions [6]: (forall (INT (Lst)) ((rev (cons _qv_11 _qv_12))=(append (rev _qv_12) (cons _qv_11 nil))))
      | Assumptions [7]: (forall (INT) ((count n _t_10)=(count n (rev _t_10))))
      | Assumptions [8]: (forall (INT) ((count n (rev _t_10))=(count n _t_10)))
      ====================
    }
    current subgoal: ((count _t_9 _t_10)=((count _t_9 (rev (cons _t_9 _t_10)))+-1))
    rewritten [6]: ((count _t_9 _t_10)=((count _t_9 (append (rev _t_10) (cons _t_9 nil)))+-1))
    rewritten [7]: ((count _t_9 (rev _t_10))=((count _t_9 (append (rev _t_10) (cons _t_9 nil)))+-1))

The Knowledge Scheme currently contains the following lemmas:
	(forall ((Lst) (Lst)) ((append _qv_12 _qv_13)=(append _qv_13 _qv_12)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_14 _qv_15) _qv_16)=(append _qv_14 (append _qv_15 _qv_16))))
	(forall ((Lst)) ((rev (rev _qv_17))=_qv_17))
	(forall ((Lst) (Lst)) ((rev (append _qv_18 _qv_19))=(append (rev _qv_18) (rev _qv_19))))
	(forall ((Lst) (Lst)) ((rev (append _qv_18 _qv_19))=(append (rev _qv_19) (rev _qv_18))))

    proven by induction: ((count _t_9 _w_11)=((count _t_9 (append _w_11 (cons _t_9 nil)))+-1))
    rewriting done
  }
  adding ((_v_8=_t_9)->((count _v_8 _t_10)=((count _v_8 (rev (cons _t_9 _t_10)))+-1))) to assumptions
  proceed with (part 2/2): ((_v_8!=_t_9)->((count _v_8 _t_10)=(count _v_8 (rev (cons _t_9 _t_10)))))
  {
    {
      ====================
      | Assumptions [0]: ((rev nil)=nil)
      | Assumptions [1]: (forall ((Lst)) ((append nil _qv_1)=_qv_1))
      | Assumptions [2]: (forall (INT (Lst) (Lst)) ((append (cons _qv_2 _qv_3) _qv_4)=(cons _qv_2 (append _qv_3 _qv_4))))
      | Assumptions [3]: (forall (INT) ((count _qv_5 nil)=0))
      | Assumptions [4]: (forall (INT INT (Lst)) ((count _qv_6 (cons _qv_7 _qv_8))=ite(_qv_6=_qv_7, 1+(count _qv_6 _qv_8), (count _qv_6 _qv_8))))
      | Assumptions [5]: (forall (INT (Lst)) ((count _qv_9 _qv_10)>=0))
      | Assumptions [6]: (forall (INT (Lst)) ((rev (cons _qv_11 _qv_12))=(append (rev _qv_12) (cons _qv_11 nil))))
      | Assumptions [7]: (forall (INT) ((count n _t_10)=(count n (rev _t_10))))
      | Assumptions [8]: (forall (INT) ((count n (rev _t_10))=(count n _t_10)))
      | Assumptions [9]: ((_v_8=_t_9)->((count _v_8 _t_10)=((count _v_8 (rev (cons _t_9 _t_10)))+-1)))
      | Assumptions [10]: (_v_8!=_t_9)
      | Assumptions [11]: ((_v_8=_t_9)->((count _v_8 _t_10)=((count _v_8 (append (rev _t_10) (cons _t_9 nil)))+-1)))
      | Assumptions [12]: ((_v_8=_t_9)->((count _v_8 (rev _t_10))=((count _v_8 (rev (cons _t_9 _t_10)))+-1)))
      | Assumptions [13]: ((_v_8=_t_9)->((count _v_8 (rev _t_10))=((count _v_8 (append (rev _t_10) (cons _t_9 nil)))+-1)))
      ====================
    }
    current subgoal: ((count _v_8 _t_10)=(count _v_8 (rev (cons _t_9 _t_10))))
    rewritten [6]: ((count _v_8 _t_10)=(count _v_8 (append (rev _t_10) (cons _t_9 nil))))
    rewritten [7]: ((count _v_8 (rev _t_10))=(count _v_8 (append (rev _t_10) (cons _t_9 nil))))

The Knowledge Scheme currently contains the following lemmas:
	(forall ((Lst) (Lst)) ((append _qv_13 _qv_14)=(append _qv_14 _qv_13)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_15 _qv_16) _qv_17)=(append _qv_15 (append _qv_16 _qv_17))))
	(forall ((Lst)) ((rev (rev _qv_18))=_qv_18))
	(forall ((Lst) (Lst)) ((rev (append _qv_19 _qv_20))=(append (rev _qv_19) (rev _qv_20))))
	(forall ((Lst) (Lst)) ((rev (append _qv_19 _qv_20))=(append (rev _qv_20) (rev _qv_19))))

    proven by induction: ((count _v_8 _w_12)=(count _v_8 (append _w_12 (cons _t_9 nil))))
    rewriting done
  }
  adding ((_v_8!=_t_9)->((count _v_8 _t_10)=(count _v_8 (rev (cons _t_9 _t_10))))) to assumptions
  all subgoals are proven
  rewriting done
}

Proved
unsat
