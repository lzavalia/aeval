
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
	(forall ((Nat)) (0<=(nat-to-int _qv_1)))
	(forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
	(forall ((Lst)) ((rev (rev _qv_7))=_qv_7))
	(forall ((Nat)) ((nat-to-int (succ _qv_8))=(nat-to-int _qv_8)))
	(forall ((Lst) (Lst)) ((rev (append _qv_9 _qv_10))=(append (rev _qv_9) (rev _qv_10))))
	(forall ((Lst) (Lst)) ((rev (append _qv_9 _qv_10))=(append (rev _qv_10) (rev _qv_9))))

Simplified goal: (forall ((Lst) (Lst)) ((rev (append (rev x) y))=(append (rev y) x)))


Base case:       ((rev (append (rev nil) _v_11))=(append (rev _v_11) nil))
{
  {
    ====================
    | Assumptions [0]: ((nat-to-int zero)=0)
    | Assumptions [1]: ((rev nil)=nil)
    | Assumptions [2]: (forall ((Nat)) ((nat-to-int _qv_1)>=0))
    | Assumptions [3]: (forall ((Nat) (Nat)) (((nat-to-int _qv_2)=(nat-to-int _qv_3))->(_qv_2=_qv_3)))
    | Assumptions [4]: (forall ((Nat)) ((nat-to-int (succ _qv_4))=(1+(nat-to-int _qv_4))))
    | Assumptions [5]: (forall ((Lst)) ((append nil _qv_5)=_qv_5))
    | Assumptions [6]: (forall ((Nat) (Lst) (Lst)) ((append (cons _qv_6 _qv_7) _qv_8)=(cons _qv_6 (append _qv_7 _qv_8))))
    | Assumptions [7]: (forall ((Nat) (Lst)) ((rev (cons _qv_9 _qv_10))=(append (rev _qv_10) (cons _qv_9 nil))))
    | Assumptions [8]: (forall ((Lst) (Nat) (Lst)) ((append (append _qv_11 (cons _qv_12 nil)) _qv_13)=(append _qv_11 (cons _qv_12 _qv_13))))
    | Assumptions [9]: (forall ((Lst) (Lst) (Nat)) ((append (append _qv_14 _qv_15) (cons _qv_16 nil))=(append _qv_14 (append _qv_15 (cons _qv_16 nil)))))
    ====================
  }
  rewritten [1]: ((rev (append nil _v_11))=(append (rev _v_11) nil))
  rewritten [5]: ((rev _v_11)=(append (rev _v_11) nil))

The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_13))=_qv_13))
	(forall ((Nat)) (0<=(nat-to-int _qv_14)))
	(forall ((Lst) (Lst)) ((append _qv_15 _qv_16)=(append _qv_16 _qv_15)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_17 _qv_18) _qv_19)=(append _qv_17 (append _qv_18 _qv_19))))
	(forall ((Lst)) ((rev (rev _qv_20))=_qv_20))
	(forall ((Nat)) ((nat-to-int (succ _qv_21))=(nat-to-int _qv_21)))
	(forall ((Lst) (Lst)) ((rev (append _qv_22 _qv_23))=(append (rev _qv_22) (rev _qv_23))))
	(forall ((Lst) (Lst)) ((rev (append _qv_22 _qv_23))=(append (rev _qv_23) (rev _qv_22))))

  proven by induction: (_w_12=(append _w_12 nil))
  rewriting done
}
Inductive step:  ((rev (append (rev (cons _t_13 _t_14)) _v_11))=(append (rev _v_11) (cons _t_13 _t_14)))
{
  proven trivially
}

Proved
unsat
