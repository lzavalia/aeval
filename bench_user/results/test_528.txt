
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
	(forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))

Simplified goal: (forall ((Lst)) ((rotate (len x) x)=x))


Base case:       ((rotate (len nil) nil)=nil)
{
  proven trivially
}
Inductive step:  ((rotate (len (cons _t_6 _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
{
  {
    ====================
    | Assumptions [0]: (forall ((Lst)) ((append nil _qv_1)=_qv_1))
    | Assumptions [1]: (forall ((Nat) (Lst) (Lst)) ((append (cons _qv_2 _qv_3) _qv_4)=(cons _qv_2 (append _qv_3 _qv_4))))
    | Assumptions [2]: (forall ((Nat) (Lst)) ((len (cons _qv_5 _qv_6))=(succ (len _qv_6))))
    | Assumptions [3]: (forall ((Nat)) ((rotate (succ _qv_8) nil)=nil))
    | Assumptions [4]: (forall ((Nat) (Nat) (Lst)) ((rotate (succ _qv_9) (cons _qv_10 _qv_11))=(rotate _qv_9 (append _qv_11 (cons _qv_10 nil)))))
    | Assumptions [5]: ((rotate (len _t_7) _t_7)=_t_7)
    | Assumptions [6]: (_t_7=(rotate (len _t_7) _t_7))
    | Assumptions [7]: (forall ((Lst)) ((rotate (len nil) _qv_7)=_qv_7))
    | Assumptions [8]: ((rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))=(rotate (len _t_7) _t_7))
    | Assumptions [9]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))=(rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))
    | Assumptions [10]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
    ====================
  }
  rewritten [2]: ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
  rewritten [4]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
  rewritten [6]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
  rewritten [6]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
  rewritten [6]: ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [4]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [4]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
  rewritten [4]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
  rewritten [6]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
  rewritten [6]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
  rewritten [6]: ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [4]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [4]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (cons _t_6 _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_6 _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_6 _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (cons _t_6 _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
  rewritten [6]: ((rotate (len (cons _t_6 (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [2]: ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [4]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (append (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (append (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (append (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (append (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
  rewritten [4]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
  rewritten [6]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
  rewritten [6]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
  rewritten [4]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
  rewritten [6]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
  rewritten [6]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [5]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (append (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [8]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [5]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (append (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [8]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (append (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))) (cons _t_6 (rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))))=(cons _t_6 (rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (append (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))) (cons _t_6 (rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))))=(cons _t_6 (rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [5]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (append (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [8]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [5]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (append (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [8]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (append (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))) (cons _t_6 (rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))))=(cons _t_6 (rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (append (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))) (cons _t_6 (rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))))=(cons _t_6 (rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [4]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (append (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (append (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (append (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (append (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
  rewritten [4]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
  rewritten [6]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
  rewritten [6]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
  rewritten [4]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
  rewritten [6]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
  rewritten [6]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [5]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (append (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [8]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [5]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (append (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [8]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (append (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))) (cons _t_6 (rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))))=(cons _t_6 (rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (append (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))) (cons _t_6 (rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))))=(cons _t_6 (rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [5]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (append (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [8]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [5]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (append (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [8]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (append (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))) (cons _t_6 (rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))))=(cons _t_6 (rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (append (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))) (cons _t_6 (rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))))=(cons _t_6 (rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (len (cons _t_6 (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_6 (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_6 (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (cons _t_6 (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len (cons _t_6 _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
  rewritten [2]: ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
  rewritten [4]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
  rewritten [6]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
  rewritten [6]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
  rewritten [6]: ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [4]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [4]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
  rewritten [4]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
  rewritten [6]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
  rewritten [6]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
  rewritten [6]: ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [4]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [4]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (cons _t_6 _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_6 _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_6 _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (cons _t_6 _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
  rewritten [2]: ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
  rewritten [4]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
  rewritten [6]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
  rewritten [6]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
  rewritten [6]: ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [4]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [4]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
  rewritten [4]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
  rewritten [6]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
  rewritten [6]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
  rewritten [6]: ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [4]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [4]: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [5]: ((rotate (len _t_7) (append _t_7 (cons _t_6 nil)))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (rotate (len _t_7) _t_7)) (append (rotate (len _t_7) _t_7) (cons _t_6 nil)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [4]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (append (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)) (cons _t_6 nil)))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
  rewritten [6]: ((rotate (succ (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))) (cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))=(cons _t_6 (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))))
  sequence of rewrites only grows
CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(cons _t_6 (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len (rotate (len _t_7) _t_7))) (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
CURRENT SUBGOAL ((rotate (len (cons _t_6 _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_6 _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len (cons _t_6 _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (len (cons _t_6 _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))

The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
	(forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len nil) nil))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 nil)))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 nil)))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 nil)))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1002 _qv_1003)=(append _qv_1003 _qv_1002)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_1004 _qv_1005) _qv_1006)=(append _qv_1004 (append _qv_1005 _qv_1006))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))) (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))))))))=(cons _t_1009 _t_1010))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_1001))=_qv_1001))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_1010) (append _t_1010 (cons _t_1009 (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))))) (rotate (len (rotate (len (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil))) (rotate (len (rotate (len nil) nil)) (rotate (len nil) nil)))) (rotate (len (rotate (len (rotate (len nil) nil