
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
	(forall ((Nat)) (0<=(nat-to-int _qv_1)))
	(forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
	(forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
	(forall ((Lst)) ((nat-to-int (len _qv_8))=(nat-to-int _qv_8)))

Simplified goal: (forall ((Lst) (Nat) (Lst)) ((len (append x (cons y z)))=(succ (len (append x z)))))


Base case:       ((len (append nil (cons _v_9 _v_10)))=(succ (len (append nil _v_10))))
{
  proven trivially
}
Inductive step:  ((len (append (cons _t_11 _t_12) (cons _v_9 _v_10)))=(succ (len (append (cons _t_11 _t_12) _v_10))))
{
  proven trivially
}

Proved
unsat
