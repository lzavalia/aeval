
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat) (Nat)) ((less _qv_0 _qv_1)=(less _qv_1 _qv_0)))
	(forall ((Tree)) ((mirror (mirror _qv_2))=_qv_2))

Simplified goal: (forall ((Tree)) ((height (mirror a))=(height a)))


Base case:       ((height (mirror leaf))=(height leaf))
{
  proven trivially
}
Inductive step:  ((height (mirror (node _t_3 _t_4 _t_5)))=(height (node _t_3 _t_4 _t_5)))
{
  {
    ====================
    | Assumptions [0]: ((mirror leaf)=leaf)
    | Assumptions [1]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
    | Assumptions [2]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
    | Assumptions [3]: (forall ((Nat) (Tree) (Tree)) ((mirror (node _qv_7 _qv_8 _qv_9))=(node _qv_7 (mirror _qv_9) (mirror _qv_8))))
    | Assumptions [4]: (forall ((Nat) (Tree) (Tree)) ((height (node _qv_10 _qv_11 _qv_12))=(succ (nmax (height _qv_11) (height _qv_12)))))
    | Assumptions [5]: ((height (mirror _t_4))=(height _t_4))
    | Assumptions [6]: ((height (mirror _t_5))=(height _t_5))
    | Assumptions [7]: ((height _t_4)=(height (mirror _t_4)))
    | Assumptions [8]: ((height _t_5)=(height (mirror _t_5)))
    | Assumptions [9]: (forall ((Nat)) (!(less _qv_1 (height leaf))))
    | Assumptions [10]: (forall ((Nat)) (less (height leaf) (succ _qv_2)))
    ====================
  }
  rewritten [3]: ((height (node _t_3 (mirror _t_5) (mirror _t_4)))=(height (node _t_3 _t_4 _t_5)))
  rewritten [4]: ((height (node _t_3 (mirror _t_5) (mirror _t_4)))=(succ (nmax (height _t_4) (height _t_5))))
  rewritten [2]: ((height (node _t_3 (mirror _t_5) (mirror _t_4)))=(succ ite((less (height _t_4) (height _t_5)), (height _t_5), (height _t_4))))
  proceed with (part 1/2): ((less (height _t_4) (height _t_5))->((height (node _t_3 (mirror _t_5) (mirror _t_4)))=(succ (height _t_5))))
  {
    {
      ====================
      | Assumptions [0]: ((mirror leaf)=leaf)
      | Assumptions [1]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
      | Assumptions [2]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
      | Assumptions [3]: (forall ((Nat) (Tree) (Tree)) ((mirror (node _qv_7 _qv_8 _qv_9))=(node _qv_7 (mirror _qv_9) (mirror _qv_8))))
      | Assumptions [4]: (forall ((Nat) (Tree) (Tree)) ((height (node _qv_10 _qv_11 _qv_12))=(succ (nmax (height _qv_11) (height _qv_12)))))
      | Assumptions [5]: ((height (mirror _t_4))=(height _t_4))
      | Assumptions [6]: ((height (mirror _t_5))=(height _t_5))
      | Assumptions [7]: ((height _t_4)=(height (mirror _t_4)))
      | Assumptions [8]: ((height _t_5)=(height (mirror _t_5)))
      | Assumptions [9]: (forall ((Nat)) (!(less _qv_1 (height leaf))))
      | Assumptions [10]: (forall ((Nat)) (less (height leaf) (succ _qv_2)))
      | Assumptions [11]: (less (height _t_4) (height _t_5))
      | Assumptions [12]: (less (height (mirror _t_4)) (height _t_5))
      | Assumptions [13]: (less (height _t_4) (height (mirror _t_5)))
      | Assumptions [14]: (less (height (mirror _t_4)) (height (mirror _t_5)))
      ====================
    }
    current subgoal: ((height (node _t_3 (mirror _t_5) (mirror _t_4)))=(succ (height _t_5)))
    rewritten [4]: ((succ (nmax (height (mirror _t_5)) (height (mirror _t_4))))=(succ (height _t_5)))
    rewritten [2]: ((succ ite((less (height (mirror _t_5)) (height (mirror _t_4))), (height (mirror _t_4)), (height (mirror _t_5))))=(succ (height _t_5)))
    proceed with (part 1/2): ((less (height (mirror _t_5)) (height (mirror _t_4)))->((succ (height (mirror _t_4)))=(succ (height _t_5))))
    {
      {
        ====================
        | Assumptions [0]: ((mirror leaf)=leaf)
        | Assumptions [1]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
        | Assumptions [2]: (forall ((Nat) (Nat)) ((nmax _qv_5 _qv_6)=ite((less _qv_5 _qv_6), _qv_6, _qv_5)))
        | Assumptions [3]: (forall ((Nat) (Tree) (Tree)) ((mirror (node _qv_7 _qv_8 _qv_9))=(node _qv_7 (mirror _qv_9) (mirror _qv_8))))
        | Assumptions [4]: (forall ((Nat) (Tree) (Tree)) ((height (node _qv_10 _qv_11 _qv_12))=(succ (nmax (height _qv_11) (height _qv_12)))))
        | Assumptions [5]: ((height (mirror _t_4))=(height _t_4))
        | Assumptions [6]: ((height (mirror _t_5))=(height _t_5))
        | Assumptions [7]: ((height _t_4)=(height (mirror _t_4)))
        | Assumptions [8]: ((height _t_5)=(height (mirror _t_5)))
        | Assumptions [9]: (forall ((Nat)) (!(less _qv_1 (height leaf))))
        | Assumptions [10]: (forall ((Nat)) (less (height leaf) (succ _qv_2)))
        | Assumptions [11]: (less (height _t_4) (height _t_5))
        | Assumptions [12]: (less (height (mirror _t_4)) (height _t_5))
        | Assumptions [13]: (less (height _t_4) (height (mirror _t_5)))
        | Assumptions [14]: (less (height (mirror _t_4)) (height (mirror _t_5)))
        | Assumptions [15]: (less (height (mirror _t_5)) (height (mirror _t_4)))
        | Assumptions [16]: (less (height (mirror _t_5)) (height _t_4))
        | Assumptions [17]: (less (height _t_5) (height (mirror _t_4)))
        | Assumptions [18]: (less (height _t_5) (height _t_4))
        ====================
      }
      current subgoal: ((succ (height (mirror _t_4)))=(succ (height _t_5)))
      rewritten [5]: ((succ (height _t_4))=(succ (height _t_5)))
      rewritten [7]: ((succ (height (mirror _t_4)))=(succ (height _t_5)))
      Maximum recursion depth reached

The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat) (Nat)) ((less _qv_6 _qv_7)=(less _qv_7 _qv_6)))
	(forall ((Tree)) ((mirror (mirror _qv_8))=_qv_8))

