
The Knowledge Scheme currently contains the following lemmas:

Simplified goal: (forall ((Nat) (Nat) (Nat) (Lst)) ((drop (succ w) (drop x (cons y z)))=(drop w (drop x z))))


Base case:       ((drop (succ zero) (drop _v_0 (cons _v_1 _v_2)))=(drop zero (drop _v_0 _v_2)))
{
  {
    ====================
    | Assumptions [0]: (forall ((Nat)) ((drop _qv_1 nil)=nil))
    | Assumptions [1]: (forall ((Lst)) ((drop zero _qv_2)=_qv_2))
    | Assumptions [2]: (forall ((Nat) (Nat) (Lst)) ((drop (succ _qv_3) (cons _qv_4 _qv_5))=(drop _qv_3 _qv_5)))
    ====================
  }
  rewritten [1]: ((drop (succ zero) (drop _v_0 (cons _v_1 _v_2)))=(drop _v_0 _v_2))

The Knowledge Scheme currently contains the following lemmas:


The Knowledge Scheme currently contains the following lemmas:


The Knowledge Scheme currently contains the following lemmas:


The Knowledge Scheme currently contains the following lemmas:

  backtrack to: ((drop (succ zero) (drop _v_0 (cons _v_1 _v_2)))=(drop zero (drop _v_0 _v_2)))
  rewritten [1]: ((drop (succ zero) (drop _v_0 (cons _v_1 _v_2)))=(drop _v_0 _v_2))

The Knowledge Scheme currently contains the following lemmas:


The Knowledge Scheme currently contains the following lemmas:


The Knowledge Scheme currently contains the following lemmas:


The Knowledge Scheme currently contains the following lemmas:

  backtrack to: ((drop (succ zero) (drop _v_0 (cons _v_1 _v_2)))=(drop zero (drop _v_0 _v_2)))
}

Base case:       ((drop (succ _v_3) (drop zero (cons _v_4 _v_5)))=(drop _v_3 (drop zero _v_5)))
{
  proven trivially
}
Inductive step:  ((drop (succ _v_3) (drop (succ _t_6) (cons _v_4 _v_5)))=(drop _v_3 (drop (succ _t_6) _v_5)))
{
  {
    ====================
    | Assumptions [0]: (forall ((Nat)) ((drop _qv_1 nil)=nil))
    | Assumptions [1]: (forall ((Lst)) ((drop zero _qv_2)=_qv_2))
    | Assumptions [2]: (forall ((Nat) (Nat) (Lst)) ((drop (succ _qv_3) (cons _qv_4 _qv_5))=(drop _qv_3 _qv_5)))
    | Assumptions [3]: (forall ((Nat) (Nat) (Lst)) ((drop (succ w) (drop _t_6 (cons y z)))=(drop w (drop _t_6 z))))
    | Assumptions [4]: (forall ((Nat) (Nat) (Lst)) ((drop w (drop _t_6 z))=(drop (succ w) (drop _t_6 (cons y z)))))
    ====================
  }
  rewritten [2]: ((drop (succ _v_3) (drop _t_6 _v_5))=(drop _v_3 (drop (succ _t_6) _v_5)))
  rewritten [4]: ((drop (succ (succ _v_3)) (drop _t_6 (cons y _v_5)))=(drop _v_3 (drop (succ _t_6) _v_5)))
  rewritten [4]: ((drop (succ (succ (succ _v_3))) (drop _t_6 (cons y (cons y _v_5))))=(drop _v_3 (drop (succ _t_6) _v_5)))
  rewritten [4]: ((drop (succ (succ (succ (succ _v_3)))) (drop _t_6 (cons y (cons y (cons y _v_5)))))=(drop _v_3 (drop (succ _t_6) _v_5)))
  sequence of rewrites only grows
  backtrack to: ((drop (succ (succ (succ _v_3))) (drop _t_6 (cons y (cons y _v_5))))=(drop _v_3 (drop (succ _t_6) _v_5)))
  rewritten [4]: ((drop (succ (succ (succ (succ _v_3)))) (drop _t_6 (cons y (cons y (cons y _v_5)))))=(drop _v_3 (drop (succ _t_6) _v_5)))
  sequence of rewrites only grows
  backtrack to: ((drop (succ (succ (succ _v_3))) (drop _t_6 (cons y (cons y _v_5))))=(drop _v_3 (drop (succ _t_6) _v_5)))
  backtrack to: ((drop (succ (succ _v_3)) (drop _t_6 (cons y _v_5)))=(drop _v_3 (drop (succ _t_6) _v_5)))
  rewritten [4]: ((drop (succ (succ (succ _v_3))) (drop _t_6 (cons y (cons y _v_5))))=(drop _v_3 (drop (succ _t_6) _v_5)))
  rewritten [4]: ((drop (succ (succ (succ (succ _v_3)))) (drop _t_6 (cons y (cons y (cons y _v_5)))))=(drop _v_3 (drop (succ _t_6) _v_5)))
  sequence of rewrites only grows
  backtrack to: ((drop (succ (succ (succ _v_3))) (drop _t_6 (cons y (cons y _v_5))))=(drop _v_3 (drop (succ _t_6) _v_5)))
  rewritten [4]: ((drop (succ (succ (succ (succ _v_3)))) (drop _t_6 (cons y (cons y (cons y _v_5)))))=(drop _v_3 (drop (succ _t_6) _v_5)))
  sequence of rewrites only grows
  backtrack to: ((drop (succ (succ (succ _v_3))) (drop _t_6 (cons y (cons y _v_5))))=(drop _v_3 (drop (succ _t_6) _v_5)))
  backtrack to: ((drop (succ (succ _v_3)) (drop _t_6 (cons y _v_5)))=(drop _v_3 (drop (succ _t_6) _v_5)))

The Knowledge Scheme currently contains the following lemmas:


The Knowledge Scheme currently contains the following lemmas:


The Knowledge Scheme currently contains the following lemmas:


The Knowledge Scheme currently contains the following lemmas:


The Knowledge Scheme currently contains the following lemmas:


The Knowledge Scheme currently contains the following lemmas:


The Knowledge Scheme currently contains the following lemmas:


The Knowledge Scheme currently contains the following lemmas:


The Knowledge Scheme currently contains the following lemmas:

  backtrack to: ((drop (succ _v_3) (drop _t_6 _v_5))=(drop _v_3 (drop (succ _t_6) _v_5)))
  rewritten [4]: ((drop (succ (succ _v_3)) (drop _t_6 (cons y _v_5)))=(drop _v_3 (drop (succ _t_6) _v_5)))
  rewritten [4]: ((drop (succ (succ (succ _v_3))) (drop _t_6 (cons y (cons y _v_5))))=(drop _v_3 (drop (succ _t_6) _v_5)))
  rewritten [4]: ((drop (succ (succ (succ (succ _v_3)))) (drop _t_6 (cons y (cons y (cons y _v_5)))))=(drop _v_3 (drop (succ _t_6) _v_5)))
  sequence of rewrites only grows
  backtrack to: ((drop (succ (succ (succ _v_3))) (drop _t_6 (cons y (cons y _v_5))))=(drop _v_3 (drop (succ _t_6) _v_5)))
  rewritten [4]: ((drop (succ (succ (succ (succ _v_3)))) (drop _t_6 (cons y (cons y (cons y _v_5)))))=(drop _v_3 (drop (succ _t_6) _v_5)))
  sequence of rewrites only grows
  backtrack to: ((drop (succ (succ (succ _v_3))) (drop _t_6 (cons y (cons y _v_5))))=(drop _v_3 (drop (succ _t_6) _v_5)))
  backtrack to: ((drop (succ (succ _v_3)) (drop _t_6 (cons y _v_5)))=(drop _v_3 (drop (succ _t_6) _v_5)))
  rewritten [4]: ((drop (succ (succ (succ _v_3))) (drop _t_6 (cons y (cons y _v_5))))=(drop _v_3 (drop (succ _t_6) _v_5)))
  rewritten [4]: ((drop (succ (succ (succ (succ _v_3)))) (drop _t_6 (cons y (cons y (cons y _v_5)))))=(drop _v_3 (drop (succ _t_6) _v_5)))
  sequence of rewrites only grows
  backtrack to: ((drop (succ (succ (succ _v_3))) (drop _t_6 (cons y (cons y _v_5))))=(drop _v_3 (drop (succ _t_6) _v_5)))
  rewritten [4]: ((drop (succ (succ (succ (succ _v_3)))) (drop _t_6 (cons y (cons y (cons y _v_5)))))=(drop _v_3 (drop (succ _t_6) _v_5)))
  sequence of rewrites only grows
  backtrack to: ((drop (succ (succ (succ _v_3))) (drop _t_6 (cons y (cons y _v_5))))=(drop _v_3 (drop (succ _t_6) _v_5)))
  backtrack to: ((drop (succ (succ _v_3)) (drop _t_6 (cons y _v_5)))=(drop _v_3 (drop (succ _t_6) _v_5)))

The Knowledge Scheme currently contains the following lemmas:


The Knowledge Scheme currently contains the following lemmas:


The Knowledge Scheme currently contains the following lemmas:


The Knowledge Scheme currently contains the following lemmas:


The Knowledge Scheme currently contains the following lemmas:


The Knowledge Scheme currently contains the following lemmas:


The Knowledge Scheme currently contains the following lemmas:


The Knowledge Scheme currently contains the following lemmas:

