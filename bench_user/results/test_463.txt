
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat) (Nat)) ((minus _qv_0 _qv_1)=(minus _qv_1 _qv_0)))
	(forall ((Nat) (Nat) (Nat)) ((minus (minus _qv_2 _qv_3) _qv_4)=(minus _qv_2 (minus _qv_3 _qv_4))))

Simplified goal: (forall ((Nat) (Lst)) ((len (drop n xs))=(minus (len xs) n)))


Base case:       ((len (drop zero _v_5))=(minus (len _v_5) zero))
{
  proven trivially
}
Inductive step:  ((len (drop (succ _t_6) _v_5))=(minus (len _v_5) (succ _t_6)))
{
  {
    ====================
    | Assumptions [0]: (forall ((Nat) (Nat)) ((minus (succ _qv_3) (succ _qv_4))=(minus _qv_3 _qv_4)))
    | Assumptions [1]: (forall ((Nat) (Lst)) ((len (cons _qv_5 _qv_6))=(succ (len _qv_6))))
    | Assumptions [2]: (forall ((Nat)) ((drop _qv_7 nil)=nil))
    | Assumptions [3]: (forall ((Nat) (Nat) (Lst)) ((drop (succ _qv_9) (cons _qv_10 _qv_11))=(drop _qv_9 _qv_11)))
    | Assumptions [4]: (forall ((Lst)) ((len (drop _t_6 xs))=(minus (len xs) _t_6)))
    | Assumptions [5]: (forall ((Lst)) ((minus (len xs) _t_6)=(len (drop _t_6 xs))))
    | Assumptions [6]: (forall ((Nat)) ((minus (len nil) _qv_1)=(len nil)))
    | Assumptions [7]: (forall ((Nat)) ((minus _qv_2 (len nil))=_qv_2))
    | Assumptions [8]: (forall ((Lst)) ((drop (len nil) _qv_8)=_qv_8))
    ====================
  }

Base case:       ((len (drop _v_7 nil))=(minus (len nil) _v_7))
{
  proven trivially
}
Inductive step:  ((len (drop _v_7 (cons _t_8 _t_9)))=(minus (len (cons _t_8 _t_9)) _v_7))
{
  {
    ====================
    | Assumptions [0]: (forall ((Nat) (Nat)) ((minus (succ _qv_3) (succ _qv_4))=(minus _qv_3 _qv_4)))
    | Assumptions [1]: (forall ((Nat) (Lst)) ((len (cons _qv_5 _qv_6))=(succ (len _qv_6))))
    | Assumptions [2]: (forall ((Nat)) ((drop _qv_7 nil)=nil))
    | Assumptions [3]: (forall ((Nat) (Nat) (Lst)) ((drop (succ _qv_9) (cons _qv_10 _qv_11))=(drop _qv_9 _qv_11)))
    | Assumptions [4]: (forall ((Lst)) ((len (drop _t_6 xs))=(minus (len xs) _t_6)))
    | Assumptions [5]: (forall ((Lst)) ((minus (len xs) _t_6)=(len (drop _t_6 xs))))
    | Assumptions [6]: (forall ((Nat)) ((minus (len nil) _qv_1)=(len nil)))
    | Assumptions [7]: (forall ((Nat)) ((minus _qv_2 (len nil))=_qv_2))
    | Assumptions [8]: (forall ((Lst)) ((drop (len nil) _qv_8)=_qv_8))
    | Assumptions [9]: (forall ((Nat)) ((len (drop n _t_9))=(minus (len _t_9) n)))
    | Assumptions [10]: (forall ((Nat)) ((minus (len _t_9) n)=(len (drop n _t_9))))
    ====================
  }
  rewritten [1]: ((len (drop _v_7 (cons _t_8 _t_9)))=(minus (succ (len _t_9)) _v_7))
CURRENT SUBGOAL ((len (drop _v_7 (cons _t_8 _t_9)))=(minus (len (cons _t_8 _t_9)) _v_7))
NOW TESTING (forall ((Nat) (Nat)) ((minus _qv_0 _qv_1)=(minus _qv_1 _qv_0)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((len (drop _v_7 (cons _t_8 _t_9)))=(minus (len (cons _t_8 _t_9)) _v_7))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((minus (minus _qv_2 _qv_3) _qv_4)=(minus _qv_2 (minus _qv_3 _qv_4))))
USE ASSUMPTION FAILED

  backtrack to: ((len (drop _v_7 (cons _t_8 _t_9)))=(minus (len (cons _t_8 _t_9)) _v_7))
  rewritten [1]: ((len (drop _v_7 (cons _t_8 _t_9)))=(minus (succ (len _t_9)) _v_7))
CURRENT SUBGOAL ((len (drop _v_7 (cons _t_8 _t_9)))=(minus (len (cons _t_8 _t_9)) _v_7))
NOW TESTING (forall ((Nat) (Nat)) ((minus _qv_0 _qv_1)=(minus _qv_1 _qv_0)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((len (drop _v_7 (cons _t_8 _t_9)))=(minus (len (cons _t_8 _t_9)) _v_7))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((minus (minus _qv_2 _qv_3) _qv_4)=(minus _qv_2 (minus _qv_3 _qv_4))))
USE ASSUMPTION FAILED

  backtrack to: ((len (drop _v_7 (cons _t_8 _t_9)))=(minus (len (cons _t_8 _t_9)) _v_7))
Unknown
sat
