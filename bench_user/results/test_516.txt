
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat) (Nat)) ((less _qv_0 _qv_1)=(less _qv_1 _qv_0)))
	(forall ((Lst)) ((sort (sort _qv_2))=_qv_2))
	(forall ((Nat) (Lst) (Lst)) ((insort _qv_3 (cons _qv_4 _qv_5))=(cons (insort _qv_3 _qv_4) (insort _qv_3 _qv_5))))
	(forall ((Nat) (Lst) (Lst)) ((cons _qv_6 (insort _qv_7 _qv_8))=(insort (cons _qv_6 _qv_7) (cons _qv_6 _qv_8))))

Simplified goal: (forall ((Lst) (Nat)) ((sorted x)->(sorted (insort y x))))


Base case:       (sorted (insort _v_9 nil))
{
  proven trivially
}
Inductive step:  (sorted (insort _v_9 (cons _t_10 _t_11)))
{
  {
    ====================
    | Assumptions [0]: (sorted nil)
    | Assumptions [1]: ((sort nil)=nil)
    | Assumptions [2]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
    | Assumptions [3]: (forall ((Nat)) ((insort _qv_5 nil)=(cons _qv_5 nil)))
    | Assumptions [4]: (forall ((Nat) (Nat) (Lst)) ((insort _qv_6 (cons _qv_7 _qv_8))=ite((less _qv_6 _qv_7), (cons _qv_6 (cons _qv_7 _qv_8)), (cons _qv_7 (insort _qv_6 _qv_8)))))
    | Assumptions [5]: (forall ((Nat) (Nat) (Lst)) ((sorted (cons _qv_10 (cons _qv_11 _qv_12)))=((sorted (cons _qv_11 _qv_12))&&((_qv_10=_qv_11)||(less _qv_10 _qv_11)))))
    | Assumptions [6]: (forall ((Nat) (Lst)) ((sort (cons _qv_13 _qv_14))=(insort _qv_13 (sort _qv_14))))
    | Assumptions [7]: (forall ((Nat)) ((sorted _t_11)->(sorted (insort y _t_11))))
    | Assumptions [8]: (sorted (cons _t_10 _t_11))
    | Assumptions [9]: (forall ((Nat)) (!(less _qv_1 zero)))
    | Assumptions [10]: (forall ((Nat)) (less zero (succ _qv_2)))
    | Assumptions [11]: (forall ((Nat)) (sorted (cons _qv_9 nil)))
    | Assumptions [12]: (sorted (cons _t_10 nil))
    | Assumptions [13]: ((sorted (cons _qv_10 (cons _t_10 _t_11)))=((sorted (cons _t_10 _t_11))&&((_qv_10=_t_10)||(less _qv_10 _t_10))))
    ====================
  }
  rewritten [4]: (sorted ite((less _v_9 _t_10), (cons _v_9 (cons _t_10 _t_11)), (cons _t_10 (insort _v_9 _t_11))))
  proceed with (part 1/2): ((less _v_9 _t_10)->(sorted (cons _v_9 (cons _t_10 _t_11))))
  {
      proven trivially (with Z3)
  }
  adding ((less _v_9 _t_10)->(sorted (cons _v_9 (cons _t_10 _t_11)))) to assumptions
  proceed with (part 2/2): ((!(less _v_9 _t_10))->(sorted (cons _t_10 (insort _v_9 _t_11))))
  {
    {
      ====================
      | Assumptions [0]: (sorted nil)
      | Assumptions [1]: ((sort nil)=nil)
      | Assumptions [2]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
      | Assumptions [3]: (forall ((Nat)) ((insort _qv_5 nil)=(cons _qv_5 nil)))
      | Assumptions [4]: (forall ((Nat) (Nat) (Lst)) ((insort _qv_6 (cons _qv_7 _qv_8))=ite((less _qv_6 _qv_7), (cons _qv_6 (cons _qv_7 _qv_8)), (cons _qv_7 (insort _qv_6 _qv_8)))))
      | Assumptions [5]: (forall ((Nat) (Nat) (Lst)) ((sorted (cons _qv_10 (cons _qv_11 _qv_12)))=((sorted (cons _qv_11 _qv_12))&&((_qv_10=_qv_11)||(less _qv_10 _qv_11)))))
      | Assumptions [6]: (forall ((Nat) (Lst)) ((sort (cons _qv_13 _qv_14))=(insort _qv_13 (sort _qv_14))))
      | Assumptions [7]: (forall ((Nat)) ((sorted _t_11)->(sorted (insort y _t_11))))
      | Assumptions [8]: (sorted (cons _t_10 _t_11))
      | Assumptions [9]: (forall ((Nat)) (!(less _qv_1 zero)))
      | Assumptions [10]: (forall ((Nat)) (less zero (succ _qv_2)))
      | Assumptions [11]: (forall ((Nat)) (sorted (cons _qv_9 nil)))
      | Assumptions [12]: (sorted (cons _t_10 nil))
      | Assumptions [13]: ((sorted (cons _qv_10 (cons _t_10 _t_11)))=((sorted (cons _t_10 _t_11))&&((_qv_10=_t_10)||(less _qv_10 _t_10))))
      | Assumptions [14]: ((less _v_9 _t_10)->(sorted (cons _v_9 (cons _t_10 _t_11))))
      | Assumptions [15]: (!(less _v_9 _t_10))
      | Assumptions [16]: ((less _v_9 _t_10)->((sorted (cons _t_10 _t_11))&&((less _v_9 _t_10)||(_v_9=_t_10))))
      | Assumptions [17]: (!(less _v_9 zero))
      ====================
    }
    current subgoal: (sorted (cons _t_10 (insort _v_9 _t_11)))
  }
  will try subgoals again
  proceed with (part 1/1): ((!(less _v_9 _t_10))->(sorted (cons _t_10 (insort _v_9 _t_11))))
  {
    {
      ====================
      | Assumptions [0]: (sorted nil)
      | Assumptions [1]: ((sort nil)=nil)
      | Assumptions [2]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
      | Assumptions [3]: (forall ((Nat)) ((insort _qv_5 nil)=(cons _qv_5 nil)))
      | Assumptions [4]: (forall ((Nat) (Nat) (Lst)) ((insort _qv_6 (cons _qv_7 _qv_8))=ite((less _qv_6 _qv_7), (cons _qv_6 (cons _qv_7 _qv_8)), (cons _qv_7 (insort _qv_6 _qv_8)))))
      | Assumptions [5]: (forall ((Nat) (Nat) (Lst)) ((sorted (cons _qv_10 (cons _qv_11 _qv_12)))=((sorted (cons _qv_11 _qv_12))&&((_qv_10=_qv_11)||(less _qv_10 _qv_11)))))
      | Assumptions [6]: (forall ((Nat) (Lst)) ((sort (cons _qv_13 _qv_14))=(insort _qv_13 (sort _qv_14))))
      | Assumptions [7]: (forall ((Nat)) ((sorted _t_11)->(sorted (insort y _t_11))))
      | Assumptions [8]: (sorted (cons _t_10 _t_11))
      | Assumptions [9]: (forall ((Nat)) (!(less _qv_1 zero)))
      | Assumptions [10]: (forall ((Nat)) (less zero (succ _qv_2)))
      | Assumptions [11]: (forall ((Nat)) (sorted (cons _qv_9 nil)))
      | Assumptions [12]: (sorted (cons _t_10 nil))
      | Assumptions [13]: ((sorted (cons _qv_10 (cons _t_10 _t_11)))=((sorted (cons _t_10 _t_11))&&((_qv_10=_t_10)||(less _qv_10 _t_10))))
      | Assumptions [14]: ((less _v_9 _t_10)->(sorted (cons _v_9 (cons _t_10 _t_11))))
      | Assumptions [15]: (!(less _v_9 _t_10))
      | Assumptions [16]: ((less _v_9 _t_10)->((sorted (cons _t_10 _t_11))&&((less _v_9 _t_10)||(_v_9=_t_10))))
      | Assumptions [17]: (!(less _v_9 zero))
      ====================
    }
    current subgoal: (sorted (cons _t_10 (insort _v_9 _t_11)))
  }
  cannot prove 1 of the subgoals
CURRENT SUBGOAL (sorted (insort _v_9 (cons _t_10 _t_11)))
NOW TESTING (forall ((Nat) (Nat)) ((less _qv_0 _qv_1)=(less _qv_1 _qv_0)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (sorted (insort _v_9 (cons _t_10 _t_11)))
NOW TESTING (forall ((Lst)) ((sort (sort _qv_2))=_qv_2))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (sorted (insort _v_9 (cons _t_10 _t_11)))
NOW TESTING (forall ((Nat) (Lst) (Lst)) ((insort _qv_3 (cons _qv_4 _qv_5))=(cons (insort _qv_3 _qv_4) (insort _qv_3 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (sorted (insort _v_9 (cons _t_10 _t_11)))
NOW TESTING (forall ((Nat) (Lst) (Lst)) ((cons _qv_6 (insort _qv_7 _qv_8))=(insort (cons _qv_6 _qv_7) (cons _qv_6 _qv_8))))
USE ASSUMPTION FAILED

  backtrack to: (sorted (insort _v_9 (cons _t_10 _t_11)))
  rewritten [4]: (sorted ite((less _v_9 _t_10), (cons _v_9 (cons _t_10 _t_11)), (cons _t_10 (insort _v_9 _t_11))))
  proceed with (part 1/2): ((less _v_9 _t_10)->(sorted (cons _v_9 (cons _t_10 _t_11))))
  {
      proven trivially (with Z3)
  }
  adding ((less _v_9 _t_10)->(sorted (cons _v_9 (cons _t_10 _t_11)))) to assumptions
  proceed with (part 2/2): ((!(less _v_9 _t_10))->(sorted (cons _t_10 (insort _v_9 _t_11))))
  {
    {
      ====================
      | Assumptions [0]: (sorted nil)
      | Assumptions [1]: ((sort nil)=nil)
      | Assumptions [2]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
      | Assumptions [3]: (forall ((Nat)) ((insort _qv_5 nil)=(cons _qv_5 nil)))
      | Assumptions [4]: (forall ((Nat) (Nat) (Lst)) ((insort _qv_6 (cons _qv_7 _qv_8))=ite((less _qv_6 _qv_7), (cons _qv_6 (cons _qv_7 _qv_8)), (cons _qv_7 (insort _qv_6 _qv_8)))))
      | Assumptions [5]: (forall ((Nat) (Nat) (Lst)) ((sorted (cons _qv_10 (cons _qv_11 _qv_12)))=((sorted (cons _qv_11 _qv_12))&&((_qv_10=_qv_11)||(less _qv_10 _qv_11)))))
      | Assumptions [6]: (forall ((Nat) (Lst)) ((sort (cons _qv_13 _qv_14))=(insort _qv_13 (sort _qv_14))))
      | Assumptions [7]: (forall ((Nat)) ((sorted _t_11)->(sorted (insort y _t_11))))
      | Assumptions [8]: (sorted (cons _t_10 _t_11))
      | Assumptions [9]: (forall ((Nat)) (!(less _qv_1 zero)))
      | Assumptions [10]: (forall ((Nat)) (less zero (succ _qv_2)))
      | Assumptions [11]: (forall ((Nat)) (sorted (cons _qv_9 nil)))
      | Assumptions [12]: (sorted (cons _t_10 nil))
      | Assumptions [13]: ((sorted (cons _qv_10 (cons _t_10 _t_11)))=((sorted (cons _t_10 _t_11))&&((_qv_10=_t_10)||(less _qv_10 _t_10))))
      | Assumptions [14]: ((less _v_9 _t_10)->(sorted (cons _v_9 (cons _t_10 _t_11))))
      | Assumptions [15]: (!(less _v_9 _t_10))
      | Assumptions [16]: ((less _v_9 _t_10)->((sorted (cons _t_10 _t_11))&&((less _v_9 _t_10)||(_v_9=_t_10))))
      | Assumptions [17]: (!(less _v_9 zero))
      ====================
    }
    current subgoal: (sorted (cons _t_10 (insort _v_9 _t_11)))
  }
  will try subgoals again
  proceed with (part 1/1): ((!(less _v_9 _t_10))->(sorted (cons _t_10 (insort _v_9 _t_11))))
  {
    {
      ====================
      | Assumptions [0]: (sorted nil)
      | Assumptions [1]: ((sort nil)=nil)
      | Assumptions [2]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
      | Assumptions [3]: (forall ((Nat)) ((insort _qv_5 nil)=(cons _qv_5 nil)))
      | Assumptions [4]: (forall ((Nat) (Nat) (Lst)) ((insort _qv_6 (cons _qv_7 _qv_8))=ite((less _qv_6 _qv_7), (cons _qv_6 (cons _qv_7 _qv_8)), (cons _qv_7 (insort _qv_6 _qv_8)))))
      | Assumptions [5]: (forall ((Nat) (Nat) (Lst)) ((sorted (cons _qv_10 (cons _qv_11 _qv_12)))=((sorted (cons _qv_11 _qv_12))&&((_qv_10=_qv_11)||(less _qv_10 _qv_11)))))
      | Assumptions [6]: (forall ((Nat) (Lst)) ((sort (cons _qv_13 _qv_14))=(insort _qv_13 (sort _qv_14))))
      | Assumptions [7]: (forall ((Nat)) ((sorted _t_11)->(sorted (insort y _t_11))))
      | Assumptions [8]: (sorted (cons _t_10 _t_11))
      | Assumptions [9]: (forall ((Nat)) (!(less _qv_1 zero)))
      | Assumptions [10]: (forall ((Nat)) (less zero (succ _qv_2)))
      | Assumptions [11]: (forall ((Nat)) (sorted (cons _qv_9 nil)))
      | Assumptions [12]: (sorted (cons _t_10 nil))
      | Assumptions [13]: ((sorted (cons _qv_10 (cons _t_10 _t_11)))=((sorted (cons _t_10 _t_11))&&((_qv_10=_t_10)||(less _qv_10 _t_10))))
      | Assumptions [14]: ((less _v_9 _t_10)->(sorted (cons _v_9 (cons _t_10 _t_11))))
      | Assumptions [15]: (!(less _v_9 _t_10))
      | Assumptions [16]: ((less _v_9 _t_10)->((sorted (cons _t_10 _t_11))&&((less _v_9 _t_10)||(_v_9=_t_10))))
      | Assumptions [17]: (!(less _v_9 zero))
      ====================
    }
    current subgoal: (sorted (cons _t_10 (insort _v_9 _t_11)))
  }
  cannot prove 1 of the subgoals
CURRENT SUBGOAL (sorted (insort _v_9 (cons _t_10 _t_11)))
NOW TESTING (forall ((Nat) (Nat)) ((less _qv_0 _qv_1)=(less _qv_1 _qv_0)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (sorted (insort _v_9 (cons _t_10 _t_11)))
NOW TESTING (forall ((Lst)) ((sort (sort _qv_2))=_qv_2))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (sorted (insort _v_9 (cons _t_10 _t_11)))
NOW TESTING (forall ((Nat) (Lst) (Lst)) ((insort _qv_3 (cons _qv_4 _qv_5))=(cons (insort _qv_3 _qv_4) (insort _qv_3 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (sorted (insort _v_9 (cons _t_10 _t_11)))
NOW TESTING (forall ((Nat) (Lst) (Lst)) ((cons _qv_6 (insort _qv_7 _qv_8))=(insort (cons _qv_6 _qv_7) (cons _qv_6 _qv_8))))
USE ASSUMPTION FAILED

  backtrack to: (sorted (insort _v_9 (cons _t_10 _t_11)))

Base case:       (sorted (insort zero _v_12))
{
  {
    ====================
    | Assumptions [0]: (sorted nil)
    | Assumptions [1]: ((sort nil)=nil)
    | Assumptions [2]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
    | Assumptions [3]: (forall ((Nat)) ((insort _qv_5 nil)=(cons _qv_5 nil)))
    | Assumptions [4]: (forall ((Nat) (Nat) (Lst)) ((insort _qv_6 (cons _qv_7 _qv_8))=ite((less _qv_6 _qv_7), (cons _qv_6 (cons _qv_7 _qv_8)), (cons _qv_7 (insort _qv_6 _qv_8)))))
    | Assumptions [5]: (forall ((Nat) (Nat) (Lst)) ((sorted (cons _qv_10 (cons _qv_11 _qv_12)))=((sorted (cons _qv_11 _qv_12))&&((_qv_10=_qv_11)||(less _qv_10 _qv_11)))))
    | Assumptions [6]: (forall ((Nat) (Lst)) ((sort (cons _qv_13 _qv_14))=(insort _qv_13 (sort _qv_14))))
    | Assumptions [7]: (forall ((Nat)) ((sorted _t_11)->(sorted (insort y _t_11))))
    | Assumptions [8]: (sorted (cons _t_10 _t_11))
    | Assumptions [9]: (forall ((Nat)) (!(less _qv_1 zero)))
    | Assumptions [10]: (forall ((Nat)) (less zero (succ _qv_2)))
    | Assumptions [11]: (forall ((Nat)) (sorted (cons _qv_9 nil)))
    | Assumptions [12]: (sorted (cons _t_10 nil))
    | Assumptions [13]: ((sorted (cons _qv_10 (cons _t_10 _t_11)))=((sorted (cons _t_10 _t_11))&&((_qv_10=_t_10)||(less _qv_10 _t_10))))
    | Assumptions [14]: ((less _v_9 _t_10)->(sorted (cons _v_9 (cons _t_10 _t_11))))
    | Assumptions [15]: (sorted _v_12)
    | Assumptions [16]: ((less _v_9 _t_10)->((sorted (cons _t_10 _t_11))&&((less _v_9 _t_10)||(_v_9=_t_10))))
    ====================
  }
}
Unknown
sat
