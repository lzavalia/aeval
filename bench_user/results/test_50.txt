
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
	(forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
	(forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
	(forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
	(forall ((Nat)) (0<=(nat-to-int _qv_11)))
	(forall ((Nat)) ((nat-to-int (succ _qv_12))=(nat-to-int _qv_12)))
	(forall ((Lst)) ((nat-to-int (len _qv_13))=(nat-to-int _qv_13)))
	(forall ((Nat) (Nat)) ((succ (plus _qv_14 _qv_15))=(plus (succ _qv_14) (succ _qv_15))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_14 _qv_15))=(plus (succ _qv_15) (succ _qv_14))))

Simplified goal: (forall ((Nat) (Nat) (Lst)) ((rotate (succ n) (rotate m x))=(rotate (succ m) (rotate n x))))


Base case:       ((rotate (succ zero) (rotate _v_16 _v_17))=(rotate (succ _v_16) (rotate zero _v_17)))
{
  {
    ====================
    | Assumptions [0]: (forall ((Nat) (Lst)) ((len (cons _qv_1 _qv_2))=(succ (len _qv_2))))
    | Assumptions [1]: (forall ((Lst)) ((append nil _qv_3)=_qv_3))
    | Assumptions [2]: (forall ((Nat) (Lst) (Lst)) ((append (cons _qv_4 _qv_5) _qv_6)=(cons _qv_4 (append _qv_5 _qv_6))))
    | Assumptions [3]: (forall ((Nat)) ((rotate (succ _qv_8) nil)=nil))
    | Assumptions [4]: (forall ((Nat) (Nat) (Lst)) ((rotate (succ _qv_9) (cons _qv_10 _qv_11))=(rotate _qv_9 (append _qv_11 (cons _qv_10 nil)))))
    | Assumptions [5]: (forall ((Nat) (Nat)) ((plus (succ _qv_13) _qv_14)=(succ (plus _qv_13 _qv_14))))
    | Assumptions [6]: (forall ((Nat)) ((nat-to-int _qv_15)>=0))
    | Assumptions [7]: (forall ((Nat) (Nat)) (((nat-to-int _qv_16)=(nat-to-int _qv_17))->(_qv_16=_qv_17)))
    | Assumptions [8]: (forall ((Nat)) ((nat-to-int (succ _qv_18))=(1+(nat-to-int _qv_18))))
    | Assumptions [9]: (forall ((Nat) (Nat)) ((nat-to-int (plus _qv_19 _qv_20))=((nat-to-int _qv_19)+(nat-to-int _qv_20))))
    | Assumptions [10]: (forall ((Lst)) ((rotate (len nil) _qv_7)=_qv_7))
    | Assumptions [11]: (forall ((Nat)) ((plus (len nil) _qv_12)=_qv_12))
    | Assumptions [12]: ((nat-to-int (len nil))=0)
    ====================
  }
  rewritten [10]: ((rotate (succ (len nil)) (rotate _v_16 _v_17))=(rotate (succ _v_16) _v_17))

The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_18))=_qv_18))
	(forall ((Lst) (Lst)) ((append _qv_19 _qv_20)=(append _qv_20 _qv_19)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_21 _qv_22) _qv_23)=(append _qv_21 (append _qv_22 _qv_23))))
	(forall ((Nat) (Nat)) ((plus _qv_24 _qv_25)=(plus _qv_25 _qv_24)))
	(forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_26 _qv_27) _qv_28)=(plus _qv_26 (plus _qv_27 _qv_28))))
	(forall ((Nat)) (0<=(nat-to-int _qv_29)))
	(forall ((Nat)) ((nat-to-int (succ _qv_30))=(nat-to-int _qv_30)))
	(forall ((Lst)) ((nat-to-int (len _qv_31))=(nat-to-int _qv_31)))
	(forall ((Nat) (Nat)) ((succ (plus _qv_32 _qv_33))=(plus (succ _qv_32) (succ _qv_33))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_32 _qv_33))=(plus (succ _qv_33) (succ _qv_32))))


The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_36))=_qv_36))
	(forall ((Lst) (Lst)) ((append _qv_37 _qv_38)=(append _qv_38 _qv_37)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_39 _qv_40) _qv_41)=(append _qv_39 (append _qv_40 _qv_41))))
	(forall ((Nat) (Nat)) ((plus _qv_42 _qv_43)=(plus _qv_43 _qv_42)))
	(forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_44 _qv_45) _qv_46)=(plus _qv_44 (plus _qv_45 _qv_46))))
	(forall ((Nat)) (0<=(nat-to-int _qv_47)))
	(forall ((Nat)) ((nat-to-int (succ _qv_48))=(nat-to-int _qv_48)))
	(forall ((Lst)) ((nat-to-int (len _qv_49))=(nat-to-int _qv_49)))
	(forall ((Nat) (Nat)) ((succ (plus _qv_50 _qv_51))=(plus (succ _qv_50) (succ _qv_51))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_50 _qv_51))=(plus (succ _qv_51) (succ _qv_50))))

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_18))=_qv_18))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_19 _qv_20)=(append _qv_20 _qv_19)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_21 _qv_22) _qv_23)=(append _qv_21 (append _qv_22 _qv_23))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_24 _qv_25)=(plus _qv_25 _qv_24)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_26 _qv_27) _qv_28)=(plus _qv_26 (plus _qv_27 _qv_28))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_29)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_30))=(nat-to-int _qv_30)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_31))=(nat-to-int _qv_31)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_32 _qv_33))=(plus (succ _qv_32) (succ _qv_33))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_32 _qv_33))=(plus (succ _qv_33) (succ _qv_32))))
USE ASSUMPTION FAILED


The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_36))=_qv_36))
	(forall ((Lst) (Lst)) ((append _qv_37 _qv_38)=(append _qv_38 _qv_37)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_39 _qv_40) _qv_41)=(append _qv_39 (append _qv_40 _qv_41))))
	(forall ((Nat) (Nat)) ((plus _qv_42 _qv_43)=(plus _qv_43 _qv_42)))
	(forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_44 _qv_45) _qv_46)=(plus _qv_44 (plus _qv_45 _qv_46))))
	(forall ((Nat)) (0<=(nat-to-int _qv_47)))
	(forall ((Nat)) ((nat-to-int (succ _qv_48))=(nat-to-int _qv_48)))
	(forall ((Lst)) ((nat-to-int (len _qv_49))=(nat-to-int _qv_49)))
	(forall ((Nat) (Nat)) ((succ (plus _qv_50 _qv_51))=(plus (succ _qv_50) (succ _qv_51))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_50 _qv_51))=(plus (succ _qv_51) (succ _qv_50))))

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_18))=_qv_18))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_19 _qv_20)=(append _qv_20 _qv_19)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_21 _qv_22) _qv_23)=(append _qv_21 (append _qv_22 _qv_23))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_24 _qv_25)=(plus _qv_25 _qv_24)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_26 _qv_27) _qv_28)=(plus _qv_26 (plus _qv_27 _qv_28))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_29)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_30))=(nat-to-int _qv_30)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_31))=(nat-to-int _qv_31)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_32 _qv_33))=(plus (succ _qv_32) (succ _qv_33))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_32 _qv_33))=(plus (succ _qv_33) (succ _qv_32))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_16 _v_17))=(rotate (succ _v_16) (rotate (len nil) _v_17)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_16 _v_17))=(rotate (succ _v_16) (rotate (len nil) _v_17)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_16 _v_17))=(rotate (succ _v_16) (rotate (len nil) _v_17)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_16 _v_17))=(rotate (succ _v_16) (rotate (len nil) _v_17)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_16 _v_17))=(rotate (succ _v_16) (rotate (len nil) _v_17)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_16 _v_17))=(rotate (succ _v_16) (rotate (len nil) _v_17)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_11)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_16 _v_17))=(rotate (succ _v_16) (rotate (len nil) _v_17)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_12))=(nat-to-int _qv_12)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_16 _v_17))=(rotate (succ _v_16) (rotate (len nil) _v_17)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_13))=(nat-to-int _qv_13)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_16 _v_17))=(rotate (succ _v_16) (rotate (len nil) _v_17)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_14 _qv_15))=(plus (succ _qv_14) (succ _qv_15))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_16 _v_17))=(rotate (succ _v_16) (rotate (len nil) _v_17)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_14 _qv_15))=(plus (succ _qv_15) (succ _qv_14))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len nil)) (rotate _v_16 _v_17))=(rotate (succ _v_16) (rotate (len nil) _v_17)))
  rewritten [10]: ((rotate (succ (len nil)) (rotate _v_16 _v_17))=(rotate (succ _v_16) _v_17))

The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_18))=_qv_18))
	(forall ((Lst) (Lst)) ((append _qv_19 _qv_20)=(append _qv_20 _qv_19)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_21 _qv_22) _qv_23)=(append _qv_21 (append _qv_22 _qv_23))))
	(forall ((Nat) (Nat)) ((plus _qv_24 _qv_25)=(plus _qv_25 _qv_24)))
	(forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_26 _qv_27) _qv_28)=(plus _qv_26 (plus _qv_27 _qv_28))))
	(forall ((Nat)) (0<=(nat-to-int _qv_29)))
	(forall ((Nat)) ((nat-to-int (succ _qv_30))=(nat-to-int _qv_30)))
	(forall ((Lst)) ((nat-to-int (len _qv_31))=(nat-to-int _qv_31)))
	(forall ((Nat) (Nat)) ((succ (plus _qv_32 _qv_33))=(plus (succ _qv_32) (succ _qv_33))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_32 _qv_33))=(plus (succ _qv_33) (succ _qv_32))))


The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_36))=_qv_36))
	(forall ((Lst) (Lst)) ((append _qv_37 _qv_38)=(append _qv_38 _qv_37)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_39 _qv_40) _qv_41)=(append _qv_39 (append _qv_40 _qv_41))))
	(forall ((Nat) (Nat)) ((plus _qv_42 _qv_43)=(plus _qv_43 _qv_42)))
	(forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_44 _qv_45) _qv_46)=(plus _qv_44 (plus _qv_45 _qv_46))))
	(forall ((Nat)) (0<=(nat-to-int _qv_47)))
	(forall ((Nat)) ((nat-to-int (succ _qv_48))=(nat-to-int _qv_48)))
	(forall ((Lst)) ((nat-to-int (len _qv_49))=(nat-to-int _qv_49)))
	(forall ((Nat) (Nat)) ((succ (plus _qv_50 _qv_51))=(plus (succ _qv_50) (succ _qv_51))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_50 _qv_51))=(plus (succ _qv_51) (succ _qv_50))))

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_18))=_qv_18))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_19 _qv_20)=(append _qv_20 _qv_19)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_21 _qv_22) _qv_23)=(append _qv_21 (append _qv_22 _qv_23))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_24 _qv_25)=(plus _qv_25 _qv_24)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_26 _qv_27) _qv_28)=(plus _qv_26 (plus _qv_27 _qv_28))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_29)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_30))=(nat-to-int _qv_30)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_31))=(nat-to-int _qv_31)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_32 _qv_33))=(plus (succ _qv_32) (succ _qv_33))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_32 _qv_33))=(plus (succ _qv_33) (succ _qv_32))))
USE ASSUMPTION FAILED


The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_36))=_qv_36))
	(forall ((Lst) (Lst)) ((append _qv_37 _qv_38)=(append _qv_38 _qv_37)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_39 _qv_40) _qv_41)=(append _qv_39 (append _qv_40 _qv_41))))
	(forall ((Nat) (Nat)) ((plus _qv_42 _qv_43)=(plus _qv_43 _qv_42)))
	(forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_44 _qv_45) _qv_46)=(plus _qv_44 (plus _qv_45 _qv_46))))
	(forall ((Nat)) (0<=(nat-to-int _qv_47)))
	(forall ((Nat)) ((nat-to-int (succ _qv_48))=(nat-to-int _qv_48)))
	(forall ((Lst)) ((nat-to-int (len _qv_49))=(nat-to-int _qv_49)))
	(forall ((Nat) (Nat)) ((succ (plus _qv_50 _qv_51))=(plus (succ _qv_50) (succ _qv_51))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_50 _qv_51))=(plus (succ _qv_51) (succ _qv_50))))

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_18))=_qv_18))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_19 _qv_20)=(append _qv_20 _qv_19)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_21 _qv_22) _qv_23)=(append _qv_21 (append _qv_22 _qv_23))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_24 _qv_25)=(plus _qv_25 _qv_24)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_26 _qv_27) _qv_28)=(plus _qv_26 (plus _qv_27 _qv_28))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_29)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_30))=(nat-to-int _qv_30)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_31))=(nat-to-int _qv_31)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_32 _qv_33))=(plus (succ _qv_32) (succ _qv_33))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_35 nil))=(rotate (succ _v_35) nil))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_32 _qv_33))=(plus (succ _qv_33) (succ _qv_32))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_16 _v_17))=(rotate (succ _v_16) (rotate (len nil) _v_17)))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_16 _v_17))=(rotate (succ _v_16) (rotate (len nil) _v_17)))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_16 _v_17))=(rotate (succ _v_16) (rotate (len nil) _v_17)))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_16 _v_17))=(rotate (succ _v_16) (rotate (len nil) _v_17)))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_16 _v_17))=(rotate (succ _v_16) (rotate (len nil) _v_17)))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_16 _v_17))=(rotate (succ _v_16) (rotate (len nil) _v_17)))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_11)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_16 _v_17))=(rotate (succ _v_16) (rotate (len nil) _v_17)))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_12))=(nat-to-int _qv_12)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_16 _v_17))=(rotate (succ _v_16) (rotate (len nil) _v_17)))
NOW TESTING (forall ((Lst)) ((nat-to-int (len _qv_13))=(nat-to-int _qv_13)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_16 _v_17))=(rotate (succ _v_16) (rotate (len nil) _v_17)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_14 _qv_15))=(plus (succ _qv_14) (succ _qv_15))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (succ (len nil)) (rotate _v_16 _v_17))=(rotate (succ _v_16) (rotate (len nil) _v_17)))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_14 _qv_15))=(plus (succ _qv_15) (succ _qv_14))))
USE ASSUMPTION FAILED

  backtrack to: ((rotate (succ (len nil)) (rotate _v_16 _v_17))=(rotate (succ _v_16) (rotate (len nil) _v_17)))
}

Base case:       ((rotate (succ _v_18) (rotate zero _v_19))=(rotate (succ zero) (rotate _v_18 _v_19)))
{
  {
    ====================
    | Assumptions [0]: (forall ((Nat) (Lst)) ((len (cons _qv_1 _qv_2))=(succ (len _qv_2))))
    | Assumptions [1]: (forall ((Lst)) ((append nil _qv_3)=_qv_3))
    | Assumptions [2]: (forall ((Nat) (Lst) (Lst)) ((append (cons _qv_4 _qv_5) _qv_6)=(cons _qv_4 (append _qv_5 _qv_6))))
    | Assumptions [3]: (forall ((Nat)) ((rotate (succ _qv_8) nil)=nil))
    | Assumptions [4]: (forall ((Nat) (Nat) (Lst)) ((rotate (succ _qv_9) (cons _qv_10 _qv_11))=(rotate _qv_9 (append _qv_11 (cons _qv_10 nil)))))
    | Assumptions [5]: (forall ((Nat) (Nat)) ((plus (succ _qv_13) _qv_14)=(succ (plus _qv_13 _qv_14))))
    | Assumptions [6]: (forall ((Nat)) ((nat-to-int _qv_15)>=0))
    | Assumptions [7]: (forall ((Nat) (Nat)) (((nat-to-int _qv_16)=(nat-to-int _qv_17))->(_qv_16=_qv_17)))
    | Assumptions [8]: (forall ((Nat)) ((nat-to-int (succ _qv_18))=(1+(nat-to-int _qv_18))))
    | Assumptions [9]: (forall ((Nat) (Nat)) ((nat-to-int (plus _qv_19 _qv_20))=((nat-to-int _qv_19)+(nat-to-int _qv_20))))
    | Assumptions [10]: (forall ((Lst)) ((rotate (len nil) _qv_7)=_qv_7))
    | Assumptions [11]: (forall ((Nat)) ((plus (len nil) _qv_12)=_qv_12))
    | Assumptions [12]: ((nat-to-int (len nil))=0)
    ====================
  }
}

Base case:       ((rotate (succ _v_20) (rotate _v_21 nil))=(rotate (succ _v_21) (rotate _v_20 nil)))
{
  {
    ====================
    | Assumptions [0]: (forall ((Nat) (Lst)) ((len (cons _qv_1 _qv_2))=(succ (len _qv_2))))
    | Assumptions [1]: (forall ((Lst)) ((append nil _qv_3)=_qv_3))
    | Assumptions [2]: (forall ((Nat) (Lst) (Lst)) ((append (cons _qv_4 _qv_5) _qv_6)=(cons _qv_4 (append _qv_5 _qv_6))))
    | Assumptions [3]: (forall ((Nat)) ((rotate (succ _qv_8) nil)=nil))
    | Assumptions [4]: (forall ((Nat) (Nat) (Lst)) ((rotate (succ _qv_9) (cons _qv_10 _qv_11))=(rotate _qv_9 (append _qv_11 (cons _qv_10 nil)))))
    | Assumptions [5]: (forall ((Nat) (Nat)) ((plus (succ _qv_13) _qv_14)=(succ (plus _qv_13 _qv_14))))
    | Assumptions [6]: (forall ((Nat)) ((nat-to-int _qv_15)>=0))
    | Assumptions [7]: (forall ((Nat) (Nat)) (((nat-to-int _qv_16)=(nat-to-int _qv_17))->(_qv_16=_qv_17)))
    | Assumptions [8]: (forall ((Nat)) ((nat-to-int (succ _qv_18))=(1+(nat-to-int _qv_18))))
    | Assumptions [9]: (forall ((Nat) (Nat)) ((nat-to-int (plus _qv_19 _qv_20))=((nat-to-int _qv_19)+(nat-to-int _qv_20))))
    | Assumptions [10]: (forall ((Lst)) ((rotate (len nil) _qv_7)=_qv_7))
    | Assumptions [11]: (forall ((Nat)) ((plus (len nil) _qv_12)=_qv_12))
    | Assumptions [12]: ((nat-to-int (len nil))=0)
    ====================
  }
}
Unknown
sat
