
The Knowledge Scheme currently contains the following lemmas:

Simplified goal: (forall ((Nat) (Nat) (Nat) (Lst)) ((drop w (drop x (drop y z)))=(drop y (drop x (drop w z)))))


Base case:       ((drop _v_1 (drop zero (drop _v_0 _v_2)))=(drop _v_0 (drop zero (drop _v_1 _v_2))))
{
  {
    ====================
    | Assumptions [0]: (forall ((Nat)) ((drop _qv_1 nil)=nil))
    | Assumptions [1]: (forall ((Lst)) ((drop zero _qv_2)=_qv_2))
    | Assumptions [2]: (forall ((Nat) (Nat) (Lst)) ((drop (succ _qv_3) (cons _qv_4 _qv_5))=(drop _qv_3 _qv_5)))
    ====================
  }
  rewritten [1]: ((drop _v_1 (drop _v_0 _v_2))=(drop _v_0 (drop zero (drop _v_1 _v_2))))
  rewritten [1]: ((drop _v_1 (drop _v_0 _v_2))=(drop _v_0 (drop _v_1 _v_2)))

The Knowledge Scheme currently contains the following lemmas:

  backtrack to: ((drop _v_1 (drop _v_0 _v_2))=(drop _v_0 (drop zero (drop _v_1 _v_2))))
  rewritten [1]: ((drop _v_1 (drop _v_0 _v_2))=(drop _v_0 (drop _v_1 _v_2)))

The Knowledge Scheme currently contains the following lemmas:

  backtrack to: ((drop _v_1 (drop _v_0 _v_2))=(drop _v_0 (drop zero (drop _v_1 _v_2))))
  backtrack to: ((drop _v_1 (drop zero (drop _v_0 _v_2)))=(drop _v_0 (drop zero (drop _v_1 _v_2))))
  rewritten [1]: ((drop _v_1 (drop zero (drop _v_0 _v_2)))=(drop _v_0 (drop _v_1 _v_2)))
  rewritten [1]: ((drop _v_1 (drop _v_0 _v_2))=(drop _v_0 (drop _v_1 _v_2)))

The Knowledge Scheme currently contains the following lemmas:

  backtrack to: ((drop _v_1 (drop zero (drop _v_0 _v_2)))=(drop _v_0 (drop _v_1 _v_2)))
  rewritten [1]: ((drop _v_1 (drop _v_0 _v_2))=(drop _v_0 (drop _v_1 _v_2)))

The Knowledge Scheme currently contains the following lemmas:

  backtrack to: ((drop _v_1 (drop zero (drop _v_0 _v_2)))=(drop _v_0 (drop _v_1 _v_2)))
  backtrack to: ((drop _v_1 (drop zero (drop _v_0 _v_2)))=(drop _v_0 (drop zero (drop _v_1 _v_2))))
  rewritten [1]: ((drop _v_1 (drop _v_0 _v_2))=(drop _v_0 (drop zero (drop _v_1 _v_2))))
  rewritten [1]: ((drop _v_1 (drop _v_0 _v_2))=(drop _v_0 (drop _v_1 _v_2)))

The Knowledge Scheme currently contains the following lemmas:

  backtrack to: ((drop _v_1 (drop _v_0 _v_2))=(drop _v_0 (drop zero (drop _v_1 _v_2))))
  rewritten [1]: ((drop _v_1 (drop _v_0 _v_2))=(drop _v_0 (drop _v_1 _v_2)))

The Knowledge Scheme currently contains the following lemmas:

  backtrack to: ((drop _v_1 (drop _v_0 _v_2))=(drop _v_0 (drop zero (drop _v_1 _v_2))))
  backtrack to: ((drop _v_1 (drop zero (drop _v_0 _v_2)))=(drop _v_0 (drop zero (drop _v_1 _v_2))))
  rewritten [1]: ((drop _v_1 (drop zero (drop _v_0 _v_2)))=(drop _v_0 (drop _v_1 _v_2)))
  rewritten [1]: ((drop _v_1 (drop _v_0 _v_2))=(drop _v_0 (drop _v_1 _v_2)))

The Knowledge Scheme currently contains the following lemmas:

  backtrack to: ((drop _v_1 (drop zero (drop _v_0 _v_2)))=(drop _v_0 (drop _v_1 _v_2)))
  rewritten [1]: ((drop _v_1 (drop _v_0 _v_2))=(drop _v_0 (drop _v_1 _v_2)))

The Knowledge Scheme currently contains the following lemmas:

  backtrack to: ((drop _v_1 (drop zero (drop _v_0 _v_2)))=(drop _v_0 (drop _v_1 _v_2)))
  backtrack to: ((drop _v_1 (drop zero (drop _v_0 _v_2)))=(drop _v_0 (drop zero (drop _v_1 _v_2))))
}

Base case:       ((drop _v_4 (drop _v_3 (drop zero _v_5)))=(drop zero (drop _v_3 (drop _v_4 _v_5))))
{
  {
    ====================
    | Assumptions [0]: (forall ((Nat)) ((drop _qv_1 nil)=nil))
    | Assumptions [1]: (forall ((Lst)) ((drop zero _qv_2)=_qv_2))
    | Assumptions [2]: (forall ((Nat) (Nat) (Lst)) ((drop (succ _qv_3) (cons _qv_4 _qv_5))=(drop _qv_3 _qv_5)))
    ====================
  }
  rewritten [1]: ((drop _v_4 (drop _v_3 _v_5))=(drop zero (drop _v_3 (drop _v_4 _v_5))))
  rewritten [1]: ((drop _v_4 (drop _v_3 _v_5))=(drop _v_3 (drop _v_4 _v_5)))

The Knowledge Scheme currently contains the following lemmas:

  backtrack to: ((drop _v_4 (drop _v_3 _v_5))=(drop zero (drop _v_3 (drop _v_4 _v_5))))
  rewritten [1]: ((drop _v_4 (drop _v_3 _v_5))=(drop _v_3 (drop _v_4 _v_5)))

The Knowledge Scheme currently contains the following lemmas:

  backtrack to: ((drop _v_4 (drop _v_3 _v_5))=(drop zero (drop _v_3 (drop _v_4 _v_5))))
  backtrack to: ((drop _v_4 (drop _v_3 (drop zero _v_5)))=(drop zero (drop _v_3 (drop _v_4 _v_5))))
  rewritten [1]: ((drop _v_4 (drop _v_3 (drop zero _v_5)))=(drop _v_3 (drop _v_4 _v_5)))
  rewritten [1]: ((drop _v_4 (drop _v_3 _v_5))=(drop _v_3 (drop _v_4 _v_5)))

The Knowledge Scheme currently contains the following lemmas:

  backtrack to: ((drop _v_4 (drop _v_3 (drop zero _v_5)))=(drop _v_3 (drop _v_4 _v_5)))
  rewritten [1]: ((drop _v_4 (drop _v_3 _v_5))=(drop _v_3 (drop _v_4 _v_5)))

The Knowledge Scheme currently contains the following lemmas:

  backtrack to: ((drop _v_4 (drop _v_3 (drop zero _v_5)))=(drop _v_3 (drop _v_4 _v_5)))
  backtrack to: ((drop _v_4 (drop _v_3 (drop zero _v_5)))=(drop zero (drop _v_3 (drop _v_4 _v_5))))
  rewritten [1]: ((drop _v_4 (drop _v_3 _v_5))=(drop zero (drop _v_3 (drop _v_4 _v_5))))
  rewritten [1]: ((drop _v_4 (drop _v_3 _v_5))=(drop _v_3 (drop _v_4 _v_5)))

The Knowledge Scheme currently contains the following lemmas:

  backtrack to: ((drop _v_4 (drop _v_3 _v_5))=(drop zero (drop _v_3 (drop _v_4 _v_5))))
  rewritten [1]: ((drop _v_4 (drop _v_3 _v_5))=(drop _v_3 (drop _v_4 _v_5)))

The Knowledge Scheme currently contains the following lemmas:

  backtrack to: ((drop _v_4 (drop _v_3 _v_5))=(drop zero (drop _v_3 (drop _v_4 _v_5))))
  backtrack to: ((drop _v_4 (drop _v_3 (drop zero _v_5)))=(drop zero (drop _v_3 (drop _v_4 _v_5))))
  rewritten [1]: ((drop _v_4 (drop _v_3 (drop zero _v_5)))=(drop _v_3 (drop _v_4 _v_5)))
  rewritten [1]: ((drop _v_4 (drop _v_3 _v_5))=(drop _v_3 (drop _v_4 _v_5)))

The Knowledge Scheme currently contains the following lemmas:

  backtrack to: ((drop _v_4 (drop _v_3 (drop zero _v_5)))=(drop _v_3 (drop _v_4 _v_5)))
  rewritten [1]: ((drop _v_4 (drop _v_3 _v_5))=(drop _v_3 (drop _v_4 _v_5)))

The Knowledge Scheme currently contains the following lemmas:

  backtrack to: ((drop _v_4 (drop _v_3 (drop zero _v_5)))=(drop _v_3 (drop _v_4 _v_5)))
  backtrack to: ((drop _v_4 (drop _v_3 (drop zero _v_5)))=(drop zero (drop _v_3 (drop _v_4 _v_5))))
}

Base case:       ((drop zero (drop _v_6 (drop _v_7 _v_8)))=(drop _v_7 (drop _v_6 (drop zero _v_8))))
{
  {
    ====================
    | Assumptions [0]: (forall ((Nat)) ((drop _qv_1 nil)=nil))
    | Assumptions [1]: (forall ((Lst)) ((drop zero _qv_2)=_qv_2))
    | Assumptions [2]: (forall ((Nat) (Nat) (Lst)) ((drop (succ _qv_3) (cons _qv_4 _qv_5))=(drop _qv_3 _qv_5)))
    ====================
  }
  rewritten [1]: ((drop zero (drop _v_6 (drop _v_7 _v_8)))=(drop _v_7 (drop _v_6 _v_8)))
  rewritten [1]: ((drop _v_6 (drop _v_7 _v_8))=(drop _v_7 (drop _v_6 _v_8)))

The Knowledge Scheme currently contains the following lemmas:

  backtrack to: ((drop zero (drop _v_6 (drop _v_7 _v_8)))=(drop _v_7 (drop _v_6 _v_8)))
  rewritten [1]: ((drop _v_6 (drop _v_7 _v_8))=(drop _v_7 (drop _v_6 _v_8)))

The Knowledge Scheme currently contains the following lemmas:

  backtrack to: ((drop zero (drop _v_6 (drop _v_7 _v_8)))=(drop _v_7 (drop _v_6 _v_8)))
  backtrack to: ((drop zero (drop _v_6 (drop _v_7 _v_8)))=(drop _v_7 (drop _v_6 (drop zero _v_8))))
  rewritten [1]: ((drop _v_6 (drop _v_7 _v_8))=(drop _v_7 (drop _v_6 (drop zero _v_8))))
  rewritten [1]: ((drop _v_6 (drop _v_7 _v_8))=(drop _v_7 (drop _v_6 _v_8)))

The Knowledge Scheme currently contains the following lemmas:

  backtrack to: ((drop _v_6 (drop _v_7 _v_8))=(drop _v_7 (drop _v_6 (drop zero _v_8))))
  rewritten [1]: ((drop _v_6 (drop _v_7 _v_8))=(drop _v_7 (drop _v_6 _v_8)))

The Knowledge Scheme currently contains the following lemmas:

  backtrack to: ((drop _v_6 (drop _v_7 _v_8))=(drop _v_7 (drop _v_6 (drop zero _v_8))))
  backtrack to: ((drop zero (drop _v_6 (drop _v_7 _v_8)))=(drop _v_7 (drop _v_6 (drop zero _v_8))))
  rewritten [1]: ((drop zero (drop _v_6 (drop _v_7 _v_8)))=(drop _v_7 (drop _v_6 _v_8)))
  rewritten [1]: ((drop _v_6 (drop _v_7 _v_8))=(drop _v_7 (drop _v_6 _v_8)))

The Knowledge Scheme currently contains the following lemmas:

  backtrack to: ((drop zero (drop _v_6 (drop _v_7 _v_8)))=(drop _v_7 (drop _v_6 _v_8)))
  rewritten [1]: ((drop _v_6 (drop _v_7 _v_8))=(drop _v_7 (drop _v_6 _v_8)))

The Knowledge Scheme currently contains the following lemmas:

  backtrack to: ((drop zero (drop _v_6 (drop _v_7 _v_8)))=(drop _v_7 (drop _v_6 _v_8)))
  backtrack to: ((drop zero (drop _v_6 (drop _v_7 _v_8)))=(drop _v_7 (drop _v_6 (drop zero _v_8))))
  rewritten [1]: ((drop _v_6 (drop _v_7 _v_8))=(drop _v_7 (drop _v_6 (drop zero _v_8))))
  rewritten [1]: ((drop _v_6 (drop _v_7 _v_8))=(drop _v_7 (drop _v_6 _v_8)))

The Knowledge Scheme currently contains the following lemmas:

  backtrack to: ((drop _v_6 (drop _v_7 _v_8))=(drop _v_7 (drop _v_6 (drop zero _v_8))))
  rewritten [1]: ((drop _v_6 (drop _v_7 _v_8))=(drop _v_7 (drop _v_6 _v_8)))

The Knowledge Scheme currently contains the following lemmas:

  backtrack to: ((drop _v_6 (drop _v_7 _v_8))=(drop _v_7 (drop _v_6 (drop zero _v_8))))
  backtrack to: ((drop zero (drop _v_6 (drop _v_7 _v_8)))=(drop _v_7 (drop _v_6 (drop zero _v_8))))
}

Base case:       ((drop _v_11 (drop _v_9 (drop _v_10 nil)))=(drop _v_10 (drop _v_9 (drop _v_11 nil))))
{
  proven trivially
}
Inductive step:  ((drop _v_11 (drop _v_9 (drop _v_10 (cons _t_12 _t_13))))=(drop _v_10 (drop _v_9 (drop _v_11 (cons _t_12 _t_13)))))
{
  {
    ====================
    | Assumptions [0]: (forall ((Nat)) ((drop _qv_1 nil)=nil))
    | Assumptions [1]: (forall ((Lst)) ((drop zero _qv_2)=_qv_2))
    | Assumptions [2]: (forall ((Nat) (Nat) (Lst)) ((drop (succ _qv_3) (cons _qv_4 _qv_5))=(drop _qv_3 _qv_5)))
    | Assumptions [3]: (forall ((Nat) (Nat) (Nat)) ((drop w (drop x (drop y _t_13)))=(drop y (drop x (drop w _t_13)))))
    | Assumptions [4]: (forall ((Nat) (Nat) (Nat)) ((drop y (drop x (drop w _t_13)))=(drop w (drop x (drop y _t_13)))))
    ====================
  }
Unknown
sat
