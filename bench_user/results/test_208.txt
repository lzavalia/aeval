
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
	(forall ((Nat)) (0<=(nat-to-int _qv_1)))
	(forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
	(forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))

Simplified goal: (forall ((Lst) (Lst) (Nat)) ((append (append x y) (cons z nil))=(append x (append y (cons z nil)))))


Base case:       ((append (append nil _v_8) (cons _v_9 nil))=(append nil (append _v_8 (cons _v_9 nil))))
{
  proven trivially
}
Inductive step:  ((append (append (cons _t_10 _t_11) _v_8) (cons _v_9 nil))=(append (cons _t_10 _t_11) (append _v_8 (cons _v_9 nil))))
{
  proven trivially
}

Proved
unsat
