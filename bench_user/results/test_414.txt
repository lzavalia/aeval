
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat) (Nat)) ((less _qv_0 _qv_1)=(less _qv_1 _qv_0)))
	(forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))

Simplified goal: (forall ((Nat) (Lst) (Lst)) (((count n l)=(count n (append l m)))||(less (count n l) (count n (append l m)))))


Base case:       (((count zero _v_7)=(count zero (append _v_7 _v_8)))||(less (count zero _v_7) (count zero (append _v_7 _v_8))))
{
  {
    ====================
    | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
    | Assumptions [1]: (forall ((Lst)) ((append nil _qv_5)=_qv_5))
    | Assumptions [2]: (forall ((Nat) (Lst) (Lst)) ((append (cons _qv_6 _qv_7) _qv_8)=(cons _qv_6 (append _qv_7 _qv_8))))
    | Assumptions [3]: (forall ((Nat)) ((count _qv_9 nil)=zero))
    | Assumptions [4]: (forall ((Nat) (Nat) (Lst)) ((count _qv_10 (cons _qv_11 _qv_12))=ite(_qv_10=_qv_11, (succ (count _qv_10 _qv_12)), (count _qv_10 _qv_12))))
    | Assumptions [5]: (forall ((Nat)) (!(less _qv_1 zero)))
    | Assumptions [6]: (forall ((Nat)) (less zero (succ _qv_2)))
    ====================
  }
  deciding: ((count zero _v_7)=(count zero (append _v_7 _v_8)))
  {
    ====================
    | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
    | Assumptions [1]: (forall ((Lst)) ((append nil _qv_5)=_qv_5))
    | Assumptions [2]: (forall ((Nat) (Lst) (Lst)) ((append (cons _qv_6 _qv_7) _qv_8)=(cons _qv_6 (append _qv_7 _qv_8))))
    | Assumptions [3]: (forall ((Nat)) ((count _qv_9 nil)=zero))
    | Assumptions [4]: (forall ((Nat) (Nat) (Lst)) ((count _qv_10 (cons _qv_11 _qv_12))=ite(_qv_10=_qv_11, (succ (count _qv_10 _qv_12)), (count _qv_10 _qv_12))))
    | Assumptions [5]: (forall ((Nat)) (!(less _qv_1 zero)))
    | Assumptions [6]: (forall ((Nat)) (less zero (succ _qv_2)))
    | Assumptions [7]: ((count zero _v_7)!=(count zero (append _v_7 _v_8)))
    ====================
  }
  current subgoal: (less (count zero _v_7) (count zero (append _v_7 _v_8)))
  {
  }
}

Base case:       (((count _v_9 nil)=(count _v_9 (append nil _v_10)))||(less (count _v_9 nil) (count _v_9 (append nil _v_10))))
{
  {
    ====================
    | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
    | Assumptions [1]: (forall ((Lst)) ((append nil _qv_5)=_qv_5))
    | Assumptions [2]: (forall ((Nat) (Lst) (Lst)) ((append (cons _qv_6 _qv_7) _qv_8)=(cons _qv_6 (append _qv_7 _qv_8))))
    | Assumptions [3]: (forall ((Nat)) ((count _qv_9 nil)=zero))
    | Assumptions [4]: (forall ((Nat) (Nat) (Lst)) ((count _qv_10 (cons _qv_11 _qv_12))=ite(_qv_10=_qv_11, (succ (count _qv_10 _qv_12)), (count _qv_10 _qv_12))))
    | Assumptions [5]: (forall ((Nat)) (!(less _qv_1 zero)))
    | Assumptions [6]: (forall ((Nat)) (less zero (succ _qv_2)))
    ====================
  }
  rewritten [1]: (((count _v_9 nil)=(count _v_9 _v_10))||(less (count _v_9 nil) (count _v_9 _v_10)))
  rewritten [3]: ((zero=(count _v_9 _v_10))||(less zero (count _v_9 _v_10)))
  deciding: (zero=(count _v_9 _v_10))
  {
    ====================
    | Assumptions [0]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
    | Assumptions [1]: (forall ((Lst)) ((append nil _qv_5)=_qv_5))
    | Assumptions [2]: (forall ((Nat) (Lst) (Lst)) ((append (cons _qv_6 _qv_7) _qv_8)=(cons _qv_6 (append _qv_7 _qv_8))))
    | Assumptions [3]: (forall ((Nat)) ((count _qv_9 nil)=zero))
    | Assumptions [4]: (forall ((Nat) (Nat) (Lst)) ((count _qv_10 (cons _qv_11 _qv_12))=ite(_qv_10=_qv_11, (succ (count _qv_10 _qv_12)), (count _qv_10 _qv_12))))
    | Assumptions [5]: (forall ((Nat)) (!(less _qv_1 zero)))
    | Assumptions [6]: (forall ((Nat)) (less zero (succ _qv_2)))
    | Assumptions [7]: (zero!=(count _v_9 _v_10))
    ====================
  }
  current subgoal: (less zero (count _v_9 _v_10))
  {
  }

The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat) (Nat)) ((less _qv_12 _qv_13)=(less _qv_13 _qv_12)))
	(forall ((Lst) (Lst)) ((append _qv_14 _qv_15)=(append _qv_15 _qv_14)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_16 _qv_17) _qv_18)=(append _qv_16 (append _qv_17 _qv_18))))

  proven by induction: ((zero=_w_11)||(less zero _w_11))
  rewriting done
}
Inductive step:  (((count _v_9 (cons _t_12 _t_13))=(count _v_9 (append (cons _t_12 _t_13) _v_10)))||(less (count _v_9 (cons _t_12 _t_13)) (count _v_9 (append (cons _t_12 _t_13) _v_10))))
{
  proven trivially
}

Proved
unsat
