
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
	(forall ((Nat)) (0<=(nat-to-int _qv_1)))
	(forall ((Nat) (Nat)) ((plus _qv_2 _qv_3)=(plus _qv_3 _qv_2)))
	(forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_4 _qv_5) _qv_6)=(plus _qv_4 (plus _qv_5 _qv_6))))
	(forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
	(forall ((Nat) (Nat)) ((succ (plus _qv_8 _qv_9))=(plus (succ _qv_8) (succ _qv_9))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_8 _qv_9))=(plus (succ _qv_9) (succ _qv_8))))

Simplified goal: (forall ((Nat) (Nat)) ((plus x (succ y))=(succ (plus x y))))


Base case:       ((plus zero (succ _v_10))=(succ (plus zero _v_10)))
{
  proven trivially
}
Inductive step:  ((plus (succ _t_11) (succ _v_10))=(succ (plus (succ _t_11) _v_10)))
{
  proven trivially
}

Proved
unsat
