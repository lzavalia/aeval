
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Lst) (Lst)) ((append _qv_0 _qv_1)=(append _qv_1 _qv_0)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_2 _qv_3) _qv_4)=(append _qv_2 (append _qv_3 _qv_4))))
	(forall ((Lst)) (0<=(len _qv_5)))

Simplified goal: (forall ((Lst)) ((rotate (len x) x)=x))


Base case:       ((rotate (len nil) nil)=nil)
{
  proven trivially
}
Inductive step:  ((rotate (len (cons _t_6 _t_7)) (cons _t_6 _t_7))=(cons _t_6 _t_7))
{
  {
    ====================
    | Assumptions [0]: ((len nil)=0)
    | Assumptions [1]: (forall ((Lst)) ((append nil _qv_1)=_qv_1))
    | Assumptions [2]: (forall (INT (Lst) (Lst)) ((append (cons _qv_2 _qv_3) _qv_4)=(cons _qv_2 (append _qv_3 _qv_4))))
    | Assumptions [3]: (forall (INT (Lst)) ((len (cons _qv_5 _qv_6))=(1+(len _qv_6))))
    | Assumptions [4]: (forall ((Lst)) ((len _qv_7)>=0))
    | Assumptions [5]: (forall ((Lst)) ((rotate 0 _qv_8)=_qv_8))
    | Assumptions [6]: (forall (INT) ((_qv_9>=0)->((rotate 1+_qv_9 nil)=nil)))
    | Assumptions [7]: (forall (INT INT (Lst)) ((_qv_10>=0)->((rotate 1+_qv_10 (cons _qv_11 _qv_12))=(rotate _qv_10 (append _qv_12 (cons _qv_11 nil))))))
    | Assumptions [8]: ((rotate (len _t_7) _t_7)=_t_7)
    | Assumptions [9]: (_t_7=(rotate (len _t_7) _t_7))
    | Assumptions [10]: ((rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))=(rotate (len _t_7) _t_7))
    | Assumptions [11]: ((rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))=(rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))
    | Assumptions [12]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7)))) (rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))=(rotate (len (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))) (rotate (len (rotate (len _t_7) _t_7)) (rotate (len _t_7) _t_7))))
    ====================
  }
  rewritten [3]: ((rotate 1+(len _t_7) (cons _t_6 _t_7))=(cons _t_6 _t_7))
  rewritten [9]: ((rotate (len (rotate (len _t_7) _t_7))+1 (cons _t_6 (rotate (len _t_7) _t_7)))=(cons _t_6 (rotate (len _t_7) _t_7)))
  rewritten [8]: ((rotate (len _t_7)+1 (cons _t_6 _t_7))=(cons _t_6 _t_7))

The Knowledge Scheme currently contains the following lemmas:
	(forall ((Lst) (Lst)) ((append _qv_9 _qv_10)=(append _qv_10 _qv_9)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_11 _qv_12) _qv_13)=(append _qv_11 (append _qv_12 _qv_13))))
	(forall ((Lst)) (0<=(len _qv_14)))

CURRENT SUBGOAL ((rotate (len _t_17)+2 (cons _v_15 (rotate (len _t_17)+1 (rotate (len _t_17)+1 (rotate (len (cons _t_16 _t_17)) (cons _t_16 _t_17))))))=(cons _v_15 (rotate (len _t_17)+1 (rotate (len _t_17)+1 (rotate (len (cons _t_16 _t_17)) (cons _t_16 _t_17))))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_9 _qv_10)=(append _qv_10 _qv_9)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_17)+2 (cons _v_15 (rotate (len _t_17)+1 (rotate (len _t_17)+1 (rotate (len (cons _t_16 _t_17)) (cons _t_16 _t_17))))))=(cons _v_15 (rotate (len _t_17)+1 (rotate (len _t_17)+1 (rotate (len (cons _t_16 _t_17)) (cons _t_16 _t_17))))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_11 _qv_12) _qv_13)=(append _qv_11 (append _qv_12 _qv_13))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_17)+2 (cons _v_15 (rotate (len _t_17)+1 (rotate (len _t_17)+1 (rotate (len (cons _t_16 _t_17)) (cons _t_16 _t_17))))))=(cons _v_15 (rotate (len _t_17)+1 (rotate (len _t_17)+1 (rotate (len (cons _t_16 _t_17)) (cons _t_16 _t_17))))))
NOW TESTING (forall ((Lst)) (0<=(len _qv_14)))
USE ASSUMPTION FAILED


The Knowledge Scheme currently contains the following lemmas:
	(forall ((Lst) (Lst)) ((append _qv_32 _qv_33)=(append _qv_33 _qv_32)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_34 _qv_35) _qv_36)=(append _qv_34 (append _qv_35 _qv_36))))
	(forall ((Lst)) (0<=(len _qv_37)))
	(forall (INT (Lst) (Lst)) ((rotate _qv_38 (cons _qv_39 _qv_40))=(cons (rotate _qv_38 _qv_39) (rotate _qv_38 _qv_40))))
	(forall (INT (Lst) (Lst)) ((cons _qv_41 (rotate _qv_42 _qv_43))=(rotate (cons _qv_41 _qv_42) (cons _qv_41 _qv_43))))

