
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Lst) (Lst)) ((append _qv_0 _qv_1)=(append _qv_1 _qv_0)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_2 _qv_3) _qv_4)=(append _qv_2 (append _qv_3 _qv_4))))
	(forall ((Lst)) (0<=(len _qv_5)))

Simplified goal: (forall ((Lst) (Lst)) ((len (append x y))=(len (append y x))))


Base case:       ((len (append nil _v_6))=(len (append _v_6 nil)))
{
  {
    ====================
    | Assumptions [0]: ((len nil)=0)
    | Assumptions [1]: (forall ((Lst)) ((append nil _qv_1)=_qv_1))
    | Assumptions [2]: (forall (INT (Lst) (Lst)) ((append (cons _qv_2 _qv_3) _qv_4)=(cons _qv_2 (append _qv_3 _qv_4))))
    | Assumptions [3]: (forall (INT (Lst)) ((len (cons _qv_5 _qv_6))=(1+(len _qv_6))))
    | Assumptions [4]: (forall ((Lst)) ((len _qv_7)>=0))
    | Assumptions [5]: (forall ((Lst) INT (Lst)) ((len (append _qv_8 (cons _qv_9 _qv_10)))=(1+(len (append _qv_8 _qv_10)))))
    ====================
  }
  rewritten [0]: ((len (append nil _v_6))=(len (append _v_6 nil)))
  rewritten [1]: ((len _v_6)=(len (append _v_6 nil)))

The Knowledge Scheme currently contains the following lemmas:
	(forall ((Lst) (Lst)) ((append _qv_7 _qv_8)=(append _qv_8 _qv_7)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_9 _qv_10) _qv_11)=(append _qv_9 (append _qv_10 _qv_11))))
	(forall ((Lst)) (0<=(len _qv_12)))

  proven by induction: ((len _v_6)=(len (append _v_6 nil)))
  rewriting done
}
Inductive step:  ((len (append (cons _t_7 _t_8) _v_6))=(len (append _v_6 (cons _t_7 _t_8))))
{
  proven trivially
}

Proved
unsat
