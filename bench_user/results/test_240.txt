
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
	(forall ((Nat)) (0<=(nat-to-int _qv_1)))
	(forall ((Nat)) ((double (double _qv_2))=_qv_2))
	(forall ((Lst) (Lst)) ((append _qv_3 _qv_4)=(append _qv_4 _qv_3)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_5 _qv_6) _qv_7)=(append _qv_5 (append _qv_6 _qv_7))))
	(forall ((Nat)) ((nat-to-int (succ _qv_8))=(nat-to-int _qv_8)))
	(forall ((Nat)) ((nat-to-int (double _qv_9))=(nat-to-int _qv_9)))
	(forall ((Lst)) ((nat-to-int (len _qv_10))=(nat-to-int _qv_10)))

Simplified goal: (forall ((Lst)) ((len (append x x))=(double (len x))))


Base case:       ((len (append nil nil))=(double (len nil)))
{
  proven trivially
}
Inductive step:  ((len (append (cons _t_11 _t_12) (cons _t_11 _t_12)))=(double (len (cons _t_11 _t_12))))
{
  proven trivially
}

Proved
unsat
