
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Lst) (Lst)) ((append _qv_0 _qv_1)=(append _qv_1 _qv_0)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_2 _qv_3) _qv_4)=(append _qv_2 (append _qv_3 _qv_4))))

Simplified goal: (forall ((Nat) (Lst) (Lst)) ((mem x t)->(mem x (append l t))))


Base case:       (mem zero (append _v_5 _v_6))
{
  {
    ====================
    | Assumptions [0]: (forall ((Lst)) ((append nil _qv_1)=_qv_1))
    | Assumptions [1]: (forall ((Nat) (Lst) (Lst)) ((append (cons _qv_2 _qv_3) _qv_4)=(cons _qv_2 (append _qv_3 _qv_4))))
    | Assumptions [2]: (forall ((Nat) (Nat) (Lst)) ((mem _qv_6 (cons _qv_7 _qv_8))=((_qv_6=_qv_7)||(mem _qv_6 _qv_8))))
    | Assumptions [3]: (mem zero _v_6)
    | Assumptions [4]: (forall ((Nat)) (!(mem _qv_5 nil)))
    ====================
  }
}

Base case:       (mem _v_7 (append nil _v_8))
{
  proven trivially
}
Inductive step:  (mem _v_7 (append (cons _t_9 _t_10) _v_8))
{
  proven trivially
}

Proved
unsat
