
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
	(forall ((Nat)) (0<=(nat-to-int _qv_1)))
	(forall ((Nat) (Nat)) ((minus _qv_2 _qv_3)=(minus _qv_3 _qv_2)))
	(forall ((Nat) (Nat) (Nat)) ((minus (minus _qv_4 _qv_5) _qv_6)=(minus _qv_4 (minus _qv_5 _qv_6))))
	(forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))
	(forall ((Nat) (Lst) (Lst)) ((take _qv_8 (drop _qv_9 _qv_10))=(drop (take _qv_8 _qv_9) (take _qv_8 _qv_10))))
	(forall ((Nat) (Lst) (Lst)) ((drop _qv_11 (take _qv_12 _qv_13))=(take (drop _qv_11 _qv_12) (drop _qv_11 _qv_13))))
	(forall ((Nat) (Nat)) ((succ (minus _qv_14 _qv_15))=(minus (succ _qv_14) (succ _qv_15))))
	(forall ((Nat) (Nat)) ((succ (minus _qv_14 _qv_15))=(minus (succ _qv_15) (succ _qv_14))))

Simplified goal: (forall ((Nat) (Nat) (Lst)) ((drop n (take m xs))=(take (minus m n) (drop n xs))))


Base case:       ((drop zero (take _v_16 _v_17))=(take (minus _v_16 zero) (drop zero _v_17)))
{
  proven trivially
}
Inductive step:  ((drop (succ _t_18) (take _v_16 _v_17))=(take (minus _v_16 (succ _t_18)) (drop (succ _t_18) _v_17)))
{
  {
    ====================
    | Assumptions [0]: ((nat-to-int zero)=0)
    | Assumptions [1]: (forall ((Nat)) ((nat-to-int _qv_1)>=0))
    | Assumptions [2]: (forall ((Nat) (Nat)) (((nat-to-int _qv_2)=(nat-to-int _qv_3))->(_qv_2=_qv_3)))
    | Assumptions [3]: (forall ((Nat)) ((nat-to-int (succ _qv_4))=(1+(nat-to-int _qv_4))))
    | Assumptions [4]: (forall ((Nat)) ((minus zero _qv_5)=zero))
    | Assumptions [5]: (forall ((Nat)) ((minus _qv_6 zero)=_qv_6))
    | Assumptions [6]: (forall ((Nat) (Nat)) ((minus (succ _qv_7) (succ _qv_8))=(minus _qv_7 _qv_8)))
    | Assumptions [7]: (forall ((Nat) (Nat)) ((nat-to-int (minus _qv_9 _qv_10))=ite((nat-to-int _qv_9)<(nat-to-int _qv_10), 0, (nat-to-int _qv_9)-(nat-to-int _qv_10))))
    | Assumptions [8]: (forall ((Nat)) ((drop _qv_11 nil)=nil))
    | Assumptions [9]: (forall ((Lst)) ((drop zero _qv_12)=_qv_12))
    | Assumptions [10]: (forall ((Nat) (Nat) (Lst)) ((drop (succ _qv_13) (cons _qv_14 _qv_15))=(drop _qv_13 _qv_15)))
    | Assumptions [11]: (forall ((Nat)) ((take _qv_16 nil)=nil))
    | Assumptions [12]: (forall ((Lst)) ((take zero _qv_17)=nil))
    | Assumptions [13]: (forall ((Nat) (Nat) (Lst)) ((take (succ _qv_18) (cons _qv_19 _qv_20))=(cons _qv_19 (take _qv_18 _qv_20))))
    | Assumptions [14]: (forall ((Nat) (Lst)) ((drop _t_18 (take m xs))=(take (minus m _t_18) (drop _t_18 xs))))
    | Assumptions [15]: (forall ((Nat) (Lst)) ((take (minus m _t_18) (drop _t_18 xs))=(drop _t_18 (take m xs))))
    ====================
  }

Base case:       ((drop _v_19 (take zero _v_20))=(take (minus zero _v_19) (drop _v_19 _v_20)))
{
  proven trivially
}
Inductive step:  ((drop _v_19 (take (succ _t_21) _v_20))=(take (minus (succ _t_21) _v_19) (drop _v_19 _v_20)))
{
  {
    ====================
    | Assumptions [0]: ((nat-to-int zero)=0)
    | Assumptions [1]: (forall ((Nat)) ((nat-to-int _qv_1)>=0))
    | Assumptions [2]: (forall ((Nat) (Nat)) (((nat-to-int _qv_2)=(nat-to-int _qv_3))->(_qv_2=_qv_3)))
    | Assumptions [3]: (forall ((Nat)) ((nat-to-int (succ _qv_4))=(1+(nat-to-int _qv_4))))
    | Assumptions [4]: (forall ((Nat)) ((minus zero _qv_5)=zero))
    | Assumptions [5]: (forall ((Nat)) ((minus _qv_6 zero)=_qv_6))
    | Assumptions [6]: (forall ((Nat) (Nat)) ((minus (succ _qv_7) (succ _qv_8))=(minus _qv_7 _qv_8)))
    | Assumptions [7]: (forall ((Nat) (Nat)) ((nat-to-int (minus _qv_9 _qv_10))=ite((nat-to-int _qv_9)<(nat-to-int _qv_10), 0, (nat-to-int _qv_9)-(nat-to-int _qv_10))))
    | Assumptions [8]: (forall ((Nat)) ((drop _qv_11 nil)=nil))
    | Assumptions [9]: (forall ((Lst)) ((drop zero _qv_12)=_qv_12))
    | Assumptions [10]: (forall ((Nat) (Nat) (Lst)) ((drop (succ _qv_13) (cons _qv_14 _qv_15))=(drop _qv_13 _qv_15)))
    | Assumptions [11]: (forall ((Nat)) ((take _qv_16 nil)=nil))
    | Assumptions [12]: (forall ((Lst)) ((take zero _qv_17)=nil))
    | Assumptions [13]: (forall ((Nat) (Nat) (Lst)) ((take (succ _qv_18) (cons _qv_19 _qv_20))=(cons _qv_19 (take _qv_18 _qv_20))))
    | Assumptions [14]: (forall ((Nat) (Lst)) ((drop _t_18 (take m xs))=(take (minus m _t_18) (drop _t_18 xs))))
    | Assumptions [15]: (forall ((Nat) (Lst)) ((take (minus m _t_18) (drop _t_18 xs))=(drop _t_18 (take m xs))))
    | Assumptions [16]: (forall ((Nat) (Lst)) ((drop n (take _t_21 xs))=(take (minus _t_21 n) (drop n xs))))
    | Assumptions [17]: (forall ((Nat) (Lst)) ((take (minus _t_21 n) (drop n xs))=(drop n (take _t_21 xs))))
    ====================
  }

Base case:       ((drop _v_22 (take _v_23 nil))=(take (minus _v_23 _v_22) (drop _v_22 nil)))
{
  proven trivially
}
Inductive step:  ((drop _v_22 (take _v_23 (cons _t_24 _t_25)))=(take (minus _v_23 _v_22) (drop _v_22 (cons _t_24 _t_25))))
{
  {
    ====================
    | Assumptions [0]: ((nat-to-int zero)=0)
    | Assumptions [1]: (forall ((Nat)) ((nat-to-int _qv_1)>=0))
    | Assumptions [2]: (forall ((Nat) (Nat)) (((nat-to-int _qv_2)=(nat-to-int _qv_3))->(_qv_2=_qv_3)))
    | Assumptions [3]: (forall ((Nat)) ((nat-to-int (succ _qv_4))=(1+(nat-to-int _qv_4))))
    | Assumptions [4]: (forall ((Nat)) ((minus zero _qv_5)=zero))
    | Assumptions [5]: (forall ((Nat)) ((minus _qv_6 zero)=_qv_6))
    | Assumptions [6]: (forall ((Nat) (Nat)) ((minus (succ _qv_7) (succ _qv_8))=(minus _qv_7 _qv_8)))
    | Assumptions [7]: (forall ((Nat) (Nat)) ((nat-to-int (minus _qv_9 _qv_10))=ite((nat-to-int _qv_9)<(nat-to-int _qv_10), 0, (nat-to-int _qv_9)-(nat-to-int _qv_10))))
    | Assumptions [8]: (forall ((Nat)) ((drop _qv_11 nil)=nil))
    | Assumptions [9]: (forall ((Lst)) ((drop zero _qv_12)=_qv_12))
    | Assumptions [10]: (forall ((Nat) (Nat) (Lst)) ((drop (succ _qv_13) (cons _qv_14 _qv_15))=(drop _qv_13 _qv_15)))
    | Assumptions [11]: (forall ((Nat)) ((take _qv_16 nil)=nil))
    | Assumptions [12]: (forall ((Lst)) ((take zero _qv_17)=nil))
    | Assumptions [13]: (forall ((Nat) (Nat) (Lst)) ((take (succ _qv_18) (cons _qv_19 _qv_20))=(cons _qv_19 (take _qv_18 _qv_20))))
    | Assumptions [14]: (forall ((Nat) (Lst)) ((drop _t_18 (take m xs))=(take (minus m _t_18) (drop _t_18 xs))))
    | Assumptions [15]: (forall ((Nat) (Lst)) ((take (minus m _t_18) (drop _t_18 xs))=(drop _t_18 (take m xs))))
    | Assumptions [16]: (forall ((Nat) (Lst)) ((drop n (take _t_21 xs))=(take (minus _t_21 n) (drop n xs))))
    | Assumptions [17]: (forall ((Nat) (Lst)) ((take (minus _t_21 n) (drop n xs))=(drop n (take _t_21 xs))))
    | Assumptions [18]: (forall ((Nat) (Nat)) ((drop n (take m _t_25))=(take (minus m n) (drop n _t_25))))
    | Assumptions [19]: (forall ((Nat) (Nat)) ((take (minus m n) (drop n _t_25))=(drop n (take m _t_25))))
    ====================
  }
Unknown
sat
