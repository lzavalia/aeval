
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
	(forall ((Nat)) (0<=(nat-to-int _qv_1)))
	(forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
	(forall ((Lst)) ((rev (rev _qv_7))=_qv_7))
	(forall ((Nat)) ((nat-to-int (succ _qv_8))=(nat-to-int _qv_8)))
	(forall ((Lst)) ((nat-to-int (len _qv_9))=(nat-to-int _qv_9)))
	(forall ((Lst) (Lst)) ((rev (append _qv_10 _qv_11))=(append (rev _qv_10) (rev _qv_11))))
	(forall ((Lst) (Lst)) ((rev (append _qv_10 _qv_11))=(append (rev _qv_11) (rev _qv_10))))

Simplified goal: (forall ((Lst)) ((len (rev x))=(len x)))


Base case:       ((len (rev nil))=(len nil))
{
  proven trivially
}
Inductive step:  ((len (rev (cons _t_12 _t_13)))=(len (cons _t_12 _t_13)))
{
  proven trivially
}

Proved
unsat
