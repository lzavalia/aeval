
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Lst) (Lst)) ((zip _qv_0 _qv_1)=(zip _qv_1 _qv_0)))

Simplified goal: (forall ((Nat) (Lst) (Lst)) ((zdrop n (zip xs ys))=(zip (drop n xs) (drop n ys))))


Base case:       ((zdrop zero (zip _v_2 _v_3))=(zip (drop zero _v_2) (drop zero _v_3)))
{
  proven trivially
}
Inductive step:  ((zdrop (succ _t_4) (zip _v_2 _v_3))=(zip (drop (succ _t_4) _v_2) (drop (succ _t_4) _v_3)))
{
  {
    ====================
    | Assumptions [0]: (forall ((Nat)) ((drop _qv_1 nil)=nil))
    | Assumptions [1]: (forall ((Lst)) ((drop zero _qv_2)=_qv_2))
    | Assumptions [2]: (forall ((Nat) (Nat) (Lst)) ((drop (succ _qv_3) (cons _qv_4 _qv_5))=(drop _qv_3 _qv_5)))
    | Assumptions [3]: (forall ((Lst)) ((zip nil _qv_6)=znil))
    | Assumptions [4]: (forall ((Lst)) ((zip _qv_7 nil)=znil))
    | Assumptions [5]: (forall ((Nat) (Lst) (Nat) (Lst)) ((zip (cons _qv_8 _qv_9) (cons _qv_10 _qv_11))=(zcons (mkpair _qv_8 _qv_10) (zip _qv_9 _qv_11))))
    | Assumptions [6]: (forall ((Nat)) ((zdrop _qv_12 znil)=znil))
    | Assumptions [7]: (forall ((ZLst)) ((zdrop zero _qv_13)=_qv_13))
    | Assumptions [8]: (forall ((Nat) (Pair) (ZLst)) ((zdrop (succ _qv_14) (zcons _qv_15 _qv_16))=(zdrop _qv_14 _qv_16)))
    | Assumptions [9]: (forall ((Lst) (Lst)) ((zdrop _t_4 (zip xs ys))=(zip (drop _t_4 xs) (drop _t_4 ys))))
    | Assumptions [10]: (forall ((Lst) (Lst)) ((zip (drop _t_4 xs) (drop _t_4 ys))=(zdrop _t_4 (zip xs ys))))
    ====================
  }

Base case:       ((zdrop _v_5 (zip nil _v_6))=(zip (drop _v_5 nil) (drop _v_5 _v_6)))
{
  proven trivially
}
Inductive step:  ((zdrop _v_5 (zip (cons _t_7 _t_8) _v_6))=(zip (drop _v_5 (cons _t_7 _t_8)) (drop _v_5 _v_6)))
{
  {
    ====================
    | Assumptions [0]: (forall ((Nat)) ((drop _qv_1 nil)=nil))
    | Assumptions [1]: (forall ((Lst)) ((drop zero _qv_2)=_qv_2))
    | Assumptions [2]: (forall ((Nat) (Nat) (Lst)) ((drop (succ _qv_3) (cons _qv_4 _qv_5))=(drop _qv_3 _qv_5)))
    | Assumptions [3]: (forall ((Lst)) ((zip nil _qv_6)=znil))
    | Assumptions [4]: (forall ((Lst)) ((zip _qv_7 nil)=znil))
    | Assumptions [5]: (forall ((Nat) (Lst) (Nat) (Lst)) ((zip (cons _qv_8 _qv_9) (cons _qv_10 _qv_11))=(zcons (mkpair _qv_8 _qv_10) (zip _qv_9 _qv_11))))
    | Assumptions [6]: (forall ((Nat)) ((zdrop _qv_12 znil)=znil))
    | Assumptions [7]: (forall ((ZLst)) ((zdrop zero _qv_13)=_qv_13))
    | Assumptions [8]: (forall ((Nat) (Pair) (ZLst)) ((zdrop (succ _qv_14) (zcons _qv_15 _qv_16))=(zdrop _qv_14 _qv_16)))
    | Assumptions [9]: (forall ((Lst) (Lst)) ((zdrop _t_4 (zip xs ys))=(zip (drop _t_4 xs) (drop _t_4 ys))))
    | Assumptions [10]: (forall ((Lst) (Lst)) ((zip (drop _t_4 xs) (drop _t_4 ys))=(zdrop _t_4 (zip xs ys))))
    | Assumptions [11]: (forall ((Nat) (Lst)) ((zdrop n (zip _t_8 ys))=(zip (drop n _t_8) (drop n ys))))
    | Assumptions [12]: (forall ((Nat) (Lst)) ((zip (drop n _t_8) (drop n ys))=(zdrop n (zip _t_8 ys))))
    ====================
  }

Base case:       ((zdrop _v_9 (zip _v_10 nil))=(zip (drop _v_9 _v_10) (drop _v_9 nil)))
{
  proven trivially
}
Inductive step:  ((zdrop _v_9 (zip _v_10 (cons _t_11 _t_12)))=(zip (drop _v_9 _v_10) (drop _v_9 (cons _t_11 _t_12))))
{
  {
    ====================
    | Assumptions [0]: (forall ((Nat)) ((drop _qv_1 nil)=nil))
    | Assumptions [1]: (forall ((Lst)) ((drop zero _qv_2)=_qv_2))
    | Assumptions [2]: (forall ((Nat) (Nat) (Lst)) ((drop (succ _qv_3) (cons _qv_4 _qv_5))=(drop _qv_3 _qv_5)))
    | Assumptions [3]: (forall ((Lst)) ((zip nil _qv_6)=znil))
    | Assumptions [4]: (forall ((Lst)) ((zip _qv_7 nil)=znil))
    | Assumptions [5]: (forall ((Nat) (Lst) (Nat) (Lst)) ((zip (cons _qv_8 _qv_9) (cons _qv_10 _qv_11))=(zcons (mkpair _qv_8 _qv_10) (zip _qv_9 _qv_11))))
    | Assumptions [6]: (forall ((Nat)) ((zdrop _qv_12 znil)=znil))
    | Assumptions [7]: (forall ((ZLst)) ((zdrop zero _qv_13)=_qv_13))
    | Assumptions [8]: (forall ((Nat) (Pair) (ZLst)) ((zdrop (succ _qv_14) (zcons _qv_15 _qv_16))=(zdrop _qv_14 _qv_16)))
    | Assumptions [9]: (forall ((Lst) (Lst)) ((zdrop _t_4 (zip xs ys))=(zip (drop _t_4 xs) (drop _t_4 ys))))
    | Assumptions [10]: (forall ((Lst) (Lst)) ((zip (drop _t_4 xs) (drop _t_4 ys))=(zdrop _t_4 (zip xs ys))))
    | Assumptions [11]: (forall ((Nat) (Lst)) ((zdrop n (zip _t_8 ys))=(zip (drop n _t_8) (drop n ys))))
    | Assumptions [12]: (forall ((Nat) (Lst)) ((zip (drop n _t_8) (drop n ys))=(zdrop n (zip _t_8 ys))))
    | Assumptions [13]: (forall ((Nat) (Lst)) ((zdrop n (zip xs _t_12))=(zip (drop n xs) (drop n _t_12))))
    | Assumptions [14]: (forall ((Nat) (Lst)) ((zip (drop n xs) (drop n _t_12))=(zdrop n (zip xs _t_12))))
    ====================
  }
Unknown
sat
