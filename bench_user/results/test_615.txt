
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat) (Nat)) ((less _qv_0 _qv_1)=(less _qv_1 _qv_0)))
	(forall ((Lst)) ((sort (sort _qv_2))=_qv_2))
	(forall ((Nat) (Lst) (Lst)) ((insort _qv_3 (cons _qv_4 _qv_5))=(cons (insort _qv_3 _qv_4) (insort _qv_3 _qv_5))))
	(forall ((Nat) (Lst) (Lst)) ((cons _qv_6 (insort _qv_7 _qv_8))=(insort (cons _qv_6 _qv_7) (cons _qv_6 _qv_8))))

Simplified goal: (forall ((Nat) (Lst)) ((count x (insort x y))=(succ (count x y))))


Base case:       ((count zero (insort zero _v_9))=(succ (count zero _v_9)))
{
  {
    ====================
    | Assumptions [0]: ((sort nil)=nil)
    | Assumptions [1]: (forall ((Nat) (Nat)) ((less (succ _qv_3) (succ _qv_4))=(less _qv_3 _qv_4)))
    | Assumptions [2]: (forall ((Nat)) ((count _qv_5 nil)=zero))
    | Assumptions [3]: (forall ((Nat) (Nat) (Lst)) ((count _qv_6 (cons _qv_7 _qv_8))=ite(_qv_6=_qv_7, (succ (count _qv_6 _qv_8)), (count _qv_6 _qv_8))))
    | Assumptions [4]: (forall ((Nat)) ((insort _qv_9 nil)=(cons _qv_9 nil)))
    | Assumptions [5]: (forall ((Nat) (Nat) (Lst)) ((insort _qv_10 (cons _qv_11 _qv_12))=ite((less _qv_10 _qv_11), (cons _qv_10 (cons _qv_11 _qv_12)), (cons _qv_11 (insort _qv_10 _qv_12)))))
    | Assumptions [6]: (forall ((Nat) (Lst)) ((sort (cons _qv_13 _qv_14))=(insort _qv_13 (sort _qv_14))))
    | Assumptions [7]: (forall ((Nat)) (!(less _qv_1 zero)))
    | Assumptions [8]: (forall ((Nat)) (less zero (succ _qv_2)))
    ====================
  }
}

Base case:       ((count _v_10 (insort _v_10 nil))=(succ (count _v_10 nil)))
{
  proven trivially
}
Inductive step:  ((count _v_10 (insort _v_10 (cons _t_11 _t_12)))=(succ (count _v_10 (cons _t_11 _t_12))))
{
  proven trivially
}

Proved
unsat
