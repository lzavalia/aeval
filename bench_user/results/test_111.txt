
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
	(forall ((Nat)) (0<=(nat-to-int _qv_1)))
	(forall ((Nat) (Nat)) ((plus _qv_2 _qv_3)=(plus _qv_3 _qv_2)))
	(forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_4 _qv_5) _qv_6)=(plus _qv_4 (plus _qv_5 _qv_6))))
	(forall ((Lst) (Lst)) ((append _qv_7 _qv_8)=(append _qv_8 _qv_7)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_9 _qv_10) _qv_11)=(append _qv_9 (append _qv_10 _qv_11))))
	(forall ((Nat)) ((nat-to-int (succ _qv_12))=(nat-to-int _qv_12)))
	(forall ((Nat) (Nat)) ((succ (plus _qv_13 _qv_14))=(plus (succ _qv_13) (succ _qv_14))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_13 _qv_14))=(plus (succ _qv_14) (succ _qv_13))))

Simplified goal: (forall ((Nat) (Lst) (Lst)) ((plus (count n l) (count n m))=(count n (append l m))))


Base case:       ((plus (count zero _v_15) (count zero _v_16))=(count zero (append _v_15 _v_16)))
{
  {
    ====================
    | Assumptions [0]: ((nat-to-int zero)=0)
    | Assumptions [1]: (forall ((Nat)) ((nat-to-int _qv_1)>=0))
    | Assumptions [2]: (forall ((Nat) (Nat)) (((nat-to-int _qv_2)=(nat-to-int _qv_3))->(_qv_2=_qv_3)))
    | Assumptions [3]: (forall ((Nat)) ((nat-to-int (succ _qv_4))=(1+(nat-to-int _qv_4))))
    | Assumptions [4]: (forall ((Nat)) ((plus zero _qv_5)=_qv_5))
    | Assumptions [5]: (forall ((Nat) (Nat)) ((plus (succ _qv_6) _qv_7)=(succ (plus _qv_6 _qv_7))))
    | Assumptions [6]: (forall ((Nat) (Nat)) ((nat-to-int (plus _qv_8 _qv_9))=((nat-to-int _qv_8)+(nat-to-int _qv_9))))
    | Assumptions [7]: (forall ((Lst)) ((append nil _qv_10)=_qv_10))
    | Assumptions [8]: (forall ((Nat) (Lst) (Lst)) ((append (cons _qv_11 _qv_12) _qv_13)=(cons _qv_11 (append _qv_12 _qv_13))))
    | Assumptions [9]: (forall ((Nat)) ((count _qv_14 nil)=zero))
    | Assumptions [10]: (forall ((Nat) (Nat) (Lst)) ((count _qv_15 (cons _qv_16 _qv_17))=ite(_qv_15=_qv_16, (succ (count _qv_15 _qv_17)), (count _qv_15 _qv_17))))
    ====================
  }
  rewritten [2]: ((nat-to-int (plus (count zero _v_15) (count zero _v_16)))=(nat-to-int (count zero (append _v_15 _v_16))))
  rewritten [6]: (((nat-to-int (count zero _v_15))+(nat-to-int (count zero _v_16)))=(nat-to-int (count zero (append _v_15 _v_16))))

The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_17))=_qv_17))
	(forall ((Nat)) (0<=(nat-to-int _qv_18)))
	(forall ((Nat) (Nat)) ((plus _qv_19 _qv_20)=(plus _qv_20 _qv_19)))
	(forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_21 _qv_22) _qv_23)=(plus _qv_21 (plus _qv_22 _qv_23))))
	(forall ((Lst) (Lst)) ((append _qv_24 _qv_25)=(append _qv_25 _qv_24)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_26 _qv_27) _qv_28)=(append _qv_26 (append _qv_27 _qv_28))))
	(forall ((Nat)) ((nat-to-int (succ _qv_29))=(nat-to-int _qv_29)))
	(forall ((Nat) (Nat)) ((succ (plus _qv_30 _qv_31))=(plus (succ _qv_30) (succ _qv_31))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_30 _qv_31))=(plus (succ _qv_31) (succ _qv_30))))

  proven by induction: (((nat-to-int (count zero _v_15))+(nat-to-int (count zero _v_16)))=(nat-to-int (count zero (append _v_15 _v_16))))
  rewriting done
}
Inductive step:  ((plus (count (succ _t_17) _v_15) (count (succ _t_17) _v_16))=(count (succ _t_17) (append _v_15 _v_16)))
{
  {
    ====================
    | Assumptions [0]: ((nat-to-int zero)=0)
    | Assumptions [1]: (forall ((Nat)) ((nat-to-int _qv_1)>=0))
    | Assumptions [2]: (forall ((Nat) (Nat)) (((nat-to-int _qv_2)=(nat-to-int _qv_3))->(_qv_2=_qv_3)))
    | Assumptions [3]: (forall ((Nat)) ((nat-to-int (succ _qv_4))=(1+(nat-to-int _qv_4))))
    | Assumptions [4]: (forall ((Nat)) ((plus zero _qv_5)=_qv_5))
    | Assumptions [5]: (forall ((Nat) (Nat)) ((plus (succ _qv_6) _qv_7)=(succ (plus _qv_6 _qv_7))))
    | Assumptions [6]: (forall ((Nat) (Nat)) ((nat-to-int (plus _qv_8 _qv_9))=((nat-to-int _qv_8)+(nat-to-int _qv_9))))
    | Assumptions [7]: (forall ((Lst)) ((append nil _qv_10)=_qv_10))
    | Assumptions [8]: (forall ((Nat) (Lst) (Lst)) ((append (cons _qv_11 _qv_12) _qv_13)=(cons _qv_11 (append _qv_12 _qv_13))))
    | Assumptions [9]: (forall ((Nat)) ((count _qv_14 nil)=zero))
    | Assumptions [10]: (forall ((Nat) (Nat) (Lst)) ((count _qv_15 (cons _qv_16 _qv_17))=ite(_qv_15=_qv_16, (succ (count _qv_15 _qv_17)), (count _qv_15 _qv_17))))
    | Assumptions [11]: (forall ((Lst) (Lst)) ((plus (count _t_17 l) (count _t_17 m))=(count _t_17 (append l m))))
    | Assumptions [12]: (forall ((Lst) (Lst)) ((count _t_17 (append l m))=(plus (count _t_17 l) (count _t_17 m))))
    ====================
  }
  rewritten [2]: ((nat-to-int (plus (count (succ _t_17) _v_15) (count (succ _t_17) _v_16)))=(nat-to-int (count (succ _t_17) (append _v_15 _v_16))))
  rewritten [6]: (((nat-to-int (count (succ _t_17) _v_15))+(nat-to-int (count (succ _t_17) _v_16)))=(nat-to-int (count (succ _t_17) (append _v_15 _v_16))))

The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_19))=_qv_19))
	(forall ((Nat)) (0<=(nat-to-int _qv_20)))
	(forall ((Nat) (Nat)) ((plus _qv_21 _qv_22)=(plus _qv_22 _qv_21)))
	(forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_23 _qv_24) _qv_25)=(plus _qv_23 (plus _qv_24 _qv_25))))
	(forall ((Lst) (Lst)) ((append _qv_26 _qv_27)=(append _qv_27 _qv_26)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_28 _qv_29) _qv_30)=(append _qv_28 (append _qv_29 _qv_30))))
	(forall ((Nat)) ((nat-to-int (succ _qv_31))=(nat-to-int _qv_31)))
	(forall ((Nat) (Nat)) ((succ (plus _qv_32 _qv_33))=(plus (succ _qv_32) (succ _qv_33))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_32 _qv_33))=(plus (succ _qv_33) (succ _qv_32))))

CURRENT SUBGOAL (((nat-to-int (count zero _v_34))+(nat-to-int (count zero _v_35)))=(nat-to-int (count zero (append _v_34 _v_35))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_19))=_qv_19))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (((nat-to-int (count zero _v_34))+(nat-to-int (count zero _v_35)))=(nat-to-int (count zero (append _v_34 _v_35))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_20)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (((nat-to-int (count zero _v_34))+(nat-to-int (count zero _v_35)))=(nat-to-int (count zero (append _v_34 _v_35))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_21 _qv_22)=(plus _qv_22 _qv_21)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (((nat-to-int (count zero _v_34))+(nat-to-int (count zero _v_35)))=(nat-to-int (count zero (append _v_34 _v_35))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_23 _qv_24) _qv_25)=(plus _qv_23 (plus _qv_24 _qv_25))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (((nat-to-int (count zero _v_34))+(nat-to-int (count zero _v_35)))=(nat-to-int (count zero (append _v_34 _v_35))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_26 _qv_27)=(append _qv_27 _qv_26)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (((nat-to-int (count zero _v_34))+(nat-to-int (count zero _v_35)))=(nat-to-int (count zero (append _v_34 _v_35))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_28 _qv_29) _qv_30)=(append _qv_28 (append _qv_29 _qv_30))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (((nat-to-int (count zero _v_34))+(nat-to-int (count zero _v_35)))=(nat-to-int (count zero (append _v_34 _v_35))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_31))=(nat-to-int _qv_31)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (((nat-to-int (count zero _v_34))+(nat-to-int (count zero _v_35)))=(nat-to-int (count zero (append _v_34 _v_35))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_32 _qv_33))=(plus (succ _qv_32) (succ _qv_33))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (((nat-to-int (count zero _v_34))+(nat-to-int (count zero _v_35)))=(nat-to-int (count zero (append _v_34 _v_35))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_32 _qv_33))=(plus (succ _qv_33) (succ _qv_32))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (((nat-to-int (count zero _v_34))+(nat-to-int (count zero _v_35)))=(nat-to-int (count zero (append _v_34 _v_35))))
NOW TESTING (forall ((Nat)) ((succ (succ _qv_19))=_qv_19))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (((nat-to-int (count zero _v_34))+(nat-to-int (count zero _v_35)))=(nat-to-int (count zero (append _v_34 _v_35))))
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_20)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (((nat-to-int (count zero _v_34))+(nat-to-int (count zero _v_35)))=(nat-to-int (count zero (append _v_34 _v_35))))
NOW TESTING (forall ((Nat) (Nat)) ((plus _qv_21 _qv_22)=(plus _qv_22 _qv_21)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (((nat-to-int (count zero _v_34))+(nat-to-int (count zero _v_35)))=(nat-to-int (count zero (append _v_34 _v_35))))
NOW TESTING (forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_23 _qv_24) _qv_25)=(plus _qv_23 (plus _qv_24 _qv_25))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (((nat-to-int (count zero _v_34))+(nat-to-int (count zero _v_35)))=(nat-to-int (count zero (append _v_34 _v_35))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_26 _qv_27)=(append _qv_27 _qv_26)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (((nat-to-int (count zero _v_34))+(nat-to-int (count zero _v_35)))=(nat-to-int (count zero (append _v_34 _v_35))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_28 _qv_29) _qv_30)=(append _qv_28 (append _qv_29 _qv_30))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (((nat-to-int (count zero _v_34))+(nat-to-int (count zero _v_35)))=(nat-to-int (count zero (append _v_34 _v_35))))
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_31))=(nat-to-int _qv_31)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (((nat-to-int (count zero _v_34))+(nat-to-int (count zero _v_35)))=(nat-to-int (count zero (append _v_34 _v_35))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_32 _qv_33))=(plus (succ _qv_32) (succ _qv_33))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (((nat-to-int (count zero _v_34))+(nat-to-int (count zero _v_35)))=(nat-to-int (count zero (append _v_34 _v_35))))
NOW TESTING (forall ((Nat) (Nat)) ((succ (plus _qv_32 _qv_33))=(plus (succ _qv_33) (succ _qv_32))))
USE ASSUMPTION FAILED

  proven by induction: (((nat-to-int (count _w_18 _v_15))+(nat-to-int (count _w_18 _v_16)))=(nat-to-int (count _w_18 (append _v_15 _v_16))))
  rewriting done
}

Proved
unsat
