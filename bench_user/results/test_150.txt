
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
	(forall ((Nat)) (0<=(nat-to-int _qv_1)))
	(forall ((Nat)) ((nat-to-int (succ _qv_2))=(nat-to-int _qv_2)))

Simplified goal: (forall ((Nat) (Lst)) (!(mem x (delete x l))))


Base case:       (!(mem zero (delete zero _v_3)))
{
  {
    ====================
    | Assumptions [0]: ((nat-to-int zero)=0)
    | Assumptions [1]: (forall ((Nat)) ((nat-to-int _qv_1)>=0))
    | Assumptions [2]: (forall ((Nat) (Nat)) (((nat-to-int _qv_2)=(nat-to-int _qv_3))->(_qv_2=_qv_3)))
    | Assumptions [3]: (forall ((Nat)) ((nat-to-int (succ _qv_4))=(1+(nat-to-int _qv_4))))
    | Assumptions [4]: (forall ((Nat) (Nat) (Lst)) ((mem _qv_6 (cons _qv_7 _qv_8))=((_qv_6=_qv_7)||(mem _qv_6 _qv_8))))
    | Assumptions [5]: (forall ((Nat)) ((delete _qv_9 nil)=nil))
    | Assumptions [6]: (forall ((Nat) (Nat) (Lst)) ((delete _qv_10 (cons _qv_11 _qv_12))=ite(_qv_10=_qv_11, (delete _qv_10 _qv_12), (cons _qv_11 (delete _qv_10 _qv_12)))))
    | Assumptions [7]: (forall ((Nat)) (!(mem _qv_5 nil)))
    ====================
  }
}

Base case:       (!(mem _v_4 (delete _v_4 nil)))
{
  proven trivially
}
Inductive step:  (!(mem _v_4 (delete _v_4 (cons _t_5 _t_6))))
{
  proven trivially
}

Proved
unsat
