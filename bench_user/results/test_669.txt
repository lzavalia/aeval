
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Lst)) (0<=(len _qv_0)))
	(forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
	(forall (INT INT) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
	(forall (INT INT INT) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))

Simplified goal: (forall ((Lst)) ((rotate (len x) x)=x))


Base case:       ((rotate (len nil) nil)=nil)
{
  proven trivially
}
Inductive step:  ((rotate (len (cons _t_11 _t_12)) (cons _t_11 _t_12))=(cons _t_11 _t_12))
{
  {
    ====================
    | Assumptions [0]: ((len nil)=0)
    | Assumptions [1]: (forall (INT (Lst)) ((len (cons _qv_1 _qv_2))=(1+(len _qv_2))))
    | Assumptions [2]: (forall ((Lst)) ((len _qv_3)>=0))
    | Assumptions [3]: (forall ((Lst)) ((append nil _qv_4)=_qv_4))
    | Assumptions [4]: (forall (INT (Lst) (Lst)) ((append (cons _qv_5 _qv_6) _qv_7)=(cons _qv_5 (append _qv_6 _qv_7))))
    | Assumptions [5]: (forall ((Lst)) ((rotate 0 _qv_8)=_qv_8))
    | Assumptions [6]: (forall (INT) ((_qv_9>=0)->((rotate 1+_qv_9 nil)=nil)))
    | Assumptions [7]: (forall (INT INT (Lst)) ((_qv_10>=0)->((rotate 1+_qv_10 (cons _qv_11 _qv_12))=(rotate _qv_10 (append _qv_12 (cons _qv_11 nil))))))
    | Assumptions [8]: (forall (INT) ((_qv_13>=0)->((plus 0 _qv_13)=_qv_13)))
    | Assumptions [9]: (forall (INT INT) (((_qv_14>=0)&&(_qv_15>=0))->((plus 1+_qv_14 _qv_15)=(1+(plus _qv_14 _qv_15)))))
    | Assumptions [10]: (forall (INT INT) (((_qv_16>=0)&&(_qv_17>=0))->((plus _qv_16 _qv_17)=(_qv_16+_qv_17))))
    | Assumptions [11]: ((rotate (len _t_12) _t_12)=_t_12)
    | Assumptions [12]: (_t_12=(rotate (len _t_12) _t_12))
    | Assumptions [13]: ((rotate (len (rotate (len _t_12) _t_12)) (rotate (len _t_12) _t_12))=(rotate (len _t_12) _t_12))
    | Assumptions [14]: ((rotate (len (rotate (len (rotate (len _t_12) _t_12)) (rotate (len _t_12) _t_12))) (rotate (len (rotate (len _t_12) _t_12)) (rotate (len _t_12) _t_12)))=(rotate (len (rotate (len _t_12) _t_12)) (rotate (len _t_12) _t_12)))
    | Assumptions [15]: ((rotate (len (rotate (len (rotate (len (rotate (len _t_12) _t_12)) (rotate (len _t_12) _t_12))) (rotate (len (rotate (len _t_12) _t_12)) (rotate (len _t_12) _t_12)))) (rotate (len (rotate (len (rotate (len _t_12) _t_12)) (rotate (len _t_12) _t_12))) (rotate (len (rotate (len _t_12) _t_12)) (rotate (len _t_12) _t_12))))=(rotate (len (rotate (len (rotate (len _t_12) _t_12)) (rotate (len _t_12) _t_12))) (rotate (len (rotate (len _t_12) _t_12)) (rotate (len _t_12) _t_12))))
    ====================
  }
  rewritten [1]: ((rotate 1+(len _t_12) (cons _t_11 _t_12))=(cons _t_11 _t_12))
  rewritten [12]: ((rotate (len (rotate (len _t_12) _t_12))+1 (cons _t_11 (rotate (len _t_12) _t_12)))=(cons _t_11 (rotate (len _t_12) _t_12)))
  rewritten [11]: ((rotate (len _t_12)+1 (cons _t_11 _t_12))=(cons _t_11 _t_12))

The Knowledge Scheme currently contains the following lemmas:
	(forall ((Lst)) (0<=(len _qv_14)))
	(forall ((Lst) (Lst)) ((append _qv_15 _qv_16)=(append _qv_16 _qv_15)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_17 _qv_18) _qv_19)=(append _qv_17 (append _qv_18 _qv_19))))
	(forall (INT INT) ((plus _qv_20 _qv_21)=(plus _qv_21 _qv_20)))
	(forall (INT INT INT) ((plus (plus _qv_22 _qv_23) _qv_24)=(plus _qv_22 (plus _qv_23 _qv_24))))

CURRENT SUBGOAL ((rotate (len _t_27)+2 (cons _v_25 (rotate (len _t_27)+1 (rotate (len _t_27)+1 (rotate (len (cons _t_26 _t_27)) (cons _t_26 _t_27))))))=(cons _v_25 (rotate (len _t_27)+1 (rotate (len _t_27)+1 (rotate (len (cons _t_26 _t_27)) (cons _t_26 _t_27))))))
NOW TESTING (forall ((Lst)) (0<=(len _qv_14)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_27)+2 (cons _v_25 (rotate (len _t_27)+1 (rotate (len _t_27)+1 (rotate (len (cons _t_26 _t_27)) (cons _t_26 _t_27))))))=(cons _v_25 (rotate (len _t_27)+1 (rotate (len _t_27)+1 (rotate (len (cons _t_26 _t_27)) (cons _t_26 _t_27))))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_15 _qv_16)=(append _qv_16 _qv_15)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_27)+2 (cons _v_25 (rotate (len _t_27)+1 (rotate (len _t_27)+1 (rotate (len (cons _t_26 _t_27)) (cons _t_26 _t_27))))))=(cons _v_25 (rotate (len _t_27)+1 (rotate (len _t_27)+1 (rotate (len (cons _t_26 _t_27)) (cons _t_26 _t_27))))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_17 _qv_18) _qv_19)=(append _qv_17 (append _qv_18 _qv_19))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_27)+2 (cons _v_25 (rotate (len _t_27)+1 (rotate (len _t_27)+1 (rotate (len (cons _t_26 _t_27)) (cons _t_26 _t_27))))))=(cons _v_25 (rotate (len _t_27)+1 (rotate (len _t_27)+1 (rotate (len (cons _t_26 _t_27)) (cons _t_26 _t_27))))))
NOW TESTING (forall (INT INT) ((plus _qv_20 _qv_21)=(plus _qv_21 _qv_20)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((rotate (len _t_27)+2 (cons _v_25 (rotate (len _t_27)+1 (rotate (len _t_27)+1 (rotate (len (cons _t_26 _t_27)) (cons _t_26 _t_27))))))=(cons _v_25 (rotate (len _t_27)+1 (rotate (len _t_27)+1 (rotate (len (cons _t_26 _t_27)) (cons _t_26 _t_27))))))
NOW TESTING (forall (INT INT INT) ((plus (plus _qv_22 _qv_23) _qv_24)=(plus _qv_22 (plus _qv_23 _qv_24))))
USE ASSUMPTION FAILED


The Knowledge Scheme currently contains the following lemmas:
	(forall ((Lst)) (0<=(len _qv_42)))
	(forall ((Lst) (Lst)) ((append _qv_43 _qv_44)=(append _qv_44 _qv_43)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_45 _qv_46) _qv_47)=(append _qv_45 (append _qv_46 _qv_47))))
	(forall (INT INT) ((plus _qv_48 _qv_49)=(plus _qv_49 _qv_48)))
	(forall (INT INT INT) ((plus (plus _qv_50 _qv_51) _qv_52)=(plus _qv_50 (plus _qv_51 _qv_52))))
	(forall (INT (Lst) (Lst)) ((rotate _qv_53 (cons _qv_54 _qv_55))=(cons (rotate _qv_53 _qv_54) (rotate _qv_53 _qv_55))))
	(forall (INT (Lst) (Lst)) ((cons _qv_56 (rotate _qv_57 _qv_58))=(rotate (cons _qv_56 _qv_57) (cons _qv_56 _qv_58))))

