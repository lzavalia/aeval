
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Lst) (Lst)) ((zip _qv_0 _qv_1)=(zip _qv_1 _qv_0)))

Simplified goal: (forall (INT (Lst) (Lst)) ((n>=0)->((zdrop n (zip xs ys))=(zip (drop n xs) (drop n ys)))))


Base case:       ((zdrop _v_2 (zip nil _v_3))=(zip (drop _v_2 nil) (drop _v_2 _v_3)))
{
  proven trivially
}
Inductive step:  ((zdrop _v_2 (zip (cons _t_4 _t_5) _v_3))=(zip (drop _v_2 (cons _t_4 _t_5)) (drop _v_2 _v_3)))
{
  {
    ====================
    | Assumptions [0]: (forall (INT) ((drop _qv_1 nil)=nil))
    | Assumptions [1]: (forall ((Lst)) ((drop 0 _qv_2)=_qv_2))
    | Assumptions [2]: (forall (INT INT (Lst)) ((_qv_3>=0)->((drop _qv_3+1 (cons _qv_4 _qv_5))=(drop _qv_3 _qv_5))))
    | Assumptions [3]: (forall ((Lst)) ((zip nil _qv_6)=znil))
    | Assumptions [4]: (forall ((Lst)) ((zip _qv_7 nil)=znil))
    | Assumptions [5]: (forall (INT (Lst) INT (Lst)) ((zip (cons _qv_8 _qv_9) (cons _qv_10 _qv_11))=(zcons (mkpair _qv_8 _qv_10) (zip _qv_9 _qv_11))))
    | Assumptions [6]: (forall (INT) ((zdrop _qv_12 znil)=znil))
    | Assumptions [7]: (forall ((ZLst)) ((zdrop 0 _qv_13)=_qv_13))
    | Assumptions [8]: (forall (INT (Pair) (ZLst)) ((_qv_14>=0)->((zdrop _qv_14+1 (zcons _qv_15 _qv_16))=(zdrop _qv_14 _qv_16))))
    | Assumptions [9]: (_v_2>=0)
    | Assumptions [10]: (forall (INT (Lst)) ((n>=0)->((zdrop n (zip _t_5 ys))=(zip (drop n _t_5) (drop n ys)))))
    | Assumptions [11]: (forall (INT (Lst)) ((drop _v_2+1 (cons _qv_4 _qv_5))=(drop _v_2 _qv_5)))
    | Assumptions [12]: (forall ((Pair) (ZLst)) ((zdrop _v_2+1 (zcons _qv_15 _qv_16))=(zdrop _v_2 _qv_16)))
    | Assumptions [13]: (forall ((Lst)) ((zdrop _v_2 (zip _t_5 ys))=(zip (drop _v_2 _t_5) (drop _v_2 ys))))
    ====================
  }

Base case:       ((zdrop _v_6 (zip _v_7 nil))=(zip (drop _v_6 _v_7) (drop _v_6 nil)))
{
  proven trivially
}
Inductive step:  ((zdrop _v_6 (zip _v_7 (cons _t_8 _t_9)))=(zip (drop _v_6 _v_7) (drop _v_6 (cons _t_8 _t_9))))
{
  {
    ====================
    | Assumptions [0]: (forall (INT) ((drop _qv_1 nil)=nil))
    | Assumptions [1]: (forall ((Lst)) ((drop 0 _qv_2)=_qv_2))
    | Assumptions [2]: (forall (INT INT (Lst)) ((_qv_3>=0)->((drop _qv_3+1 (cons _qv_4 _qv_5))=(drop _qv_3 _qv_5))))
    | Assumptions [3]: (forall ((Lst)) ((zip nil _qv_6)=znil))
    | Assumptions [4]: (forall ((Lst)) ((zip _qv_7 nil)=znil))
    | Assumptions [5]: (forall (INT (Lst) INT (Lst)) ((zip (cons _qv_8 _qv_9) (cons _qv_10 _qv_11))=(zcons (mkpair _qv_8 _qv_10) (zip _qv_9 _qv_11))))
    | Assumptions [6]: (forall (INT) ((zdrop _qv_12 znil)=znil))
    | Assumptions [7]: (forall ((ZLst)) ((zdrop 0 _qv_13)=_qv_13))
    | Assumptions [8]: (forall (INT (Pair) (ZLst)) ((_qv_14>=0)->((zdrop _qv_14+1 (zcons _qv_15 _qv_16))=(zdrop _qv_14 _qv_16))))
    | Assumptions [9]: (_v_2>=0)
    | Assumptions [10]: (forall (INT (Lst)) ((n>=0)->((zdrop n (zip _t_5 ys))=(zip (drop n _t_5) (drop n ys)))))
    | Assumptions [11]: (forall (INT (Lst)) ((drop _v_2+1 (cons _qv_4 _qv_5))=(drop _v_2 _qv_5)))
    | Assumptions [12]: (forall ((Pair) (ZLst)) ((zdrop _v_2+1 (zcons _qv_15 _qv_16))=(zdrop _v_2 _qv_16)))
    | Assumptions [13]: (forall ((Lst)) ((zdrop _v_2 (zip _t_5 ys))=(zip (drop _v_2 _t_5) (drop _v_2 ys))))
    | Assumptions [14]: (_v_6>=0)
    | Assumptions [15]: (forall (INT (Lst)) ((n>=0)->((zdrop n (zip xs _t_9))=(zip (drop n xs) (drop n _t_9)))))
    | Assumptions [16]: (forall ((Lst)) ((zdrop _v_2 (zip xs _t_9))=(zip (drop _v_2 xs) (drop _v_2 _t_9))))
    | Assumptions [17]: (forall (INT (Lst)) ((drop _v_6+1 (cons _qv_4 _qv_5))=(drop _v_6 _qv_5)))
    | Assumptions [18]: (forall ((Pair) (ZLst)) ((zdrop _v_6+1 (zcons _qv_15 _qv_16))=(zdrop _v_6 _qv_16)))
    | Assumptions [19]: (forall ((Lst)) ((zdrop _v_6 (zip _t_5 ys))=(zip (drop _v_6 _t_5) (drop _v_6 ys))))
    | Assumptions [20]: (forall ((Lst)) ((zdrop _v_6 (zip xs _t_9))=(zip (drop _v_6 xs) (drop _v_6 _t_9))))
    ====================
  }
Unknown
sat
