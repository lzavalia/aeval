
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
	(forall ((Nat)) (0<=(nat-to-int _qv_1)))
	(forall ((Nat) (Nat)) ((less _qv_2 _qv_3)=(less _qv_3 _qv_2)))
	(forall ((Lst)) ((sort (sort _qv_4))=_qv_4))
	(forall ((Nat)) ((nat-to-int (succ _qv_5))=(nat-to-int _qv_5)))
	(forall ((Nat) (Lst) (Lst)) ((insort _qv_6 (cons _qv_7 _qv_8))=(cons (insort _qv_6 _qv_7) (insort _qv_6 _qv_8))))
	(forall ((Nat) (Lst) (Lst)) ((cons _qv_9 (insort _qv_10 _qv_11))=(insort (cons _qv_9 _qv_10) (cons _qv_9 _qv_11))))

Simplified goal: (forall ((Nat) (Nat) (Lst)) ((!(x=y))->((mem x (insort y z))->(mem x z))))


Base case:       ((mem zero (insort _v_12 _v_13))->(mem zero _v_13))
{
  {
    ====================
    | Assumptions [0]: ((nat-to-int zero)=0)
    | Assumptions [1]: ((sort nil)=nil)
    | Assumptions [2]: (forall ((Nat)) ((nat-to-int _qv_1)>=0))
    | Assumptions [3]: (forall ((Nat) (Nat)) (((nat-to-int _qv_2)=(nat-to-int _qv_3))->(_qv_2=_qv_3)))
    | Assumptions [4]: (forall ((Nat)) ((nat-to-int (succ _qv_4))=(1+(nat-to-int _qv_4))))
    | Assumptions [5]: (forall ((Nat) (Nat)) ((less (succ _qv_7) (succ _qv_8))=(less _qv_7 _qv_8)))
    | Assumptions [6]: (forall ((Nat) (Nat)) ((less _qv_9 _qv_10)=((nat-to-int _qv_9)<(nat-to-int _qv_10))))
    | Assumptions [7]: (forall ((Nat) (Nat) (Lst)) ((mem _qv_12 (cons _qv_13 _qv_14))=((_qv_12=_qv_13)||(mem _qv_12 _qv_14))))
    | Assumptions [8]: (forall ((Nat)) ((insort _qv_15 nil)=(cons _qv_15 nil)))
    | Assumptions [9]: (forall ((Nat) (Nat) (Lst)) ((insort _qv_16 (cons _qv_17 _qv_18))=ite((less _qv_16 _qv_17), (cons _qv_16 (cons _qv_17 _qv_18)), (cons _qv_17 (insort _qv_16 _qv_18)))))
    | Assumptions [10]: (forall ((Nat) (Lst)) ((sort (cons _qv_19 _qv_20))=(insort _qv_19 (sort _qv_20))))
    | Assumptions [11]: (forall ((Nat)) (!(less _qv_5 zero)))
    | Assumptions [12]: (forall ((Nat)) (less zero (succ _qv_6)))
    | Assumptions [13]: (forall ((Nat)) (!(mem _qv_11 nil)))
    | Assumptions [14]: (zero!=_v_12)
    ====================
  }
  {
    ====================
    | Assumptions [0]: ((nat-to-int zero)=0)
    | Assumptions [1]: ((sort nil)=nil)
    | Assumptions [2]: (forall ((Nat)) ((nat-to-int _qv_1)>=0))
    | Assumptions [3]: (forall ((Nat) (Nat)) (((nat-to-int _qv_2)=(nat-to-int _qv_3))->(_qv_2=_qv_3)))
    | Assumptions [4]: (forall ((Nat)) ((nat-to-int (succ _qv_4))=(1+(nat-to-int _qv_4))))
    | Assumptions [5]: (forall ((Nat) (Nat)) ((less (succ _qv_7) (succ _qv_8))=(less _qv_7 _qv_8)))
    | Assumptions [6]: (forall ((Nat) (Nat)) ((less _qv_9 _qv_10)=((nat-to-int _qv_9)<(nat-to-int _qv_10))))
    | Assumptions [7]: (forall ((Nat) (Nat) (Lst)) ((mem _qv_12 (cons _qv_13 _qv_14))=((_qv_12=_qv_13)||(mem _qv_12 _qv_14))))
    | Assumptions [8]: (forall ((Nat)) ((insort _qv_15 nil)=(cons _qv_15 nil)))
    | Assumptions [9]: (forall ((Nat) (Nat) (Lst)) ((insort _qv_16 (cons _qv_17 _qv_18))=ite((less _qv_16 _qv_17), (cons _qv_16 (cons _qv_17 _qv_18)), (cons _qv_17 (insort _qv_16 _qv_18)))))
    | Assumptions [10]: (forall ((Nat) (Lst)) ((sort (cons _qv_19 _qv_20))=(insort _qv_19 (sort _qv_20))))
    | Assumptions [11]: (mem zero (insort _v_12 _v_13))
    | Assumptions [12]: (forall ((Nat)) (!(less _qv_5 zero)))
    | Assumptions [13]: (forall ((Nat)) (less zero (succ _qv_6)))
    | Assumptions [14]: (forall ((Nat)) (!(mem _qv_11 nil)))
    | Assumptions [15]: (zero!=_v_12)
    ====================
  }
  current subgoal: (mem zero _v_13)
}

Base case:       ((mem _v_14 (insort zero _v_15))->(mem _v_14 _v_15))
{
  {
    ====================
    | Assumptions [0]: ((nat-to-int zero)=0)
    | Assumptions [1]: ((sort nil)=nil)
    | Assumptions [2]: (forall ((Nat)) ((nat-to-int _qv_1)>=0))
    | Assumptions [3]: (forall ((Nat) (Nat)) (((nat-to-int _qv_2)=(nat-to-int _qv_3))->(_qv_2=_qv_3)))
    | Assumptions [4]: (forall ((Nat)) ((nat-to-int (succ _qv_4))=(1+(nat-to-int _qv_4))))
    | Assumptions [5]: (forall ((Nat) (Nat)) ((less (succ _qv_7) (succ _qv_8))=(less _qv_7 _qv_8)))
    | Assumptions [6]: (forall ((Nat) (Nat)) ((less _qv_9 _qv_10)=((nat-to-int _qv_9)<(nat-to-int _qv_10))))
    | Assumptions [7]: (forall ((Nat) (Nat) (Lst)) ((mem _qv_12 (cons _qv_13 _qv_14))=((_qv_12=_qv_13)||(mem _qv_12 _qv_14))))
    | Assumptions [8]: (forall ((Nat)) ((insort _qv_15 nil)=(cons _qv_15 nil)))
    | Assumptions [9]: (forall ((Nat) (Nat) (Lst)) ((insort _qv_16 (cons _qv_17 _qv_18))=ite((less _qv_16 _qv_17), (cons _qv_16 (cons _qv_17 _qv_18)), (cons _qv_17 (insort _qv_16 _qv_18)))))
    | Assumptions [10]: (forall ((Nat) (Lst)) ((sort (cons _qv_19 _qv_20))=(insort _qv_19 (sort _qv_20))))
    | Assumptions [11]: (forall ((Nat)) (!(less _qv_5 zero)))
    | Assumptions [12]: (forall ((Nat)) (less zero (succ _qv_6)))
    | Assumptions [13]: (forall ((Nat)) (!(mem _qv_11 nil)))
    | Assumptions [14]: (zero!=_v_12)
    | Assumptions [15]: (_v_14!=zero)
    ====================
  }
  {
    ====================
    | Assumptions [0]: ((nat-to-int zero)=0)
    | Assumptions [1]: ((sort nil)=nil)
    | Assumptions [2]: (forall ((Nat)) ((nat-to-int _qv_1)>=0))
    | Assumptions [3]: (forall ((Nat) (Nat)) (((nat-to-int _qv_2)=(nat-to-int _qv_3))->(_qv_2=_qv_3)))
    | Assumptions [4]: (forall ((Nat)) ((nat-to-int (succ _qv_4))=(1+(nat-to-int _qv_4))))
    | Assumptions [5]: (forall ((Nat) (Nat)) ((less (succ _qv_7) (succ _qv_8))=(less _qv_7 _qv_8)))
    | Assumptions [6]: (forall ((Nat) (Nat)) ((less _qv_9 _qv_10)=((nat-to-int _qv_9)<(nat-to-int _qv_10))))
    | Assumptions [7]: (forall ((Nat) (Nat) (Lst)) ((mem _qv_12 (cons _qv_13 _qv_14))=((_qv_12=_qv_13)||(mem _qv_12 _qv_14))))
    | Assumptions [8]: (forall ((Nat)) ((insort _qv_15 nil)=(cons _qv_15 nil)))
    | Assumptions [9]: (forall ((Nat) (Nat) (Lst)) ((insort _qv_16 (cons _qv_17 _qv_18))=ite((less _qv_16 _qv_17), (cons _qv_16 (cons _qv_17 _qv_18)), (cons _qv_17 (insort _qv_16 _qv_18)))))
    | Assumptions [10]: (forall ((Nat) (Lst)) ((sort (cons _qv_19 _qv_20))=(insort _qv_19 (sort _qv_20))))
    | Assumptions [11]: (forall ((Nat)) (!(less _qv_5 zero)))
    | Assumptions [12]: (forall ((Nat)) (less zero (succ _qv_6)))
    | Assumptions [13]: (forall ((Nat)) (!(mem _qv_11 nil)))
    | Assumptions [14]: (zero!=_v_12)
    | Assumptions [15]: (mem _v_14 (insort zero _v_15))
    | Assumptions [16]: (_v_14!=zero)
    ====================
  }
  current subgoal: (mem _v_14 _v_15)
}

Base case:       ((mem _v_16 (insort _v_17 nil))->(mem _v_16 nil))
{
  proven trivially
}
Inductive step:  ((mem _v_16 (insort _v_17 (cons _t_18 _t_19)))->(mem _v_16 (cons _t_18 _t_19)))
{
  proven trivially
}

Proved
unsat
