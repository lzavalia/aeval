
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
	(forall ((Nat)) (0<=(nat-to-int _qv_1)))
	(forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
	(forall ((Nat)) ((nat-to-int (succ _qv_7))=(nat-to-int _qv_7)))

Simplified goal: (forall ((Lst) (Nat) (Lst)) ((append (append x (cons y nil)) z)=(append x (cons y z))))


Base case:       ((append (append nil (cons _v_8 nil)) _v_9)=(append nil (cons _v_8 _v_9)))
{
  proven trivially
}
Inductive step:  ((append (append (cons _t_10 _t_11) (cons _v_8 nil)) _v_9)=(append (cons _t_10 _t_11) (cons _v_8 _v_9)))
{
  proven trivially
}

Proved
unsat
