
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
	(forall ((Nat)) (0<=(nat-to-int _qv_1)))
	(forall ((Lst) (Lst)) ((append _qv_2 _qv_3)=(append _qv_3 _qv_2)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_4 _qv_5) _qv_6)=(append _qv_4 (append _qv_5 _qv_6))))
	(forall ((Lst)) ((dropWhile (dropWhile _qv_7))=_qv_7))
	(forall ((Lst)) ((takeWhile (takeWhile _qv_8))=_qv_8))
	(forall ((Nat)) ((nat-to-int (succ _qv_9))=(nat-to-int _qv_9)))
	(forall ((Nat) (Lst) (Lst)) ((take _qv_10 (drop _qv_11 _qv_12))=(drop (take _qv_10 _qv_11) (take _qv_10 _qv_12))))
	(forall ((Nat) (Lst) (Lst)) ((drop _qv_13 (take _qv_14 _qv_15))=(take (drop _qv_13 _qv_14) (drop _qv_13 _qv_15))))
	(forall ((Lst) (Lst)) ((dropWhile (append _qv_16 _qv_17))=(append (dropWhile _qv_16) (dropWhile _qv_17))))
	(forall ((Lst) (Lst)) ((dropWhile (append _qv_16 _qv_17))=(append (dropWhile _qv_17) (dropWhile _qv_16))))
	(forall ((Lst) (Lst)) ((takeWhile (append _qv_18 _qv_19))=(append (takeWhile _qv_18) (takeWhile _qv_19))))
	(forall ((Lst) (Lst)) ((takeWhile (append _qv_18 _qv_19))=(append (takeWhile _qv_19) (takeWhile _qv_18))))

Simplified goal: (forall ((Lst)) ((append (takeWhile xs) (dropWhile xs))=xs))


Base case:       ((append (takeWhile nil) (dropWhile nil))=nil)
{
  proven trivially
}
Inductive step:  ((append (takeWhile (cons _t_20 _t_21)) (dropWhile (cons _t_20 _t_21)))=(cons _t_20 _t_21))
{
  proven trivially
}

Proved
unsat
