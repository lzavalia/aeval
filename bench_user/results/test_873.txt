
The Knowledge Scheme currently contains the following lemmas:
	(forall (INT INT) ((plus _qv_0 _qv_1)=(plus _qv_1 _qv_0)))
	(forall (INT INT INT) ((plus (plus _qv_2 _qv_3) _qv_4)=(plus _qv_2 (plus _qv_3 _qv_4))))
	(forall ((Lst) (Lst)) ((append _qv_5 _qv_6)=(append _qv_6 _qv_5)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_7 _qv_8) _qv_9)=(append _qv_7 (append _qv_8 _qv_9))))
	(forall ((Lst)) (0<=(len _qv_10)))
	(forall ((Lst)) ((rev (rev _qv_11))=_qv_11))
	(forall ((Lst) (Lst)) ((qreva _qv_12 _qv_13)=(qreva _qv_13 _qv_12)))
	(forall ((Lst) (Lst) (Lst)) ((qreva (qreva _qv_14 _qv_15) _qv_16)=(qreva _qv_14 (qreva _qv_15 _qv_16))))
	(forall ((Lst)) ((len (rev _qv_17))=(len _qv_17)))
	(forall ((Lst) (Lst) (Lst)) ((qreva _qv_18 (append _qv_19 _qv_20))=(append (qreva _qv_18 _qv_19) (qreva _qv_18 _qv_20))))
	(forall ((Lst) (Lst) (Lst)) ((append _qv_21 (qreva _qv_22 _qv_23))=(qreva (append _qv_21 _qv_22) (append _qv_21 _qv_23))))
	(forall ((Lst) (Lst)) ((rev (append _qv_24 _qv_25))=(append (rev _qv_24) (rev _qv_25))))
	(forall ((Lst) (Lst)) ((rev (append _qv_24 _qv_25))=(append (rev _qv_25) (rev _qv_24))))
	(forall ((Lst) (Lst)) ((rev (qreva _qv_26 _qv_27))=(qreva (rev _qv_26) (rev _qv_27))))
	(forall ((Lst) (Lst)) ((rev (qreva _qv_26 _qv_27))=(qreva (rev _qv_27) (rev _qv_26))))

Simplified goal: (forall ((Lst) (Lst)) ((len (qreva x y))=(plus (len x) (len y))))


Base case:       ((len (qreva nil _v_28))=(plus (len nil) (len _v_28)))
{
  proven trivially
}
Inductive step:  ((len (qreva (cons _t_29 _t_30) _v_28))=(plus (len (cons _t_29 _t_30)) (len _v_28)))
{
  proven trivially
}

Proved
unsat
