
The Knowledge Scheme currently contains the following lemmas:
	(forall (INT INT) ((less _qv_0 _qv_1)=(less _qv_1 _qv_0)))
	(forall ((Lst)) ((sort (sort _qv_2))=_qv_2))
	(forall (INT (Lst) (Lst)) ((insort _qv_3 (cons _qv_4 _qv_5))=(cons (insort _qv_3 _qv_4) (insort _qv_3 _qv_5))))
	(forall (INT (Lst) (Lst)) ((cons _qv_6 (insort _qv_7 _qv_8))=(insort (cons _qv_6 _qv_7) (cons _qv_6 _qv_8))))

Simplified goal: (forall ((Lst) INT) ((sorted x)->(sorted (insort y x))))


Base case:       (sorted (insort _v_9 nil))
{
  proven trivially
}
Inductive step:  (sorted (insort _v_9 (cons _t_10 _t_11)))
{
  {
    ====================
    | Assumptions [0]: (sorted nil)
    | Assumptions [1]: ((sort nil)=nil)
    | Assumptions [2]: (forall (INT INT) (((_qv_2>=0)&&(_qv_3>=0))->((less 1+_qv_2 1+_qv_3)=(less _qv_2 _qv_3))))
    | Assumptions [3]: (forall (INT INT) (((_qv_4>=0)&&(_qv_5>=0))->((less _qv_4 _qv_5)=(_qv_4<_qv_5))))
    | Assumptions [4]: (forall (INT) ((insort _qv_6 nil)=(cons _qv_6 nil)))
    | Assumptions [5]: (forall (INT INT (Lst)) ((insort _qv_7 (cons _qv_8 _qv_9))=ite((less _qv_7 _qv_8), (cons _qv_7 (cons _qv_8 _qv_9)), (cons _qv_8 (insort _qv_7 _qv_9)))))
    | Assumptions [6]: (forall (INT INT (Lst)) ((sorted (cons _qv_11 (cons _qv_12 _qv_13)))=((sorted (cons _qv_12 _qv_13))&&((_qv_11=_qv_12)||(less _qv_11 _qv_12)))))
    | Assumptions [7]: (forall (INT (Lst)) ((sort (cons _qv_14 _qv_15))=(insort _qv_14 (sort _qv_15))))
    | Assumptions [8]: (forall (INT) ((sorted _t_11)->(sorted (insort y _t_11))))
    | Assumptions [9]: (sorted (cons _t_10 _t_11))
    | Assumptions [10]: (!(less 0 0))
    | Assumptions [11]: (forall (INT) ((_qv_1>=0)->(less 0 1+_qv_1)))
    | Assumptions [12]: (forall (INT) (sorted (cons _qv_10 nil)))
    | Assumptions [13]: (sorted (cons _t_10 nil))
    | Assumptions [14]: ((sorted (cons _qv_11 (cons _t_10 _t_11)))=((sorted (cons _t_10 _t_11))&&((less _qv_11 _t_10)||((_qv_11+(-_t_10))=0))))
    ====================
  }
  rewritten [5]: (sorted ite((less _v_9 _t_10), (cons _v_9 (cons _t_10 _t_11)), (cons _t_10 (insort _v_9 _t_11))))
  proceed with (part 1/2): ((less _v_9 _t_10)->(sorted (cons _v_9 (cons _t_10 _t_11))))
  {
      proven trivially (with Z3)
  }
  adding ((less _v_9 _t_10)->(sorted (cons _v_9 (cons _t_10 _t_11)))) to assumptions
  proceed with (part 2/2): ((!(less _v_9 _t_10))->(sorted (cons _t_10 (insort _v_9 _t_11))))
  {
    {
      ====================
      | Assumptions [0]: (sorted nil)
      | Assumptions [1]: ((sort nil)=nil)
      | Assumptions [2]: (forall (INT INT) (((_qv_2>=0)&&(_qv_3>=0))->((less 1+_qv_2 1+_qv_3)=(less _qv_2 _qv_3))))
      | Assumptions [3]: (forall (INT INT) (((_qv_4>=0)&&(_qv_5>=0))->((less _qv_4 _qv_5)=(_qv_4<_qv_5))))
      | Assumptions [4]: (forall (INT) ((insort _qv_6 nil)=(cons _qv_6 nil)))
      | Assumptions [5]: (forall (INT INT (Lst)) ((insort _qv_7 (cons _qv_8 _qv_9))=ite((less _qv_7 _qv_8), (cons _qv_7 (cons _qv_8 _qv_9)), (cons _qv_8 (insort _qv_7 _qv_9)))))
      | Assumptions [6]: (forall (INT INT (Lst)) ((sorted (cons _qv_11 (cons _qv_12 _qv_13)))=((sorted (cons _qv_12 _qv_13))&&((_qv_11=_qv_12)||(less _qv_11 _qv_12)))))
      | Assumptions [7]: (forall (INT (Lst)) ((sort (cons _qv_14 _qv_15))=(insort _qv_14 (sort _qv_15))))
      | Assumptions [8]: (forall (INT) ((sorted _t_11)->(sorted (insort y _t_11))))
      | Assumptions [9]: (sorted (cons _t_10 _t_11))
      | Assumptions [10]: (!(less 0 0))
      | Assumptions [11]: (forall (INT) ((_qv_1>=0)->(less 0 1+_qv_1)))
      | Assumptions [12]: (forall (INT) (sorted (cons _qv_10 nil)))
      | Assumptions [13]: (sorted (cons _t_10 nil))
      | Assumptions [14]: ((sorted (cons _qv_11 (cons _t_10 _t_11)))=((sorted (cons _t_10 _t_11))&&((less _qv_11 _t_10)||((_qv_11+(-_t_10))=0))))
      | Assumptions [15]: ((less _v_9 _t_10)->(sorted (cons _v_9 (cons _t_10 _t_11))))
      | Assumptions [16]: (!(less _v_9 _t_10))
      | Assumptions [17]: ((less _v_9 _t_10)->((sorted (cons _t_10 _t_11))&&((less _v_9 _t_10)||((_v_9+(-_t_10))=0))))
      ====================
    }
    current subgoal: (sorted (cons _t_10 (insort _v_9 _t_11)))
  }
  will try subgoals again
  proceed with (part 1/1): ((!(less _v_9 _t_10))->(sorted (cons _t_10 (insort _v_9 _t_11))))
  {
    {
      ====================
      | Assumptions [0]: (sorted nil)
      | Assumptions [1]: ((sort nil)=nil)
      | Assumptions [2]: (forall (INT INT) (((_qv_2>=0)&&(_qv_3>=0))->((less 1+_qv_2 1+_qv_3)=(less _qv_2 _qv_3))))
      | Assumptions [3]: (forall (INT INT) (((_qv_4>=0)&&(_qv_5>=0))->((less _qv_4 _qv_5)=(_qv_4<_qv_5))))
      | Assumptions [4]: (forall (INT) ((insort _qv_6 nil)=(cons _qv_6 nil)))
      | Assumptions [5]: (forall (INT INT (Lst)) ((insort _qv_7 (cons _qv_8 _qv_9))=ite((less _qv_7 _qv_8), (cons _qv_7 (cons _qv_8 _qv_9)), (cons _qv_8 (insort _qv_7 _qv_9)))))
      | Assumptions [6]: (forall (INT INT (Lst)) ((sorted (cons _qv_11 (cons _qv_12 _qv_13)))=((sorted (cons _qv_12 _qv_13))&&((_qv_11=_qv_12)||(less _qv_11 _qv_12)))))
      | Assumptions [7]: (forall (INT (Lst)) ((sort (cons _qv_14 _qv_15))=(insort _qv_14 (sort _qv_15))))
      | Assumptions [8]: (forall (INT) ((sorted _t_11)->(sorted (insort y _t_11))))
      | Assumptions [9]: (sorted (cons _t_10 _t_11))
      | Assumptions [10]: (!(less 0 0))
      | Assumptions [11]: (forall (INT) ((_qv_1>=0)->(less 0 1+_qv_1)))
      | Assumptions [12]: (forall (INT) (sorted (cons _qv_10 nil)))
      | Assumptions [13]: (sorted (cons _t_10 nil))
      | Assumptions [14]: ((sorted (cons _qv_11 (cons _t_10 _t_11)))=((sorted (cons _t_10 _t_11))&&((less _qv_11 _t_10)||((_qv_11+(-_t_10))=0))))
      | Assumptions [15]: ((less _v_9 _t_10)->(sorted (cons _v_9 (cons _t_10 _t_11))))
      | Assumptions [16]: (!(less _v_9 _t_10))
      | Assumptions [17]: ((less _v_9 _t_10)->((sorted (cons _t_10 _t_11))&&((less _v_9 _t_10)||((_v_9+(-_t_10))=0))))
      ====================
    }
    current subgoal: (sorted (cons _t_10 (insort _v_9 _t_11)))
  }
  cannot prove 1 of the subgoals
CURRENT SUBGOAL (sorted (insort _v_9 (cons _t_10 _t_11)))
NOW TESTING (forall (INT INT) ((less _qv_0 _qv_1)=(less _qv_1 _qv_0)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (sorted (insort _v_9 (cons _t_10 _t_11)))
NOW TESTING (forall ((Lst)) ((sort (sort _qv_2))=_qv_2))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (sorted (insort _v_9 (cons _t_10 _t_11)))
NOW TESTING (forall (INT (Lst) (Lst)) ((insort _qv_3 (cons _qv_4 _qv_5))=(cons (insort _qv_3 _qv_4) (insort _qv_3 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (sorted (insort _v_9 (cons _t_10 _t_11)))
NOW TESTING (forall (INT (Lst) (Lst)) ((cons _qv_6 (insort _qv_7 _qv_8))=(insort (cons _qv_6 _qv_7) (cons _qv_6 _qv_8))))
USE ASSUMPTION FAILED

  backtrack to: (sorted (insort _v_9 (cons _t_10 _t_11)))
  rewritten [5]: (sorted ite((less _v_9 _t_10), (cons _v_9 (cons _t_10 _t_11)), (cons _t_10 (insort _v_9 _t_11))))
  proceed with (part 1/2): ((less _v_9 _t_10)->(sorted (cons _v_9 (cons _t_10 _t_11))))
  {
      proven trivially (with Z3)
  }
  adding ((less _v_9 _t_10)->(sorted (cons _v_9 (cons _t_10 _t_11)))) to assumptions
  proceed with (part 2/2): ((!(less _v_9 _t_10))->(sorted (cons _t_10 (insort _v_9 _t_11))))
  {
    {
      ====================
      | Assumptions [0]: (sorted nil)
      | Assumptions [1]: ((sort nil)=nil)
      | Assumptions [2]: (forall (INT INT) (((_qv_2>=0)&&(_qv_3>=0))->((less 1+_qv_2 1+_qv_3)=(less _qv_2 _qv_3))))
      | Assumptions [3]: (forall (INT INT) (((_qv_4>=0)&&(_qv_5>=0))->((less _qv_4 _qv_5)=(_qv_4<_qv_5))))
      | Assumptions [4]: (forall (INT) ((insort _qv_6 nil)=(cons _qv_6 nil)))
      | Assumptions [5]: (forall (INT INT (Lst)) ((insort _qv_7 (cons _qv_8 _qv_9))=ite((less _qv_7 _qv_8), (cons _qv_7 (cons _qv_8 _qv_9)), (cons _qv_8 (insort _qv_7 _qv_9)))))
      | Assumptions [6]: (forall (INT INT (Lst)) ((sorted (cons _qv_11 (cons _qv_12 _qv_13)))=((sorted (cons _qv_12 _qv_13))&&((_qv_11=_qv_12)||(less _qv_11 _qv_12)))))
      | Assumptions [7]: (forall (INT (Lst)) ((sort (cons _qv_14 _qv_15))=(insort _qv_14 (sort _qv_15))))
      | Assumptions [8]: (forall (INT) ((sorted _t_11)->(sorted (insort y _t_11))))
      | Assumptions [9]: (sorted (cons _t_10 _t_11))
      | Assumptions [10]: (!(less 0 0))
      | Assumptions [11]: (forall (INT) ((_qv_1>=0)->(less 0 1+_qv_1)))
      | Assumptions [12]: (forall (INT) (sorted (cons _qv_10 nil)))
      | Assumptions [13]: (sorted (cons _t_10 nil))
      | Assumptions [14]: ((sorted (cons _qv_11 (cons _t_10 _t_11)))=((sorted (cons _t_10 _t_11))&&((less _qv_11 _t_10)||((_qv_11+(-_t_10))=0))))
      | Assumptions [15]: ((less _v_9 _t_10)->(sorted (cons _v_9 (cons _t_10 _t_11))))
      | Assumptions [16]: (!(less _v_9 _t_10))
      | Assumptions [17]: ((less _v_9 _t_10)->((sorted (cons _t_10 _t_11))&&((less _v_9 _t_10)||((_v_9+(-_t_10))=0))))
      ====================
    }
    current subgoal: (sorted (cons _t_10 (insort _v_9 _t_11)))
  }
  will try subgoals again
  proceed with (part 1/1): ((!(less _v_9 _t_10))->(sorted (cons _t_10 (insort _v_9 _t_11))))
  {
    {
      ====================
      | Assumptions [0]: (sorted nil)
      | Assumptions [1]: ((sort nil)=nil)
      | Assumptions [2]: (forall (INT INT) (((_qv_2>=0)&&(_qv_3>=0))->((less 1+_qv_2 1+_qv_3)=(less _qv_2 _qv_3))))
      | Assumptions [3]: (forall (INT INT) (((_qv_4>=0)&&(_qv_5>=0))->((less _qv_4 _qv_5)=(_qv_4<_qv_5))))
      | Assumptions [4]: (forall (INT) ((insort _qv_6 nil)=(cons _qv_6 nil)))
      | Assumptions [5]: (forall (INT INT (Lst)) ((insort _qv_7 (cons _qv_8 _qv_9))=ite((less _qv_7 _qv_8), (cons _qv_7 (cons _qv_8 _qv_9)), (cons _qv_8 (insort _qv_7 _qv_9)))))
      | Assumptions [6]: (forall (INT INT (Lst)) ((sorted (cons _qv_11 (cons _qv_12 _qv_13)))=((sorted (cons _qv_12 _qv_13))&&((_qv_11=_qv_12)||(less _qv_11 _qv_12)))))
      | Assumptions [7]: (forall (INT (Lst)) ((sort (cons _qv_14 _qv_15))=(insort _qv_14 (sort _qv_15))))
      | Assumptions [8]: (forall (INT) ((sorted _t_11)->(sorted (insort y _t_11))))
      | Assumptions [9]: (sorted (cons _t_10 _t_11))
      | Assumptions [10]: (!(less 0 0))
      | Assumptions [11]: (forall (INT) ((_qv_1>=0)->(less 0 1+_qv_1)))
      | Assumptions [12]: (forall (INT) (sorted (cons _qv_10 nil)))
      | Assumptions [13]: (sorted (cons _t_10 nil))
      | Assumptions [14]: ((sorted (cons _qv_11 (cons _t_10 _t_11)))=((sorted (cons _t_10 _t_11))&&((less _qv_11 _t_10)||((_qv_11+(-_t_10))=0))))
      | Assumptions [15]: ((less _v_9 _t_10)->(sorted (cons _v_9 (cons _t_10 _t_11))))
      | Assumptions [16]: (!(less _v_9 _t_10))
      | Assumptions [17]: ((less _v_9 _t_10)->((sorted (cons _t_10 _t_11))&&((less _v_9 _t_10)||((_v_9+(-_t_10))=0))))
      ====================
    }
    current subgoal: (sorted (cons _t_10 (insort _v_9 _t_11)))
  }
  cannot prove 1 of the subgoals
CURRENT SUBGOAL (sorted (insort _v_9 (cons _t_10 _t_11)))
NOW TESTING (forall (INT INT) ((less _qv_0 _qv_1)=(less _qv_1 _qv_0)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (sorted (insort _v_9 (cons _t_10 _t_11)))
NOW TESTING (forall ((Lst)) ((sort (sort _qv_2))=_qv_2))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (sorted (insort _v_9 (cons _t_10 _t_11)))
NOW TESTING (forall (INT (Lst) (Lst)) ((insort _qv_3 (cons _qv_4 _qv_5))=(cons (insort _qv_3 _qv_4) (insort _qv_3 _qv_5))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (sorted (insort _v_9 (cons _t_10 _t_11)))
NOW TESTING (forall (INT (Lst) (Lst)) ((cons _qv_6 (insort _qv_7 _qv_8))=(insort (cons _qv_6 _qv_7) (cons _qv_6 _qv_8))))
USE ASSUMPTION FAILED

  backtrack to: (sorted (insort _v_9 (cons _t_10 _t_11)))
Unknown
sat
