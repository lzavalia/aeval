
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
	(forall ((Nat)) (0<=(nat-to-int _qv_1)))
	(forall ((Nat) (Nat)) ((less _qv_2 _qv_3)=(less _qv_3 _qv_2)))
	(forall ((Lst) (Lst)) ((append _qv_4 _qv_5)=(append _qv_5 _qv_4)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_6 _qv_7) _qv_8)=(append _qv_6 (append _qv_7 _qv_8))))
	(forall ((Nat)) ((nat-to-int (succ _qv_9))=(nat-to-int _qv_9)))

Simplified goal: (forall ((Nat) (Lst) (Lst)) (((count n l)=(count n (append l m)))||(less (count n l) (count n (append l m)))))


Base case:       (((count zero _v_10)=(count zero (append _v_10 _v_11)))||(less (count zero _v_10) (count zero (append _v_10 _v_11))))
{
  {
    ====================
    | Assumptions [0]: ((nat-to-int zero)=0)
    | Assumptions [1]: (forall ((Nat)) ((nat-to-int _qv_1)>=0))
    | Assumptions [2]: (forall ((Nat) (Nat)) (((nat-to-int _qv_2)=(nat-to-int _qv_3))->(_qv_2=_qv_3)))
    | Assumptions [3]: (forall ((Nat)) ((nat-to-int (succ _qv_4))=(1+(nat-to-int _qv_4))))
    | Assumptions [4]: (forall ((Nat) (Nat)) ((less (succ _qv_7) (succ _qv_8))=(less _qv_7 _qv_8)))
    | Assumptions [5]: (forall ((Nat) (Nat)) ((less _qv_9 _qv_10)=((nat-to-int _qv_9)<(nat-to-int _qv_10))))
    | Assumptions [6]: (forall ((Nat) (Nat)) (((_qv_11=_qv_12)||(less _qv_11 _qv_12))=((nat-to-int _qv_11)<=(nat-to-int _qv_12))))
    | Assumptions [7]: (forall ((Lst)) ((append nil _qv_13)=_qv_13))
    | Assumptions [8]: (forall ((Nat) (Lst) (Lst)) ((append (cons _qv_14 _qv_15) _qv_16)=(cons _qv_14 (append _qv_15 _qv_16))))
    | Assumptions [9]: (forall ((Nat)) ((count _qv_17 nil)=zero))
    | Assumptions [10]: (forall ((Nat) (Nat) (Lst)) ((count _qv_18 (cons _qv_19 _qv_20))=ite(_qv_18=_qv_19, (succ (count _qv_18 _qv_20)), (count _qv_18 _qv_20))))
    | Assumptions [11]: (forall ((Nat)) (!(less _qv_5 zero)))
    | Assumptions [12]: (forall ((Nat)) (less zero (succ _qv_6)))
    ====================
  }
  rewritten [2]: (((nat-to-int (count zero _v_10))=(nat-to-int (count zero (append _v_10 _v_11))))||(less (count zero _v_10) (count zero (append _v_10 _v_11))))
  rewritten [5]: (((nat-to-int (count zero _v_10))<(nat-to-int (count zero (append _v_10 _v_11))))||(((nat-to-int (count zero _v_10))+(-(nat-to-int (count zero (append _v_10 _v_11)))))=0))
  rewritten [0]: (((nat-to-int (count zero _v_10))+(-1*(nat-to-int (count zero (append _v_10 _v_11)))))<1)

The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_12))=_qv_12))
	(forall ((Nat)) (0<=(nat-to-int _qv_13)))
	(forall ((Nat) (Nat)) ((less _qv_14 _qv_15)=(less _qv_15 _qv_14)))
	(forall ((Lst) (Lst)) ((append _qv_16 _qv_17)=(append _qv_17 _qv_16)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_18 _qv_19) _qv_20)=(append _qv_18 (append _qv_19 _qv_20))))
	(forall ((Nat)) ((nat-to-int (succ _qv_21))=(nat-to-int _qv_21)))

  proven by induction: (((nat-to-int (count zero _v_10))+(-1*(nat-to-int (count zero (append _v_10 _v_11)))))<1)
  rewriting done
  rewriting done
}
Inductive step:  (((count (succ _t_12) _v_10)=(count (succ _t_12) (append _v_10 _v_11)))||(less (count (succ _t_12) _v_10) (count (succ _t_12) (append _v_10 _v_11))))
{
  {
    ====================
    | Assumptions [0]: ((nat-to-int zero)=0)
    | Assumptions [1]: (forall ((Nat)) ((nat-to-int _qv_1)>=0))
    | Assumptions [2]: (forall ((Nat) (Nat)) (((nat-to-int _qv_2)=(nat-to-int _qv_3))->(_qv_2=_qv_3)))
    | Assumptions [3]: (forall ((Nat)) ((nat-to-int (succ _qv_4))=(1+(nat-to-int _qv_4))))
    | Assumptions [4]: (forall ((Nat) (Nat)) ((less (succ _qv_7) (succ _qv_8))=(less _qv_7 _qv_8)))
    | Assumptions [5]: (forall ((Nat) (Nat)) ((less _qv_9 _qv_10)=((nat-to-int _qv_9)<(nat-to-int _qv_10))))
    | Assumptions [6]: (forall ((Nat) (Nat)) (((_qv_11=_qv_12)||(less _qv_11 _qv_12))=((nat-to-int _qv_11)<=(nat-to-int _qv_12))))
    | Assumptions [7]: (forall ((Lst)) ((append nil _qv_13)=_qv_13))
    | Assumptions [8]: (forall ((Nat) (Lst) (Lst)) ((append (cons _qv_14 _qv_15) _qv_16)=(cons _qv_14 (append _qv_15 _qv_16))))
    | Assumptions [9]: (forall ((Nat)) ((count _qv_17 nil)=zero))
    | Assumptions [10]: (forall ((Nat) (Nat) (Lst)) ((count _qv_18 (cons _qv_19 _qv_20))=ite(_qv_18=_qv_19, (succ (count _qv_18 _qv_20)), (count _qv_18 _qv_20))))
    | Assumptions [11]: (forall ((Lst) (Lst)) (((count _t_12 l)=(count _t_12 (append l m)))||(less (count _t_12 l) (count _t_12 (append l m)))))
    | Assumptions [12]: (forall ((Nat)) (!(less _qv_5 zero)))
    | Assumptions [13]: (forall ((Nat)) (less zero (succ _qv_6)))
    ====================
  }
  rewritten [2]: (((nat-to-int (count (succ _t_12) _v_10))=(nat-to-int (count (succ _t_12) (append _v_10 _v_11))))||(less (count (succ _t_12) _v_10) (count (succ _t_12) (append _v_10 _v_11))))
  rewritten [5]: (((nat-to-int (count (succ _t_12) _v_10))<(nat-to-int (count (succ _t_12) (append _v_10 _v_11))))||(((nat-to-int (count (succ _t_12) _v_10))+(-(nat-to-int (count (succ _t_12) (append _v_10 _v_11)))))=0))
  rewritten [0]: (((nat-to-int (count (succ _t_12) _v_10))+(-1*(nat-to-int (count (succ _t_12) (append _v_10 _v_11)))))<1)

The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_14))=_qv_14))
	(forall ((Nat)) (0<=(nat-to-int _qv_15)))
	(forall ((Nat) (Nat)) ((less _qv_16 _qv_17)=(less _qv_17 _qv_16)))
	(forall ((Lst) (Lst)) ((append _qv_18 _qv_19)=(append _qv_19 _qv_18)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_20 _qv_21) _qv_22)=(append _qv_20 (append _qv_21 _qv_22))))
	(forall ((Nat)) ((nat-to-int (succ _qv_23))=(nat-to-int _qv_23)))

CURRENT SUBGOAL (((nat-to-int (count zero _v_24))+(-1*(nat-to-int (count zero (append _v_24 _v_25)))))<1)
NOW TESTING (forall ((Nat)) ((succ (succ _qv_14))=_qv_14))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (((nat-to-int (count zero _v_24))+(-1*(nat-to-int (count zero (append _v_24 _v_25)))))<1)
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_15)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (((nat-to-int (count zero _v_24))+(-1*(nat-to-int (count zero (append _v_24 _v_25)))))<1)
NOW TESTING (forall ((Nat) (Nat)) ((less _qv_16 _qv_17)=(less _qv_17 _qv_16)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (((nat-to-int (count zero _v_24))+(-1*(nat-to-int (count zero (append _v_24 _v_25)))))<1)
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_18 _qv_19)=(append _qv_19 _qv_18)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (((nat-to-int (count zero _v_24))+(-1*(nat-to-int (count zero (append _v_24 _v_25)))))<1)
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_20 _qv_21) _qv_22)=(append _qv_20 (append _qv_21 _qv_22))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (((nat-to-int (count zero _v_24))+(-1*(nat-to-int (count zero (append _v_24 _v_25)))))<1)
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_23))=(nat-to-int _qv_23)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (((nat-to-int (count zero _v_24))+(-1*(nat-to-int (count zero (append _v_24 _v_25)))))<1)
NOW TESTING (forall ((Nat)) ((succ (succ _qv_14))=_qv_14))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (((nat-to-int (count zero _v_24))+(-1*(nat-to-int (count zero (append _v_24 _v_25)))))<1)
NOW TESTING (forall ((Nat)) (0<=(nat-to-int _qv_15)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (((nat-to-int (count zero _v_24))+(-1*(nat-to-int (count zero (append _v_24 _v_25)))))<1)
NOW TESTING (forall ((Nat) (Nat)) ((less _qv_16 _qv_17)=(less _qv_17 _qv_16)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (((nat-to-int (count zero _v_24))+(-1*(nat-to-int (count zero (append _v_24 _v_25)))))<1)
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_18 _qv_19)=(append _qv_19 _qv_18)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (((nat-to-int (count zero _v_24))+(-1*(nat-to-int (count zero (append _v_24 _v_25)))))<1)
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_20 _qv_21) _qv_22)=(append _qv_20 (append _qv_21 _qv_22))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL (((nat-to-int (count zero _v_24))+(-1*(nat-to-int (count zero (append _v_24 _v_25)))))<1)
NOW TESTING (forall ((Nat)) ((nat-to-int (succ _qv_23))=(nat-to-int _qv_23)))
USE ASSUMPTION FAILED

  proven by induction: (((nat-to-int (count _w_13 _v_10))+(-1*(nat-to-int (count _w_13 (append _v_10 _v_11)))))<1)
  rewriting done
  rewriting done
}

Proved
unsat
