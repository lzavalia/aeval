
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Lst) (Lst)) ((append _qv_0 _qv_1)=(append _qv_1 _qv_0)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_2 _qv_3) _qv_4)=(append _qv_2 (append _qv_3 _qv_4))))
	(forall ((Lst)) (0<=(len _qv_5)))
	(forall ((Lst) (Lst)) ((zip _qv_6 _qv_7)=(zip _qv_7 _qv_6)))
	(forall ((ZLst) (ZLst)) ((zappend _qv_8 _qv_9)=(zappend _qv_9 _qv_8)))
	(forall ((ZLst) (ZLst) (ZLst)) ((zappend (zappend _qv_10 _qv_11) _qv_12)=(zappend _qv_10 (zappend _qv_11 _qv_12))))
	(forall (INT (Lst) (Lst)) ((take _qv_13 (drop _qv_14 _qv_15))=(drop (take _qv_13 _qv_14) (take _qv_13 _qv_15))))
	(forall (INT (Lst) (Lst)) ((drop _qv_16 (take _qv_17 _qv_18))=(take (drop _qv_16 _qv_17) (drop _qv_16 _qv_18))))

Simplified goal: (forall ((Lst) (Lst) (Lst)) ((zip (append xs ys) zs)=(zappend (zip xs (take (len xs) zs)) (zip ys (drop (len xs) zs)))))


Base case:       ((zip (append nil _v_19) _v_20)=(zappend (zip nil (take (len nil) _v_20)) (zip _v_19 (drop (len nil) _v_20))))
{
  proven trivially
}
Inductive step:  ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
{
  {
    ====================
    | Assumptions [0]: ((len nil)=0)
    | Assumptions [1]: (forall ((Lst)) ((append nil _qv_1)=_qv_1))
    | Assumptions [2]: (forall (INT (Lst) (Lst)) ((append (cons _qv_2 _qv_3) _qv_4)=(cons _qv_2 (append _qv_3 _qv_4))))
    | Assumptions [3]: (forall (INT (Lst)) ((len (cons _qv_5 _qv_6))=(1+(len _qv_6))))
    | Assumptions [4]: (forall ((Lst)) ((len _qv_7)>=0))
    | Assumptions [5]: (forall (INT) ((drop _qv_8 nil)=nil))
    | Assumptions [6]: (forall ((Lst)) ((drop 0 _qv_9)=_qv_9))
    | Assumptions [7]: (forall (INT INT (Lst)) ((_qv_10>=0)->((drop _qv_10+1 (cons _qv_11 _qv_12))=(drop _qv_10 _qv_12))))
    | Assumptions [8]: (forall (INT) ((take _qv_13 nil)=nil))
    | Assumptions [9]: (forall ((Lst)) ((take 0 _qv_14)=nil))
    | Assumptions [10]: (forall (INT INT (Lst)) ((_qv_15>=0)->((take _qv_15+1 (cons _qv_16 _qv_17))=(cons _qv_16 (take _qv_15 _qv_17)))))
    | Assumptions [11]: (forall ((Lst)) ((zip nil _qv_18)=znil))
    | Assumptions [12]: (forall ((Lst)) ((zip _qv_19 nil)=znil))
    | Assumptions [13]: (forall (INT (Lst) INT (Lst)) ((zip (cons _qv_20 _qv_21) (cons _qv_22 _qv_23))=(zcons (mkpair _qv_20 _qv_22) (zip _qv_21 _qv_23))))
    | Assumptions [14]: (forall ((ZLst)) ((zappend znil _qv_24)=_qv_24))
    | Assumptions [15]: (forall ((Pair) (ZLst) (ZLst)) ((zappend (zcons _qv_25 _qv_26) _qv_27)=(zcons _qv_25 (zappend _qv_26 _qv_27))))
    | Assumptions [16]: (forall ((Lst) (Lst)) ((zip (append _t_22 ys) zs)=(zappend (zip _t_22 (take (len _t_22) zs)) (zip ys (drop (len _t_22) zs)))))
    | Assumptions [17]: (forall ((Lst) (Lst)) ((zappend (zip _t_22 (take (len _t_22) zs)) (zip ys (drop (len _t_22) zs)))=(zip (append _t_22 ys) zs)))
    ====================
  }
  rewritten [2]: ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
  rewritten [3]: ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take 1+(len _t_22) _v_20)) (zip _v_19 (drop 1+(len _t_22) _v_20))))
CURRENT SUBGOAL ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_0 _qv_1)=(append _qv_1 _qv_0)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_2 _qv_3) _qv_4)=(append _qv_2 (append _qv_3 _qv_4))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((Lst)) (0<=(len _qv_5)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((Lst) (Lst)) ((zip _qv_6 _qv_7)=(zip _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((ZLst) (ZLst)) ((zappend _qv_8 _qv_9)=(zappend _qv_9 _qv_8)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((ZLst) (ZLst) (ZLst)) ((zappend (zappend _qv_10 _qv_11) _qv_12)=(zappend _qv_10 (zappend _qv_11 _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall (INT (Lst) (Lst)) ((take _qv_13 (drop _qv_14 _qv_15))=(drop (take _qv_13 _qv_14) (take _qv_13 _qv_15))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall (INT (Lst) (Lst)) ((drop _qv_16 (take _qv_17 _qv_18))=(take (drop _qv_16 _qv_17) (drop _qv_16 _qv_18))))
USE ASSUMPTION FAILED

  backtrack to: ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
  rewritten [3]: ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take 1+(len _t_22) _v_20)) (zip _v_19 (drop 1+(len _t_22) _v_20))))
CURRENT SUBGOAL ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_0 _qv_1)=(append _qv_1 _qv_0)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_2 _qv_3) _qv_4)=(append _qv_2 (append _qv_3 _qv_4))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((Lst)) (0<=(len _qv_5)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((Lst) (Lst)) ((zip _qv_6 _qv_7)=(zip _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((ZLst) (ZLst)) ((zappend _qv_8 _qv_9)=(zappend _qv_9 _qv_8)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((ZLst) (ZLst) (ZLst)) ((zappend (zappend _qv_10 _qv_11) _qv_12)=(zappend _qv_10 (zappend _qv_11 _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall (INT (Lst) (Lst)) ((take _qv_13 (drop _qv_14 _qv_15))=(drop (take _qv_13 _qv_14) (take _qv_13 _qv_15))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall (INT (Lst) (Lst)) ((drop _qv_16 (take _qv_17 _qv_18))=(take (drop _qv_16 _qv_17) (drop _qv_16 _qv_18))))
USE ASSUMPTION FAILED

  backtrack to: ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_0 _qv_1)=(append _qv_1 _qv_0)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_2 _qv_3) _qv_4)=(append _qv_2 (append _qv_3 _qv_4))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((Lst)) (0<=(len _qv_5)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((Lst) (Lst)) ((zip _qv_6 _qv_7)=(zip _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((ZLst) (ZLst)) ((zappend _qv_8 _qv_9)=(zappend _qv_9 _qv_8)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((ZLst) (ZLst) (ZLst)) ((zappend (zappend _qv_10 _qv_11) _qv_12)=(zappend _qv_10 (zappend _qv_11 _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall (INT (Lst) (Lst)) ((take _qv_13 (drop _qv_14 _qv_15))=(drop (take _qv_13 _qv_14) (take _qv_13 _qv_15))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall (INT (Lst) (Lst)) ((drop _qv_16 (take _qv_17 _qv_18))=(take (drop _qv_16 _qv_17) (drop _qv_16 _qv_18))))
USE ASSUMPTION FAILED

  backtrack to: ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
  rewritten [3]: ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take 1+(len _t_22) _v_20)) (zip _v_19 (drop 1+(len _t_22) _v_20))))
  rewritten [2]: ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_0 _qv_1)=(append _qv_1 _qv_0)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_2 _qv_3) _qv_4)=(append _qv_2 (append _qv_3 _qv_4))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
NOW TESTING (forall ((Lst)) (0<=(len _qv_5)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
NOW TESTING (forall ((Lst) (Lst)) ((zip _qv_6 _qv_7)=(zip _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
NOW TESTING (forall ((ZLst) (ZLst)) ((zappend _qv_8 _qv_9)=(zappend _qv_9 _qv_8)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
NOW TESTING (forall ((ZLst) (ZLst) (ZLst)) ((zappend (zappend _qv_10 _qv_11) _qv_12)=(zappend _qv_10 (zappend _qv_11 _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
NOW TESTING (forall (INT (Lst) (Lst)) ((take _qv_13 (drop _qv_14 _qv_15))=(drop (take _qv_13 _qv_14) (take _qv_13 _qv_15))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
NOW TESTING (forall (INT (Lst) (Lst)) ((drop _qv_16 (take _qv_17 _qv_18))=(take (drop _qv_16 _qv_17) (drop _qv_16 _qv_18))))
USE ASSUMPTION FAILED

  backtrack to: ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
  rewritten [2]: ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_0 _qv_1)=(append _qv_1 _qv_0)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_2 _qv_3) _qv_4)=(append _qv_2 (append _qv_3 _qv_4))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
NOW TESTING (forall ((Lst)) (0<=(len _qv_5)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
NOW TESTING (forall ((Lst) (Lst)) ((zip _qv_6 _qv_7)=(zip _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
NOW TESTING (forall ((ZLst) (ZLst)) ((zappend _qv_8 _qv_9)=(zappend _qv_9 _qv_8)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
NOW TESTING (forall ((ZLst) (ZLst) (ZLst)) ((zappend (zappend _qv_10 _qv_11) _qv_12)=(zappend _qv_10 (zappend _qv_11 _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
NOW TESTING (forall (INT (Lst) (Lst)) ((take _qv_13 (drop _qv_14 _qv_15))=(drop (take _qv_13 _qv_14) (take _qv_13 _qv_15))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
NOW TESTING (forall (INT (Lst) (Lst)) ((drop _qv_16 (take _qv_17 _qv_18))=(take (drop _qv_16 _qv_17) (drop _qv_16 _qv_18))))
USE ASSUMPTION FAILED

  backtrack to: ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_0 _qv_1)=(append _qv_1 _qv_0)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_2 _qv_3) _qv_4)=(append _qv_2 (append _qv_3 _qv_4))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((Lst)) (0<=(len _qv_5)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((Lst) (Lst)) ((zip _qv_6 _qv_7)=(zip _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((ZLst) (ZLst)) ((zappend _qv_8 _qv_9)=(zappend _qv_9 _qv_8)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((ZLst) (ZLst) (ZLst)) ((zappend (zappend _qv_10 _qv_11) _qv_12)=(zappend _qv_10 (zappend _qv_11 _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall (INT (Lst) (Lst)) ((take _qv_13 (drop _qv_14 _qv_15))=(drop (take _qv_13 _qv_14) (take _qv_13 _qv_15))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall (INT (Lst) (Lst)) ((drop _qv_16 (take _qv_17 _qv_18))=(take (drop _qv_16 _qv_17) (drop _qv_16 _qv_18))))
USE ASSUMPTION FAILED

  backtrack to: ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
  rewritten [2]: ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
  rewritten [3]: ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take 1+(len _t_22) _v_20)) (zip _v_19 (drop 1+(len _t_22) _v_20))))
CURRENT SUBGOAL ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_0 _qv_1)=(append _qv_1 _qv_0)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_2 _qv_3) _qv_4)=(append _qv_2 (append _qv_3 _qv_4))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((Lst)) (0<=(len _qv_5)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((Lst) (Lst)) ((zip _qv_6 _qv_7)=(zip _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((ZLst) (ZLst)) ((zappend _qv_8 _qv_9)=(zappend _qv_9 _qv_8)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((ZLst) (ZLst) (ZLst)) ((zappend (zappend _qv_10 _qv_11) _qv_12)=(zappend _qv_10 (zappend _qv_11 _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall (INT (Lst) (Lst)) ((take _qv_13 (drop _qv_14 _qv_15))=(drop (take _qv_13 _qv_14) (take _qv_13 _qv_15))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall (INT (Lst) (Lst)) ((drop _qv_16 (take _qv_17 _qv_18))=(take (drop _qv_16 _qv_17) (drop _qv_16 _qv_18))))
USE ASSUMPTION FAILED

  backtrack to: ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
  rewritten [3]: ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take 1+(len _t_22) _v_20)) (zip _v_19 (drop 1+(len _t_22) _v_20))))
CURRENT SUBGOAL ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_0 _qv_1)=(append _qv_1 _qv_0)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_2 _qv_3) _qv_4)=(append _qv_2 (append _qv_3 _qv_4))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((Lst)) (0<=(len _qv_5)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((Lst) (Lst)) ((zip _qv_6 _qv_7)=(zip _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((ZLst) (ZLst)) ((zappend _qv_8 _qv_9)=(zappend _qv_9 _qv_8)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((ZLst) (ZLst) (ZLst)) ((zappend (zappend _qv_10 _qv_11) _qv_12)=(zappend _qv_10 (zappend _qv_11 _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall (INT (Lst) (Lst)) ((take _qv_13 (drop _qv_14 _qv_15))=(drop (take _qv_13 _qv_14) (take _qv_13 _qv_15))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall (INT (Lst) (Lst)) ((drop _qv_16 (take _qv_17 _qv_18))=(take (drop _qv_16 _qv_17) (drop _qv_16 _qv_18))))
USE ASSUMPTION FAILED

  backtrack to: ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_0 _qv_1)=(append _qv_1 _qv_0)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_2 _qv_3) _qv_4)=(append _qv_2 (append _qv_3 _qv_4))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((Lst)) (0<=(len _qv_5)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((Lst) (Lst)) ((zip _qv_6 _qv_7)=(zip _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((ZLst) (ZLst)) ((zappend _qv_8 _qv_9)=(zappend _qv_9 _qv_8)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((ZLst) (ZLst) (ZLst)) ((zappend (zappend _qv_10 _qv_11) _qv_12)=(zappend _qv_10 (zappend _qv_11 _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall (INT (Lst) (Lst)) ((take _qv_13 (drop _qv_14 _qv_15))=(drop (take _qv_13 _qv_14) (take _qv_13 _qv_15))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall (INT (Lst) (Lst)) ((drop _qv_16 (take _qv_17 _qv_18))=(take (drop _qv_16 _qv_17) (drop _qv_16 _qv_18))))
USE ASSUMPTION FAILED

  backtrack to: ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
  rewritten [3]: ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take 1+(len _t_22) _v_20)) (zip _v_19 (drop 1+(len _t_22) _v_20))))
  rewritten [2]: ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_0 _qv_1)=(append _qv_1 _qv_0)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_2 _qv_3) _qv_4)=(append _qv_2 (append _qv_3 _qv_4))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
NOW TESTING (forall ((Lst)) (0<=(len _qv_5)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
NOW TESTING (forall ((Lst) (Lst)) ((zip _qv_6 _qv_7)=(zip _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
NOW TESTING (forall ((ZLst) (ZLst)) ((zappend _qv_8 _qv_9)=(zappend _qv_9 _qv_8)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
NOW TESTING (forall ((ZLst) (ZLst) (ZLst)) ((zappend (zappend _qv_10 _qv_11) _qv_12)=(zappend _qv_10 (zappend _qv_11 _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
NOW TESTING (forall (INT (Lst) (Lst)) ((take _qv_13 (drop _qv_14 _qv_15))=(drop (take _qv_13 _qv_14) (take _qv_13 _qv_15))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
NOW TESTING (forall (INT (Lst) (Lst)) ((drop _qv_16 (take _qv_17 _qv_18))=(take (drop _qv_16 _qv_17) (drop _qv_16 _qv_18))))
USE ASSUMPTION FAILED

  backtrack to: ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
  rewritten [2]: ((zip (cons _t_21 (append _t_22 _v_19)) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_0 _qv_1)=(append _qv_1 _qv_0)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_2 _qv_3) _qv_4)=(append _qv_2 (append _qv_3 _qv_4))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
NOW TESTING (forall ((Lst)) (0<=(len _qv_5)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
NOW TESTING (forall ((Lst) (Lst)) ((zip _qv_6 _qv_7)=(zip _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
NOW TESTING (forall ((ZLst) (ZLst)) ((zappend _qv_8 _qv_9)=(zappend _qv_9 _qv_8)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
NOW TESTING (forall ((ZLst) (ZLst) (ZLst)) ((zappend (zappend _qv_10 _qv_11) _qv_12)=(zappend _qv_10 (zappend _qv_11 _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
NOW TESTING (forall (INT (Lst) (Lst)) ((take _qv_13 (drop _qv_14 _qv_15))=(drop (take _qv_13 _qv_14) (take _qv_13 _qv_15))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
NOW TESTING (forall (INT (Lst) (Lst)) ((drop _qv_16 (take _qv_17 _qv_18))=(take (drop _qv_16 _qv_17) (drop _qv_16 _qv_18))))
USE ASSUMPTION FAILED

  backtrack to: ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len _t_22)+1 _v_20)) (zip _v_19 (drop (len _t_22)+1 _v_20))))
CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_0 _qv_1)=(append _qv_1 _qv_0)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_2 _qv_3) _qv_4)=(append _qv_2 (append _qv_3 _qv_4))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((Lst)) (0<=(len _qv_5)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((Lst) (Lst)) ((zip _qv_6 _qv_7)=(zip _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((ZLst) (ZLst)) ((zappend _qv_8 _qv_9)=(zappend _qv_9 _qv_8)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall ((ZLst) (ZLst) (ZLst)) ((zappend (zappend _qv_10 _qv_11) _qv_12)=(zappend _qv_10 (zappend _qv_11 _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall (INT (Lst) (Lst)) ((take _qv_13 (drop _qv_14 _qv_15))=(drop (take _qv_13 _qv_14) (take _qv_13 _qv_15))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))
NOW TESTING (forall (INT (Lst) (Lst)) ((drop _qv_16 (take _qv_17 _qv_18))=(take (drop _qv_16 _qv_17) (drop _qv_16 _qv_18))))
USE ASSUMPTION FAILED

  backtrack to: ((zip (append (cons _t_21 _t_22) _v_19) _v_20)=(zappend (zip (cons _t_21 _t_22) (take (len (cons _t_21 _t_22)) _v_20)) (zip _v_19 (drop (len (cons _t_21 _t_22)) _v_20))))

Base case:       ((zip (append _v_49 nil) _v_50)=(zappend (zip _v_49 (take (len _v_49) _v_50)) (zip nil (drop (len _v_49) _v_50))))
{
  {
    ====================
    | Assumptions [0]: ((len nil)=0)
    | Assumptions [1]: (forall ((Lst)) ((append nil _qv_1)=_qv_1))
    | Assumptions [2]: (forall (INT (Lst) (Lst)) ((append (cons _qv_2 _qv_3) _qv_4)=(cons _qv_2 (append _qv_3 _qv_4))))
    | Assumptions [3]: (forall (INT (Lst)) ((len (cons _qv_5 _qv_6))=(1+(len _qv_6))))
    | Assumptions [4]: (forall ((Lst)) ((len _qv_7)>=0))
    | Assumptions [5]: (forall (INT) ((drop _qv_8 nil)=nil))
    | Assumptions [6]: (forall ((Lst)) ((drop 0 _qv_9)=_qv_9))
    | Assumptions [7]: (forall (INT INT (Lst)) ((_qv_10>=0)->((drop _qv_10+1 (cons _qv_11 _qv_12))=(drop _qv_10 _qv_12))))
    | Assumptions [8]: (forall (INT) ((take _qv_13 nil)=nil))
    | Assumptions [9]: (forall ((Lst)) ((take 0 _qv_14)=nil))
    | Assumptions [10]: (forall (INT INT (Lst)) ((_qv_15>=0)->((take _qv_15+1 (cons _qv_16 _qv_17))=(cons _qv_16 (take _qv_15 _qv_17)))))
    | Assumptions [11]: (forall ((Lst)) ((zip nil _qv_18)=znil))
    | Assumptions [12]: (forall ((Lst)) ((zip _qv_19 nil)=znil))
    | Assumptions [13]: (forall (INT (Lst) INT (Lst)) ((zip (cons _qv_20 _qv_21) (cons _qv_22 _qv_23))=(zcons (mkpair _qv_20 _qv_22) (zip _qv_21 _qv_23))))
    | Assumptions [14]: (forall ((ZLst)) ((zappend znil _qv_24)=_qv_24))
    | Assumptions [15]: (forall ((Pair) (ZLst) (ZLst)) ((zappend (zcons _qv_25 _qv_26) _qv_27)=(zcons _qv_25 (zappend _qv_26 _qv_27))))
    | Assumptions [16]: (forall ((Lst) (Lst)) ((zip (append _t_22 ys) zs)=(zappend (zip _t_22 (take (len _t_22) zs)) (zip ys (drop (len _t_22) zs)))))
    | Assumptions [17]: (forall ((Lst) (Lst)) ((zappend (zip _t_22 (take (len _t_22) zs)) (zip ys (drop (len _t_22) zs)))=(zip (append _t_22 ys) zs)))
    ====================
  }
  rewritten [11]: ((zip (append _v_49 nil) _v_50)=(zappend (zip _v_49 (take (len _v_49) _v_50)) znil))
CURRENT SUBGOAL ((zip (append _v_49 nil) _v_50)=(zappend (zip _v_49 (take (len _v_49) _v_50)) (zip nil (drop (len _v_49) _v_50))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_0 _qv_1)=(append _qv_1 _qv_0)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append _v_49 nil) _v_50)=(zappend (zip _v_49 (take (len _v_49) _v_50)) (zip nil (drop (len _v_49) _v_50))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_2 _qv_3) _qv_4)=(append _qv_2 (append _qv_3 _qv_4))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append _v_49 nil) _v_50)=(zappend (zip _v_49 (take (len _v_49) _v_50)) (zip nil (drop (len _v_49) _v_50))))
NOW TESTING (forall ((Lst)) (0<=(len _qv_5)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append _v_49 nil) _v_50)=(zappend (zip _v_49 (take (len _v_49) _v_50)) (zip nil (drop (len _v_49) _v_50))))
NOW TESTING (forall ((Lst) (Lst)) ((zip _qv_6 _qv_7)=(zip _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append _v_49 nil) _v_50)=(zappend (zip _v_49 (take (len _v_49) _v_50)) (zip nil (drop (len _v_49) _v_50))))
NOW TESTING (forall ((ZLst) (ZLst)) ((zappend _qv_8 _qv_9)=(zappend _qv_9 _qv_8)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append _v_49 nil) _v_50)=(zappend (zip _v_49 (take (len _v_49) _v_50)) (zip nil (drop (len _v_49) _v_50))))
NOW TESTING (forall ((ZLst) (ZLst) (ZLst)) ((zappend (zappend _qv_10 _qv_11) _qv_12)=(zappend _qv_10 (zappend _qv_11 _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append _v_49 nil) _v_50)=(zappend (zip _v_49 (take (len _v_49) _v_50)) (zip nil (drop (len _v_49) _v_50))))
NOW TESTING (forall (INT (Lst) (Lst)) ((take _qv_13 (drop _qv_14 _qv_15))=(drop (take _qv_13 _qv_14) (take _qv_13 _qv_15))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append _v_49 nil) _v_50)=(zappend (zip _v_49 (take (len _v_49) _v_50)) (zip nil (drop (len _v_49) _v_50))))
NOW TESTING (forall (INT (Lst) (Lst)) ((drop _qv_16 (take _qv_17 _qv_18))=(take (drop _qv_16 _qv_17) (drop _qv_16 _qv_18))))
USE ASSUMPTION FAILED

  backtrack to: ((zip (append _v_49 nil) _v_50)=(zappend (zip _v_49 (take (len _v_49) _v_50)) (zip nil (drop (len _v_49) _v_50))))
  rewritten [11]: ((zip (append _v_49 nil) _v_50)=(zappend (zip _v_49 (take (len _v_49) _v_50)) znil))
CURRENT SUBGOAL ((zip (append _v_49 nil) _v_50)=(zappend (zip _v_49 (take (len _v_49) _v_50)) (zip nil (drop (len _v_49) _v_50))))
NOW TESTING (forall ((Lst) (Lst)) ((append _qv_0 _qv_1)=(append _qv_1 _qv_0)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append _v_49 nil) _v_50)=(zappend (zip _v_49 (take (len _v_49) _v_50)) (zip nil (drop (len _v_49) _v_50))))
NOW TESTING (forall ((Lst) (Lst) (Lst)) ((append (append _qv_2 _qv_3) _qv_4)=(append _qv_2 (append _qv_3 _qv_4))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append _v_49 nil) _v_50)=(zappend (zip _v_49 (take (len _v_49) _v_50)) (zip nil (drop (len _v_49) _v_50))))
NOW TESTING (forall ((Lst)) (0<=(len _qv_5)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append _v_49 nil) _v_50)=(zappend (zip _v_49 (take (len _v_49) _v_50)) (zip nil (drop (len _v_49) _v_50))))
NOW TESTING (forall ((Lst) (Lst)) ((zip _qv_6 _qv_7)=(zip _qv_7 _qv_6)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append _v_49 nil) _v_50)=(zappend (zip _v_49 (take (len _v_49) _v_50)) (zip nil (drop (len _v_49) _v_50))))
NOW TESTING (forall ((ZLst) (ZLst)) ((zappend _qv_8 _qv_9)=(zappend _qv_9 _qv_8)))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append _v_49 nil) _v_50)=(zappend (zip _v_49 (take (len _v_49) _v_50)) (zip nil (drop (len _v_49) _v_50))))
NOW TESTING (forall ((ZLst) (ZLst) (ZLst)) ((zappend (zappend _qv_10 _qv_11) _qv_12)=(zappend _qv_10 (zappend _qv_11 _qv_12))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append _v_49 nil) _v_50)=(zappend (zip _v_49 (take (len _v_49) _v_50)) (zip nil (drop (len _v_49) _v_50))))
NOW TESTING (forall (INT (Lst) (Lst)) ((take _qv_13 (drop _qv_14 _qv_15))=(drop (take _qv_13 _qv_14) (take _qv_13 _qv_15))))
USE ASSUMPTION FAILED

CURRENT SUBGOAL ((zip (append _v_49 nil) _v_50)=(zappend (zip _v_49 (take (len _v_49) _v_50)) (zip nil (drop (len _v_49) _v_50))))
NOW TESTING (forall (INT (Lst) (Lst)) ((drop _qv_16 (take _qv_17 _qv_18))=(take (drop _qv_16 _qv_17) (drop _qv_16 _qv_18))))
USE ASSUMPTION FAILED

  backtrack to: ((zip (append _v_49 nil) _v_50)=(zappend (zip _v_49 (take (len _v_49) _v_50)) (zip nil (drop (len _v_49) _v_50))))
}

Base case:       ((zip (append _v_51 _v_52) nil)=(zappend (zip _v_51 (take (len _v_51) nil)) (zip _v_52 (drop (len _v_51) nil))))
{
  proven trivially
}
Inductive step:  ((zip (append _v_51 _v_52) (cons _t_53 _t_54))=(zappend (zip _v_51 (take (len _v_51) (cons _t_53 _t_54))) (zip _v_52 (drop (len _v_51) (cons _t_53 _t_54)))))
{
  {
    ====================
    | Assumptions [0]: ((len nil)=0)
    | Assumptions [1]: (forall ((Lst)) ((append nil _qv_1)=_qv_1))
    | Assumptions [2]: (forall (INT (Lst) (Lst)) ((append (cons _qv_2 _qv_3) _qv_4)=(cons _qv_2 (append _qv_3 _qv_4))))
    | Assumptions [3]: (forall (INT (Lst)) ((len (cons _qv_5 _qv_6))=(1+(len _qv_6))))
    | Assumptions [4]: (forall ((Lst)) ((len _qv_7)>=0))
    | Assumptions [5]: (forall (INT) ((drop _qv_8 nil)=nil))
    | Assumptions [6]: (forall ((Lst)) ((drop 0 _qv_9)=_qv_9))
    | Assumptions [7]: (forall (INT INT (Lst)) ((_qv_10>=0)->((drop _qv_10+1 (cons _qv_11 _qv_12))=(drop _qv_10 _qv_12))))
    | Assumptions [8]: (forall (INT) ((take _qv_13 nil)=nil))
    | Assumptions [9]: (forall ((Lst)) ((take 0 _qv_14)=nil))
    | Assumptions [10]: (forall (INT INT (Lst)) ((_qv_15>=0)->((take _qv_15+1 (cons _qv_16 _qv_17))=(cons _qv_16 (take _qv_15 _qv_17)))))
    | Assumptions [11]: (forall ((Lst)) ((zip nil _qv_18)=znil))
    | Assumptions [12]: (forall ((Lst)) ((zip _qv_19 nil)=znil))
    | Assumptions [13]: (forall (INT (Lst) INT (Lst)) ((zip (cons _qv_20 _qv_21) (cons _qv_22 _qv_23))=(zcons (mkpair _qv_20 _qv_22) (zip _qv_21 _qv_23))))
    | Assumptions [14]: (forall ((ZLst)) ((zappend znil _qv_24)=_qv_24))
    | Assumptions [15]: (forall ((Pair) (ZLst) (ZLst)) ((zappend (zcons _qv_25 _qv_26) _qv_27)=(zcons _qv_25 (zappend _qv_26 _qv_27))))
    | Assumptions [16]: (forall ((Lst) (Lst)) ((zip (append _t_22 ys) zs)=(zappend (zip _t_22 (take (len _t_22) zs)) (zip ys (drop (len _t_22) zs)))))
    | Assumptions [17]: (forall ((Lst) (Lst)) ((zappend (zip _t_22 (take (len _t_22) zs)) (zip ys (drop (len _t_22) zs)))=(zip (append _t_22 ys) zs)))
    | Assumptions [18]: (forall ((Lst) (Lst)) ((zip (append xs ys) _t_54)=(zappend (zip xs (take (len xs) _t_54)) (zip ys (drop (len xs) _t_54)))))
    | Assumptions [19]: (forall ((Lst) (Lst)) ((zappend (zip xs (take (len xs) _t_54)) (zip ys (drop (len xs) _t_54)))=(zip (append xs ys) _t_54)))
    ====================
  }
Unknown
sat
