
The Knowledge Scheme currently contains the following lemmas:
	(forall ((Nat)) ((succ (succ _qv_0))=_qv_0))
	(forall ((Lst) (Lst)) ((append _qv_1 _qv_2)=(append _qv_2 _qv_1)))
	(forall ((Lst) (Lst) (Lst)) ((append (append _qv_3 _qv_4) _qv_5)=(append _qv_3 (append _qv_4 _qv_5))))
	(forall ((Nat) (Nat)) ((plus _qv_6 _qv_7)=(plus _qv_7 _qv_6)))
	(forall ((Nat) (Nat) (Nat)) ((plus (plus _qv_8 _qv_9) _qv_10)=(plus _qv_8 (plus _qv_9 _qv_10))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_11) (succ _qv_12))))
	(forall ((Nat) (Nat)) ((succ (plus _qv_11 _qv_12))=(plus (succ _qv_12) (succ _qv_11))))

Simplified goal: (forall ((Nat) (Nat) (Lst)) ((rotate n (rotate m x))=(rotate m (rotate n x))))


Base case:       ((rotate zero (rotate _v_13 _v_14))=(rotate _v_13 (rotate zero _v_14)))
{
  proven trivially
}
Inductive step:  ((rotate (succ _t_15) (rotate _v_13 _v_14))=(rotate _v_13 (rotate (succ _t_15) _v_14)))
{
  {
    ====================
    | Assumptions [0]: (forall ((Nat) (Lst)) ((len (cons _qv_1 _qv_2))=(succ (len _qv_2))))
    | Assumptions [1]: (forall ((Lst)) ((append nil _qv_3)=_qv_3))
    | Assumptions [2]: (forall ((Nat) (Lst) (Lst)) ((append (cons _qv_4 _qv_5) _qv_6)=(cons _qv_4 (append _qv_5 _qv_6))))
    | Assumptions [3]: (forall ((Nat)) ((rotate (succ _qv_8) nil)=nil))
    | Assumptions [4]: (forall ((Nat) (Nat) (Lst)) ((rotate (succ _qv_9) (cons _qv_10 _qv_11))=(rotate _qv_9 (append _qv_11 (cons _qv_10 nil)))))
    | Assumptions [5]: (forall ((Nat) (Nat)) ((plus (succ _qv_13) _qv_14)=(succ (plus _qv_13 _qv_14))))
    | Assumptions [6]: (forall ((Nat) (Lst)) ((rotate _t_15 (rotate m x))=(rotate m (rotate _t_15 x))))
    | Assumptions [7]: (forall ((Nat) (Lst)) ((rotate m (rotate _t_15 x))=(rotate _t_15 (rotate m x))))
    | Assumptions [8]: (forall ((Lst)) ((rotate (len nil) _qv_7)=_qv_7))
    | Assumptions [9]: (forall ((Nat)) ((plus (len nil) _qv_12)=_qv_12))
    ====================
  }

Base case:       ((rotate _v_16 (rotate zero _v_17))=(rotate zero (rotate _v_16 _v_17)))
{
  {
    ====================
    | Assumptions [0]: (forall ((Nat) (Lst)) ((len (cons _qv_1 _qv_2))=(succ (len _qv_2))))
    | Assumptions [1]: (forall ((Lst)) ((append nil _qv_3)=_qv_3))
    | Assumptions [2]: (forall ((Nat) (Lst) (Lst)) ((append (cons _qv_4 _qv_5) _qv_6)=(cons _qv_4 (append _qv_5 _qv_6))))
    | Assumptions [3]: (forall ((Nat)) ((rotate (succ _qv_8) nil)=nil))
    | Assumptions [4]: (forall ((Nat) (Nat) (Lst)) ((rotate (succ _qv_9) (cons _qv_10 _qv_11))=(rotate _qv_9 (append _qv_11 (cons _qv_10 nil)))))
    | Assumptions [5]: (forall ((Nat) (Nat)) ((plus (succ _qv_13) _qv_14)=(succ (plus _qv_13 _qv_14))))
    | Assumptions [6]: (forall ((Nat) (Lst)) ((rotate _t_15 (rotate m x))=(rotate m (rotate _t_15 x))))
    | Assumptions [7]: (forall ((Nat) (Lst)) ((rotate m (rotate _t_15 x))=(rotate _t_15 (rotate m x))))
    | Assumptions [8]: (forall ((Lst)) ((rotate (len nil) _qv_7)=_qv_7))
    | Assumptions [9]: (forall ((Nat)) ((plus (len nil) _qv_12)=_qv_12))
    ====================
  }
}

Base case:       ((rotate _v_18 (rotate _v_19 nil))=(rotate _v_19 (rotate _v_18 nil)))
{
  {
    ====================
    | Assumptions [0]: (forall ((Nat) (Lst)) ((len (cons _qv_1 _qv_2))=(succ (len _qv_2))))
    | Assumptions [1]: (forall ((Lst)) ((append nil _qv_3)=_qv_3))
    | Assumptions [2]: (forall ((Nat) (Lst) (Lst)) ((append (cons _qv_4 _qv_5) _qv_6)=(cons _qv_4 (append _qv_5 _qv_6))))
    | Assumptions [3]: (forall ((Nat)) ((rotate (succ _qv_8) nil)=nil))
    | Assumptions [4]: (forall ((Nat) (Nat) (Lst)) ((rotate (succ _qv_9) (cons _qv_10 _qv_11))=(rotate _qv_9 (append _qv_11 (cons _qv_10 nil)))))
    | Assumptions [5]: (forall ((Nat) (Nat)) ((plus (succ _qv_13) _qv_14)=(succ (plus _qv_13 _qv_14))))
    | Assumptions [6]: (forall ((Nat) (Lst)) ((rotate _t_15 (rotate m x))=(rotate m (rotate _t_15 x))))
    | Assumptions [7]: (forall ((Nat) (Lst)) ((rotate m (rotate _t_15 x))=(rotate _t_15 (rotate m x))))
    | Assumptions [8]: (forall ((Lst)) ((rotate (len nil) _qv_7)=_qv_7))
    | Assumptions [9]: (forall ((Nat)) ((plus (len nil) _qv_12)=_qv_12))
    ====================
  }
}
Unknown
sat
